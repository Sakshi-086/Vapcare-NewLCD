
NewDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e40  08005e40  000070a0  2**0
                  CONTENTS
  4 .ARM          00000008  08005e40  08005e40  00006e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e48  08005e48  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e48  08005e48  00006e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e4c  08005e4c  00006e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08005e50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200000a0  08005ef0  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08005ef0  0000759c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139a  00000000  00000000  000070c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d85  00000000  00000000  00018463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0001b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e03  00000000  00000000  0001c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a79a  00000000  00000000  0001d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cb5  00000000  00000000  0003798d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d434  00000000  00000000  0004f642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eca76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  000ecabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f1aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08004df4 	.word	0x08004df4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	08004df4 	.word	0x08004df4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b968 	b.w	8000474 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	fb07 1114 	mls	r1, r7, r4, r1
 80001f6:	fa1f f68c 	uxth.w	r6, ip
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8110 	bcs.w	8000436 <__udivmoddi4+0x27a>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810d 	bls.w	8000436 <__udivmoddi4+0x27a>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	fb00 f606 	mul.w	r6, r0, r6
 800022e:	fa1f f38e 	uxth.w	r3, lr
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fa 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f7 	bls.w	800043a <__udivmoddi4+0x27e>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	1b9b      	subs	r3, r3, r6
 8000254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80ee 	bcc.w	8000464 <__udivmoddi4+0x2a8>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x202>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	2101      	movs	r1, #1
 80002a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	fb07 f006 	mul.w	r0, r7, r6
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	fb00 f707 	mul.w	r7, r0, r7
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80ae 	bhi.w	800045e <__udivmoddi4+0x2a2>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa24 f607 	lsr.w	r6, r4, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbb6 f8f9 	udiv	r8, r6, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 6618 	mls	r6, r9, r8, r6
 800032e:	fa20 f307 	lsr.w	r3, r0, r7
 8000332:	408c      	lsls	r4, r1
 8000334:	fa00 fa01 	lsl.w	sl, r0, r1
 8000338:	fb08 f00e 	mul.w	r0, r8, lr
 800033c:	431c      	orrs	r4, r3
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000344:	4298      	cmp	r0, r3
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	eb1c 0303 	adds.w	r3, ip, r3
 8000350:	f108 36ff 	add.w	r6, r8, #4294967295
 8000354:	f080 8081 	bcs.w	800045a <__udivmoddi4+0x29e>
 8000358:	4298      	cmp	r0, r3
 800035a:	d97e      	bls.n	800045a <__udivmoddi4+0x29e>
 800035c:	f1a8 0802 	sub.w	r8, r8, #2
 8000360:	4463      	add	r3, ip
 8000362:	1a1e      	subs	r6, r3, r0
 8000364:	fbb6 f3f9 	udiv	r3, r6, r9
 8000368:	fb09 6613 	mls	r6, r9, r3, r6
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000376:	45a6      	cmp	lr, r4
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x1d0>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000382:	d266      	bcs.n	8000452 <__udivmoddi4+0x296>
 8000384:	45a6      	cmp	lr, r4
 8000386:	d964      	bls.n	8000452 <__udivmoddi4+0x296>
 8000388:	3b02      	subs	r3, #2
 800038a:	4464      	add	r4, ip
 800038c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000390:	fba0 8302 	umull	r8, r3, r0, r2
 8000394:	eba4 040e 	sub.w	r4, r4, lr
 8000398:	429c      	cmp	r4, r3
 800039a:	46c6      	mov	lr, r8
 800039c:	461e      	mov	r6, r3
 800039e:	d350      	bcc.n	8000442 <__udivmoddi4+0x286>
 80003a0:	d04d      	beq.n	800043e <__udivmoddi4+0x282>
 80003a2:	b155      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a4:	ebba 030e 	subs.w	r3, sl, lr
 80003a8:	eb64 0406 	sbc.w	r4, r4, r6
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	40cb      	lsrs	r3, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e751      	b.n	8000262 <__udivmoddi4+0xa6>
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa20 f303 	lsr.w	r3, r0, r3
 80003d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003d8:	fb08 1110 	mls	r1, r8, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x248>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29a>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29a>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	fbb3 f1f8 	udiv	r1, r3, r8
 800040a:	fb08 3311 	mls	r3, r8, r1, r3
 800040e:	b2a4      	uxth	r4, r4
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x272>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x292>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x292>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f2      	b.n	8000220 <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e708      	b.n	8000250 <__udivmoddi4+0x94>
 800043e:	45c2      	cmp	sl, r8
 8000440:	d2af      	bcs.n	80003a2 <__udivmoddi4+0x1e6>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 060c 	sbc.w	r6, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a9      	b.n	80003a2 <__udivmoddi4+0x1e6>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x272>
 8000452:	4603      	mov	r3, r0
 8000454:	e79a      	b.n	800038c <__udivmoddi4+0x1d0>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x248>
 800045a:	46b0      	mov	r8, r6
 800045c:	e781      	b.n	8000362 <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74f      	b.n	8000304 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e711      	b.n	8000290 <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000488:	4b25      	ldr	r3, [pc, #148]	@ (8000520 <MX_ADC_Init+0xa8>)
 800048a:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <MX_ADC_Init+0xac>)
 800048c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048e:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <MX_ADC_Init+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000494:	4b22      	ldr	r3, [pc, #136]	@ (8000520 <MX_ADC_Init+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004b8:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004be:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ea:	f001 fc03 	bl	8001cf4 <HAL_ADC_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80004f4:	f000 ff04 	bl	8001300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_ADC_Init+0xa8>)
 800050a:	f001 fd39 	bl	8001f80 <HAL_ADC_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000514:	f000 fef4 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000bc 	.word	0x200000bc
 8000524:	40012400 	.word	0x40012400

08000528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <HAL_ADC_MspInit+0xa4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d13c      	bne.n	80005c4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800054a:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 800054c:	6a1b      	ldr	r3, [r3, #32]
 800054e:	4a20      	ldr	r2, [pc, #128]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000554:	6213      	str	r3, [r2, #32]
 8000556:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <HAL_ADC_MspInit+0xac>)
 80005a6:	f001 ff3b 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <HAL_ADC_MspInit+0xb0>)
 80005c0:	f001 ff2e 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40012400 	.word	0x40012400
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a25      	ldr	r2, [pc, #148]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a19      	ldr	r2, [pc, #100]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_GPIO_Init+0xa0>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a13      	ldr	r2, [pc, #76]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_GPIO_Init+0xa0>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

}
 8000672:	bf00      	nop
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800

08000680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f002 f86f 	bl	80027a0 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fe1a 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000110 	.word	0x20000110
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C2_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C2_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C2_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C2_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C2_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C2_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C2_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C2_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C2_Init+0x50>)
 800071a:	f002 f841 	bl	80027a0 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fdec 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000164 	.word	0x20000164
 8000730:	40005800 	.word	0x40005800
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a2e      	ldr	r2, [pc, #184]	@ (8000810 <HAL_I2C_MspInit+0xd8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d128      	bne.n	80007ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000772:	23c0      	movs	r3, #192	@ 0xc0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000782:	2304      	movs	r3, #4
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <HAL_I2C_MspInit+0xe0>)
 800078e:	f001 fe47 	bl	8002420 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079c:	6253      	str	r3, [r2, #36]	@ 0x24
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007aa:	e02d      	b.n	8000808 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <HAL_I2C_MspInit+0xe4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d128      	bne.n	8000808 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e0:	2304      	movs	r3, #4
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <HAL_I2C_MspInit+0xe0>)
 80007ec:	f001 fe18 	bl	8002420 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007fa:	6253      	str	r3, [r2, #36]	@ 0x24
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	@ 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40005800 	.word	0x40005800

08000820 <KBD_Init>:
	KBD1_PORT,	KBD2_PORT,	KBD3_PORT,	KBD4_PORT,	KBD5_PORT,
	KBD6_PORT,	KBD7_PORT,	KBD8_PORT,	KBD9_PORT,	KBD10_PORT
};

void KBD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	uint8_t ui8Index;

	/* KBD GPIO Configuration --------------------------------------------------*/

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000826:	2300      	movs	r3, #0
 8000828:	75fb      	strb	r3, [r7, #23]
 800082a:	e017      	b.n	800085c <KBD_Init+0x3c>
	{
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <KBD_Init+0x94>)
 8000830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000834:	603b      	str	r3, [r7, #0]
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
		GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <KBD_Init+0x98>)
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	461a      	mov	r2, r3
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4610      	mov	r0, r2
 8000852:	f001 fde5 	bl	8002420 <HAL_GPIO_Init>
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000856:	7dfb      	ldrb	r3, [r7, #23]
 8000858:	3301      	adds	r3, #1
 800085a:	75fb      	strb	r3, [r7, #23]
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	2b09      	cmp	r3, #9
 8000860:	d9e4      	bls.n	800082c <KBD_Init+0xc>
	}

	GPIO_InitStructure.Pin = AC_LED_PIN;
 8000862:	2304      	movs	r3, #4
 8000864:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <KBD_Init+0x9c>)
 8000878:	f001 fdd2 	bl	8002420 <HAL_GPIO_Init>
	AC_LED_OFF;
 800087c:	2200      	movs	r2, #0
 800087e:	2104      	movs	r1, #4
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <KBD_Init+0x9c>)
 8000882:	f001 ff74 	bl	800276e <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = BATT_LED_PIN;
 8000886:	2308      	movs	r3, #8
 8000888:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <KBD_Init+0x9c>)
 800089c:	f001 fdc0 	bl	8002420 <HAL_GPIO_Init>
	BATT_LED_OFF;
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <KBD_Init+0x9c>)
 80008a6:	f001 ff62 	bl	800276e <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000004 	.word	0x20000004
 80008b8:	20000018 	.word	0x20000018
 80008bc:	40020800 	.word	0x40020800

080008c0 <KBD_Get>:

uint16_t KBD_Get()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint16_t ui16KeyStatus = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	80fb      	strh	r3, [r7, #6]
	uint8_t ui8Index;

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	e01b      	b.n	8000908 <KBD_Get+0x48>
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], ui16KBDGpioPins[ui8Index]) == GPIO_PIN_RESET)
 80008d0:	797b      	ldrb	r3, [r7, #5]
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <KBD_Get+0x58>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	4618      	mov	r0, r3
 80008da:	797b      	ldrb	r3, [r7, #5]
 80008dc:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <KBD_Get+0x5c>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	4619      	mov	r1, r3
 80008e4:	f001 ff2c 	bl	8002740 <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <KBD_Get+0x42>
		{
			ui16KeyStatus = ui16KeyStatus | ((uint16_t)0x01) << ui8Index;
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	80fb      	strh	r3, [r7, #6]
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	3301      	adds	r3, #1
 8000906:	717b      	strb	r3, [r7, #5]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d9e0      	bls.n	80008d0 <KBD_Get+0x10>
		}
	}

	return ui16KeyStatus;
 800090e:	88fb      	ldrh	r3, [r7, #6]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000018 	.word	0x20000018
 800091c:	20000004 	.word	0x20000004

08000920 <KBD_ButtonStatus>:

uint8_t KBD_ButtonStatus(uint8_t ui8ButtonNum)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
    static uint32_t ui32PressConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
    static uint32_t ui32ReleaseConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
    static uint8_t ui8TriggerPressed[NUMBER_OF_BUTTONS] = {0};
    uint16_t ui16ButtonMask = 0x01;
 800092a:	2301      	movs	r3, #1
 800092c:	81fb      	strh	r3, [r7, #14]

    ui16ButtonMask = ui16ButtonMask << ui8ButtonNum;
 800092e:	89fa      	ldrh	r2, [r7, #14]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	81fb      	strh	r3, [r7, #14]

    if ((KBD_Get() & ui16ButtonMask) == ui16ButtonMask)  // Button is pressed
 8000938:	f7ff ffc2 	bl	80008c0 <KBD_Get>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	89fb      	ldrh	r3, [r7, #14]
 8000942:	4013      	ands	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	89fa      	ldrh	r2, [r7, #14]
 8000948:	429a      	cmp	r2, r3
 800094a:	d11f      	bne.n	800098c <KBD_ButtonStatus+0x6c>
    {
        ui32ReleaseConfidenceLevel[ui8ButtonNum] = 0;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <KBD_ButtonStatus+0xb8>)
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        ui32PressConfidenceLevel[ui8ButtonNum]++;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4a20      	ldr	r2, [pc, #128]	@ (80009dc <KBD_ButtonStatus+0xbc>)
 800095a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800095e:	3201      	adds	r2, #1
 8000960:	491e      	ldr	r1, [pc, #120]	@ (80009dc <KBD_ButtonStatus+0xbc>)
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        if (ui32PressConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a1c      	ldr	r2, [pc, #112]	@ (80009dc <KBD_ButtonStatus+0xbc>)
 800096a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <KBD_ButtonStatus+0xc0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d92a      	bls.n	80009cc <KBD_ButtonStatus+0xac>
        {
            if (!ui8TriggerPressed[ui8ButtonNum])
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a1a      	ldr	r2, [pc, #104]	@ (80009e4 <KBD_ButtonStatus+0xc4>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d125      	bne.n	80009cc <KBD_ButtonStatus+0xac>
            {
                ui8TriggerPressed[ui8ButtonNum] = 1;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <KBD_ButtonStatus+0xc4>)
 8000984:	2101      	movs	r1, #1
 8000986:	54d1      	strb	r1, [r2, r3]
                return BUTTON_PRESSED;
 8000988:	2300      	movs	r3, #0
 800098a:	e020      	b.n	80009ce <KBD_ButtonStatus+0xae>
            }
        }
    }
    else  // Button is released
    {
        ui32ReleaseConfidenceLevel[ui8ButtonNum]++;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <KBD_ButtonStatus+0xb8>)
 8000990:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000994:	3201      	adds	r2, #1
 8000996:	4910      	ldr	r1, [pc, #64]	@ (80009d8 <KBD_ButtonStatus+0xb8>)
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ui32PressConfidenceLevel[ui8ButtonNum] = 0;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <KBD_ButtonStatus+0xbc>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        if (ui32ReleaseConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <KBD_ButtonStatus+0xb8>)
 80009aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <KBD_ButtonStatus+0xc0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d90a      	bls.n	80009cc <KBD_ButtonStatus+0xac>
        {
            if (ui8TriggerPressed[ui8ButtonNum])
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <KBD_ButtonStatus+0xc4>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <KBD_ButtonStatus+0xac>
            {
                ui8TriggerPressed[ui8ButtonNum] = 0;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <KBD_ButtonStatus+0xc4>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	54d1      	strb	r1, [r2, r3]
                return BUTTON_CLICKED;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <KBD_ButtonStatus+0xae>
            }
        }
    }

    return BUTTON_NOT_CLICKED;
 80009cc:	2302      	movs	r3, #2
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001b8 	.word	0x200001b8
 80009dc:	200001e0 	.word	0x200001e0
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000208 	.word	0x20000208

080009e8 <LCD_Initialization>:

uint8_t ui8Row = ROW1; // Current active row
uint8_t ui8PrevRow = ROW1;

void LCD_Initialization(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
//	HAL_Delay(2000);
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <get_label_name>:
	{PORT_SETTINGS_CONFIRM_TEXT_R5C4_X, PORT_SETTINGS_CONFIRM_TEXT_R5C4_Y, "PORT_SETTINGS_CONFIRM_TEXT_R5C4_LABEL"},
	{PORT_SETTINGS_CONFIRM_TEXT_R5C5_X, PORT_SETTINGS_CONFIRM_TEXT_R5C5_Y, "PORT_SETTINGS_CONFIRM_TEXT_R5C5_LABEL"},

};

const char* get_label_name(uint16_t x, uint16_t y) {
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e017      	b.n	8000a3a <get_label_name+0x46>
        if (label_mapping[i].x == x && label_mapping[i].y == y) {
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <get_label_name+0x58>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d10d      	bne.n	8000a34 <get_label_name+0x40>
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <get_label_name+0x58>)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4413      	add	r3, r2
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	88ba      	ldrh	r2, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d105      	bne.n	8000a34 <get_label_name+0x40>
            return label_mapping[i].label_name;
 8000a28:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <get_label_name+0x58>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	4413      	add	r3, r2
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	e006      	b.n	8000a42 <get_label_name+0x4e>
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b46      	cmp	r3, #70	@ 0x46
 8000a3e:	d9e4      	bls.n	8000a0a <get_label_name+0x16>
        }
    }
    return NULL; // Return NULL if no label matches the coordinates
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	08005ab8 	.word	0x08005ab8

08000a50 <set_text>:

// Function to send set text command to a widget
void set_text(const char* widget_type, const char* widget_name, const char* text) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0cc      	sub	sp, #304	@ 0x130
 8000a54:	af08      	add	r7, sp, #32
 8000a56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a5e:	6018      	str	r0, [r3, #0]
 8000a60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a68:	6019      	str	r1, [r3, #0]
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a72:	601a      	str	r2, [r3, #0]
    // Construct JSON command
    char json_command[256] = {0};
 8000a74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	@ 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fd10 	bl	80044ac <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s%s%s",
 8000a8c:	f107 0010 	add.w	r0, r7, #16
 8000a90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	9306      	str	r3, [sp, #24]
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <set_text+0xb0>)
 8000a9e:	9305      	str	r3, [sp, #20]
 8000aa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	9304      	str	r3, [sp, #16]
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <set_text+0xb4>)
 8000aae:	9303      	str	r3, [sp, #12]
 8000ab0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <set_text+0xb8>)
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <set_text+0xbc>)
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <set_text+0xc0>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <set_text+0xc4>)
 8000ac8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000acc:	f003 fcba 	bl	8004444 <sniprintf>
             CMD_PREFIX, CMD_CODE_SET_TEXT, CMD_SUFFIX_TYPE, widget_type,
             CMD_SUFFIX_WIDGET, widget_name, CMD_SUFFIX_TEXT, text);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fb51 	bl	800017c <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <set_text+0xc8>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fce8 	bl	80044bc <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 f833 	bl	8001b5c <USART_SendCommand>
}
 8000af6:	bf00      	nop
 8000af8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	080055ec 	.word	0x080055ec
 8000b04:	080055f8 	.word	0x080055f8
 8000b08:	08005608 	.word	0x08005608
 8000b0c:	08005614 	.word	0x08005614
 8000b10:	080055c4 	.word	0x080055c4
 8000b14:	080055d8 	.word	0x080055d8
 8000b18:	08005620 	.word	0x08005620

08000b1c <set_visible>:
    // Call set_value to update the widget's value
    set_text("label", label_name, value_str);
}

// Function to set the visibility of a widget (icon)
void set_visible(const char* widget_name, uint8_t visible) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0c4      	sub	sp, #272	@ 0x110
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b2a:	6018      	str	r0, [r3, #0]
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b32:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000b36:	701a      	strb	r2, [r3, #0]
    char json_command[256] = {0};
 8000b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	3304      	adds	r3, #4
 8000b46:	22fc      	movs	r2, #252	@ 0xfc
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fcae 	bl	80044ac <memset>

    // Construct the JSON command for set_visible
    snprintf(json_command, sizeof(json_command),
 8000b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b54:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d101      	bne.n	8000b62 <set_visible+0x46>
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <set_visible+0x78>)
 8000b60:	e000      	b.n	8000b64 <set_visible+0x48>
 8000b62:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <set_visible+0x7c>)
 8000b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b6c:	f107 0008 	add.w	r0, r7, #8
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <set_visible+0x80>)
 8000b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b7a:	f003 fc63 	bl	8004444 <sniprintf>
             "ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":%s}>ET",
             widget_name, (visible == 1) ? "true" : "false");

    // Send the JSON command using USART
    USART_SendCommand(json_command);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 ffea 	bl	8001b5c <USART_SendCommand>
}
 8000b88:	bf00      	nop
 8000b8a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08005630 	.word	0x08005630
 8000b98:	08005638 	.word	0x08005638
 8000b9c:	08005640 	.word	0x08005640

08000ba0 <LCD_DisplayIcon>:

void LCD_DisplayIcon(uint16_t ui16X, uint16_t ui16Y, uint16_t ui16Index) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	460b      	mov	r3, r1
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	807b      	strh	r3, [r7, #2]
	//Get label name from coordinates
    const char *icon_name = get_label_name(ui16X, ui16Y);
 8000bb2:	88ba      	ldrh	r2, [r7, #4]
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff1b 	bl	80009f4 <get_label_name>
 8000bbe:	60f8      	str	r0, [r7, #12]

    // Check if the icon name is found for the given coordinates
    if (icon_name == NULL) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <LCD_DisplayIcon+0x2e>
        // Handle error: No icon found for these coordinates
        USART_SendCommand("ST<{\"cmd_code\":\"error\",\"message\":\"No Icon Found\"}>ET");
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <LCD_DisplayIcon+0x40>)
 8000bc8:	f000 ffc8 	bl	8001b5c <USART_SendCommand>
        return;
 8000bcc:	e005      	b.n	8000bda <LCD_DisplayIcon+0x3a>
    }

    // Call set_visible function to update visibility
    set_visible(icon_name,ui16Index);
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff ffa1 	bl	8000b1c <set_visible>
}
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	0800568c 	.word	0x0800568c

08000be4 <get_window_name_from_index>:
		{SUCTION_SETTINGS_SCREEN_IMAGE_INDEX, "SUCTION_SETTINGS_WIN"}

};


const char* get_window_name_from_index(uint16_t index) {
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e00f      	b.n	8000c14 <get_window_name_from_index+0x30>
        if (index_mapping[i].index == index) {
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c28 <get_window_name_from_index+0x44>)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000bfc:	88fa      	ldrh	r2, [r7, #6]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d105      	bne.n	8000c0e <get_window_name_from_index+0x2a>
            return index_mapping[i].window_name;
 8000c02:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <get_window_name_from_index+0x44>)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	e006      	b.n	8000c1c <get_window_name_from_index+0x38>
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b1e      	cmp	r3, #30
 8000c18:	d9ec      	bls.n	8000bf4 <get_window_name_from_index+0x10>
        }
    }
    return NULL; // Return NULL if no matching window is found
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	08005cf0 	.word	0x08005cf0

08000c2c <open_win>:

// Function to send open window command for a specific widget
void open_win(const char* widget) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0c8      	sub	sp, #288	@ 0x120
 8000c30:	af06      	add	r7, sp, #24
 8000c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c3a:	6018      	str	r0, [r3, #0]
    // Construct JSON command
    char json_command[256] = {0};
 8000c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	22fc      	movs	r2, #252	@ 0xfc
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fc2c 	bl	80044ac <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s",
 8000c54:	f107 0008 	add.w	r0, r7, #8
 8000c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	9304      	str	r3, [sp, #16]
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <open_win+0x84>)
 8000c66:	9303      	str	r3, [sp, #12]
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <open_win+0x88>)
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <open_win+0x8c>)
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <open_win+0x90>)
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <open_win+0x94>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <open_win+0x98>)
 8000c78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c7c:	f003 fbe2 	bl	8004444 <sniprintf>
             CMD_PREFIX, CMD_CODE_OPEN_WINDOW, CMD_SUFFIX_TYPE, WIDGET_TYPE_WINDOW,
             CMD_SUFFIX_WIDGET, widget);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fa79 	bl	800017c <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <open_win+0x9c>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc10 	bl	80044bc <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 ff5b 	bl	8001b5c <USART_SendCommand>
}
 8000ca6:	bf00      	nop
 8000ca8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	080055f8 	.word	0x080055f8
 8000cb4:	08005950 	.word	0x08005950
 8000cb8:	08005608 	.word	0x08005608
 8000cbc:	08005958 	.word	0x08005958
 8000cc0:	080055c4 	.word	0x080055c4
 8000cc4:	08005940 	.word	0x08005940
 8000cc8:	08005620 	.word	0x08005620

08000ccc <set_image>:

void set_image(const char* widget_name, const char* image_name) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0c4      	sub	sp, #272	@ 0x110
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cda:	6018      	str	r0, [r3, #0]
 8000cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ce4:	6019      	str	r1, [r3, #0]
    char json_command[256] = {0}; // Buffer for the JSON command
 8000ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	22fc      	movs	r2, #252	@ 0xfc
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fbd7 	bl	80044ac <memset>

    // Construct the JSON command for setting the image
    snprintf(json_command, sizeof(json_command),
 8000cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000d06:	f107 0008 	add.w	r0, r7, #8
 8000d0a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000d0e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	9200      	str	r2, [sp, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <set_image+0x6c>)
 8000d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1e:	f003 fb91 	bl	8004444 <sniprintf>
             "ST<{\"cmd_code\":\"set_image\",\"type\":\"image\",\"widget\":\"%s\",\"image\":\"%s\"}>ET",
             widget_name, image_name);

    // Send the JSON command using USART
    USART_SendCommand(json_command);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 ff18 	bl	8001b5c <USART_SendCommand>
}
 8000d2c:	bf00      	nop
 8000d2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08005964 	.word	0x08005964

08000d3c <LCD_DisplayImage>:

void LCD_DisplayImage(uint16_t ui16index) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
    // Get window name from index
    const char *window_name = get_window_name_from_index(ui16index);
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff4b 	bl	8000be4 <get_window_name_from_index>
 8000d4e:	60f8      	str	r0, [r7, #12]

    if (window_name == NULL) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <LCD_DisplayImage+0x22>
        // Handle invalid index case
        USART_SendCommand("ST<{\"cmd_code\":\"error\",\"message\":\"Invalid Index\"}>ET");
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <LCD_DisplayImage+0x30>)
 8000d58:	f000 ff00 	bl	8001b5c <USART_SendCommand>
        return;
 8000d5c:	e002      	b.n	8000d64 <LCD_DisplayImage+0x28>
    }

    // Open the window using open_win
    open_win(window_name);
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff ff64 	bl	8000c2c <open_win>
}
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	080059b0 	.word	0x080059b0

08000d70 <LCD_DisplayNewPatientSelection>:
	LCD_DisplayImage(STAND_BY_IMAGE_INDEX);

}

void LCD_DisplayNewPatientSelection(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	LCD_DisplayImage(NEW_PATIENT_IMAGE_INDEX);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ffe1 	bl	8000d3c <LCD_DisplayImage>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <LCD_DisplayNewPatientSelectionMenu>:

void LCD_DisplayNewPatientSelectionMenu(uint8_t ui8Num)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
	if(ui8Num == 1)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10a      	bne.n	8000da4 <LCD_DisplayNewPatientSelectionMenu+0x26>
	{
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, CLEAR_BOX_NO_ICON_INDEX);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2182      	movs	r1, #130	@ 0x82
 8000d92:	2082      	movs	r0, #130	@ 0x82
 8000d94:	f7ff ff04 	bl	8000ba0 <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, BOX_YES_ICON_INDEX);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	217a      	movs	r1, #122	@ 0x7a
 8000d9c:	207a      	movs	r0, #122	@ 0x7a
 8000d9e:	f7ff feff 	bl	8000ba0 <LCD_DisplayIcon>
	{
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, CLEAR_BOX_YES_ICON_INDEX);
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
	}

}
 8000da2:	e009      	b.n	8000db8 <LCD_DisplayNewPatientSelectionMenu+0x3a>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, CLEAR_BOX_YES_ICON_INDEX);
 8000da4:	2200      	movs	r2, #0
 8000da6:	217a      	movs	r1, #122	@ 0x7a
 8000da8:	207a      	movs	r0, #122	@ 0x7a
 8000daa:	f7ff fef9 	bl	8000ba0 <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2182      	movs	r1, #130	@ 0x82
 8000db2:	2082      	movs	r0, #130	@ 0x82
 8000db4:	f7ff fef4 	bl	8000ba0 <LCD_DisplayIcon>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <LCD_DisplayConfirmNewPatient>:

void LCD_DisplayConfirmNewPatient(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	LCD_DisplayImage(CONFIRM_NEW_PATIENT_IMAGE_INDEX);
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f7ff ffb9 	bl	8000d3c <LCD_DisplayImage>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <LCD_DisplayFlashErasingScreen>:

void LCD_DisplayFlashErasingScreen(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
	LCD_DisplayImage(ERASING_OLD_DATA_IMAGE_INDEX);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f7ff ffb2 	bl	8000d3c <LCD_DisplayImage>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LCD_DisplayClampTubesMain>:

void LCD_DisplayClampTubesMain(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	LCD_DisplayImage(CLAMP_TUBES_IMAGE_INDEX_1);
 8000de0:	2004      	movs	r0, #4
 8000de2:	f7ff ffab 	bl	8000d3c <LCD_DisplayImage>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}

08000dea <LCD_DisplayClampTubesPause>:

void LCD_DisplayClampTubesPause(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
	LCD_DisplayImage(CLAMP_TUBES_IMAGE_INDEX_2);
 8000dee:	2005      	movs	r0, #5
 8000df0:	f7ff ffa4 	bl	8000d3c <LCD_DisplayImage>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <LCD_DisplayUnclampTubes>:

void LCD_DisplayUnclampTubes(void)
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b08e      	sub	sp, #56	@ 0x38
 8000dfc:	af00      	add	r7, sp, #0
	LCD_DisplayImage(UNCLAMP_TUBES_IMAGE_INDEX);
 8000dfe:	2025      	movs	r0, #37	@ 0x25
 8000e00:	f7ff ff9c 	bl	8000d3c <LCD_DisplayImage>
	const char* image_label_name = "image1";
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <LCD_DisplayUnclampTubes+0x88>)
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
	const char* percenatge_label_name = "label18";
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <LCD_DisplayUnclampTubes+0x8c>)
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const char* images[] = {"loading2", "loading4", "loading6", "loading8", "loading10"};
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <LCD_DisplayUnclampTubes+0x90>)
 8000e0e:	f107 0414 	add.w	r4, r7, #20
 8000e12:	461d      	mov	r5, r3
 8000e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	6023      	str	r3, [r4, #0]
	const char* text[]= {"20 %","40%","60%","80%","100%"};
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <LCD_DisplayUnclampTubes+0x94>)
 8000e1e:	463c      	mov	r4, r7
 8000e20:	461d      	mov	r5, r3
 8000e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	6023      	str	r3, [r4, #0]
	int num_images = sizeof(images) / sizeof(images[0]);
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i = 0; i < num_images; ++i)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e32:	e01b      	b.n	8000e6c <LCD_DisplayUnclampTubes+0x74>
	{
		set_image(image_label_name, images[i]);
 8000e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	3338      	adds	r3, #56	@ 0x38
 8000e3a:	443b      	add	r3, r7
 8000e3c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e40:	4619      	mov	r1, r3
 8000e42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e44:	f7ff ff42 	bl	8000ccc <set_image>
		set_text("label", percenatge_label_name, text[i]);
 8000e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	3338      	adds	r3, #56	@ 0x38
 8000e4e:	443b      	add	r3, r7
 8000e50:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000e54:	461a      	mov	r2, r3
 8000e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <LCD_DisplayUnclampTubes+0x98>)
 8000e5a:	f7ff fdf9 	bl	8000a50 <set_text>
	    HAL_Delay(1000); //
 8000e5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e62:	f000 ff25 	bl	8001cb0 <HAL_Delay>
	for (int i = 0; i < num_images; ++i)
 8000e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbdf      	blt.n	8000e34 <LCD_DisplayUnclampTubes+0x3c>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3738      	adds	r7, #56	@ 0x38
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	080059e8 	.word	0x080059e8
 8000e84:	080059f0 	.word	0x080059f0
 8000e88:	08005a34 	.word	0x08005a34
 8000e8c:	08005a64 	.word	0x08005a64
 8000e90:	08005628 	.word	0x08005628

08000e94 <LCD_ConfirmParameterAndBeginSuctionScreen>:

void LCD_ConfirmParameterAndBeginSuctionScreen(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	LCD_DisplayImage(SAVE_SETTINGS_AND_BEGIN_SUCTION_IMAGE_INDEX);
 8000e98:	203a      	movs	r0, #58	@ 0x3a
 8000e9a:	f7ff ff4f 	bl	8000d3c <LCD_DisplayImage>
//
//	LCD_DisplayText(F_MODE, OPTION_TEXT_X, OPTION_TEXT_Y, "Settings", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	LCD_DisplayText(F_MODE, MANDATORY_SUCTION_TEXT_X, MANDATORY_SUCTION_TEXT_Y, "OnDemand", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <LCD_DisplayNewMainSettingsPage1>:
}

/* New Settings Implementation */
/* CHECK LATER */
void LCD_DisplayNewMainSettingsPage1(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
	LCD_DisplayImage(SETTINGS_SCREEN_1_IMAGE_INDEX);
 8000ea6:	2032      	movs	r0, #50	@ 0x32
 8000ea8:	f7ff ff48 	bl	8000d3c <LCD_DisplayImage>
//	LCD_DisplayText(F_MODE, MANDATORY_SUCTION_TEXT_X, MANDATORY_SUCTION_TEXT_Y, "OnDemand", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, WHITE, WHITE);

//	ui8PrevRow = ROW1;
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LCD_DisplayPharyngealPortSuction>:
//	}
//}
//

void LCD_DisplayPharyngealPortSuction(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	LCD_DisplayImage(ORO_SUCTION_IMAGE_INDEX);
 8000eb4:	202a      	movs	r0, #42	@ 0x2a
 8000eb6:	f7ff ff41 	bl	8000d3c <LCD_DisplayImage>
//	else
//	{
//		LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Pause", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	}
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LCD_DisplayBeginSuction>:
//	}
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
}

void LCD_DisplayBeginSuction(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
	LCD_DisplayImage(BEGIN_SUCTION_IMAGE_INDEX);
 8000ec2:	2028      	movs	r0, #40	@ 0x28
 8000ec4:	f7ff ff3a 	bl	8000d3c <LCD_DisplayImage>
//	LCD_DisplayText(F_MODE, MANDATORY_SUCTION_TEXT_X, MANDATORY_SUCTION_TEXT_Y, "OnDemand", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//
//	LCD_DisplayText(F_MODE, START_SUCTION_TEXT_2_X, START_SUCTION_TEXT_2_Y, "Press [START] To Begin Suction", LCD_8X16_FONT_INDEX, BLACK, WHITE);
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LCD_DisplayPauseScreen>:

void LCD_DisplayPauseScreen(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	LCD_DisplayImage(PAUSE_SCREEN_IMAGE_INDEX);
 8000ed0:	202f      	movs	r0, #47	@ 0x2f
 8000ed2:	f7ff ff33 	bl	8000d3c <LCD_DisplayImage>
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//
//	LCD_DisplayText(F_MODE, PAUSE_MAIN_TEXT_2_X, PAUSE_MAIN_TEXT_2_Y, "Press [START] To Resume", LCD_8X16_FONT_INDEX, BLACK, WHITE);

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fe76 	bl	8001bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f9bb 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f7ff fb77 	bl	80005dc <MX_GPIO_Init>
  KBD_Init();
 8000eee:	f7ff fc97 	bl	8000820 <KBD_Init>
  LCD_Initialization();
 8000ef2:	f7ff fd79 	bl	80009e8 <LCD_Initialization>
  MX_ADC_Init();
 8000ef6:	f7ff fabf 	bl	8000478 <MX_ADC_Init>
  MX_I2C1_Init();
 8000efa:	f7ff fbc1 	bl	8000680 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000efe:	f7ff fbed 	bl	80006dc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f02:	f000 fa03 	bl	800130c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000f06:	f000 fb11 	bl	800152c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f0a:	f000 fb5d 	bl	80015c8 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000f0e:	f000 fba9 	bl	8001664 <MX_TIM11_Init>
  MX_UART5_Init();
 8000f12:	f000 fc85 	bl	8001820 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000f16:	f000 fcad 	bl	8001874 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f1a:	f000 fcd5 	bl	80018c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f1e:	f000 fcfd 	bl	800191c <MX_USART3_UART_Init>
//  /* USER CODE BEGIN 2 */
  HAL_Delay(5000); //Fixed Delay
 8000f22:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f26:	f000 fec3 	bl	8001cb0 <HAL_Delay>
  // Define screen states

  ScreenState currentScreen = SCREEN_NEW_PATIENT_SELECTION;  // Start at New Patient Selection
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  ScreenState previousScreen = SCREEN_NEW_PATIENT_SELECTION; // Default to initial screen
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71bb      	strb	r3, [r7, #6]
  if (currentScreen == SCREEN_NEW_PATIENT_SELECTION)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <main+0x60>
    {
        LCD_DisplayNewPatientSelection();
 8000f38:	f7ff ff1a 	bl	8000d70 <LCD_DisplayNewPatientSelection>
    }
  while (1)  // Main Loop
  {
      switch (currentScreen)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b0d      	cmp	r3, #13
 8000f40:	f200 8179 	bhi.w	8001236 <main+0x35a>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <main+0x70>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08001045 	.word	0x08001045
 8000f54:	08001237 	.word	0x08001237
 8000f58:	0800108b 	.word	0x0800108b
 8000f5c:	080010c9 	.word	0x080010c9
 8000f60:	08001237 	.word	0x08001237
 8000f64:	08001113 	.word	0x08001113
 8000f68:	08001151 	.word	0x08001151
 8000f6c:	080011bd 	.word	0x080011bd
 8000f70:	08001185 	.word	0x08001185
 8000f74:	08001237 	.word	0x08001237
 8000f78:	08001237 	.word	0x08001237
 8000f7c:	08001237 	.word	0x08001237
 8000f80:	080011a1 	.word	0x080011a1
      {
          /*
           * New Patient Selection Screen
           */
          case SCREEN_NEW_PATIENT_SELECTION:
              if (KBD_ButtonStatus(BUTTON_UP) == BUTTON_CLICKED)
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff fccb 	bl	8000920 <KBD_ButtonStatus>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d10a      	bne.n	8000fa6 <main+0xca>
              {
            	  currentOption = 1;
 8000f90:	4bb2      	ldr	r3, [pc, #712]	@ (800125c <main+0x380>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
                  LCD_DisplayNewPatientSelectionMenu(1);  // Highlight Option 1
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fef1 	bl	8000d7e <LCD_DisplayNewPatientSelectionMenu>
                  HAL_Delay(300);
 8000f9c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fa0:	f000 fe86 	bl	8001cb0 <HAL_Delay>
              {
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
                  LCD_DisplayNewMainSettingsPage1();
                  HAL_Delay(300);
              }
              break;
 8000fa4:	e14c      	b.n	8001240 <main+0x364>
              else if (KBD_ButtonStatus(BUTTON_DOWN) == BUTTON_CLICKED)
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff fcba 	bl	8000920 <KBD_ButtonStatus>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10a      	bne.n	8000fc8 <main+0xec>
            	  currentOption = 2;
 8000fb2:	4baa      	ldr	r3, [pc, #680]	@ (800125c <main+0x380>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	601a      	str	r2, [r3, #0]
                  LCD_DisplayNewPatientSelectionMenu(2);  // Highlight Option 2
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f7ff fee0 	bl	8000d7e <LCD_DisplayNewPatientSelectionMenu>
                  HAL_Delay(300);
 8000fbe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fc2:	f000 fe75 	bl	8001cb0 <HAL_Delay>
              break;
 8000fc6:	e13b      	b.n	8001240 <main+0x364>
              else if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f7ff fca9 	bl	8000920 <KBD_ButtonStatus>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11a      	bne.n	800100a <main+0x12e>
            	  if(currentOption == 1)
 8000fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800125c <main+0x380>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d108      	bne.n	8000fee <main+0x112>
            		  currentScreen = SCREEN_CONFIRM_NEW_PATIENT;  // Go to Confirm New Patient Screen
 8000fdc:	2301      	movs	r3, #1
 8000fde:	71fb      	strb	r3, [r7, #7]
            		  LCD_DisplayConfirmNewPatient();
 8000fe0:	f7ff feee 	bl	8000dc0 <LCD_DisplayConfirmNewPatient>
            		  HAL_Delay(300);
 8000fe4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000fe8:	f000 fe62 	bl	8001cb0 <HAL_Delay>
              break;
 8000fec:	e128      	b.n	8001240 <main+0x364>
            	  else if (currentOption == 2){
 8000fee:	4b9b      	ldr	r3, [pc, #620]	@ (800125c <main+0x380>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	f040 8124 	bne.w	8001240 <main+0x364>
            		  currentScreen = SCREEN_CLAMP_TUBES_MAIN;  // Go to Clamp Tubes Main Screen
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	71fb      	strb	r3, [r7, #7]
            		  LCD_DisplayClampTubesMain();
 8000ffc:	f7ff feee 	bl	8000ddc <LCD_DisplayClampTubesMain>
            		  HAL_Delay(300);
 8001000:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001004:	f000 fe54 	bl	8001cb0 <HAL_Delay>
              break;
 8001008:	e11a      	b.n	8001240 <main+0x364>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 800100a:	2005      	movs	r0, #5
 800100c:	f7ff fc88 	bl	8000920 <KBD_ButtonStatus>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <main+0x148>
                  LCD_DisplayNewPatientSelection();  // Stay on the same screen
 8001016:	f7ff feab 	bl	8000d70 <LCD_DisplayNewPatientSelection>
                  HAL_Delay(300);
 800101a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800101e:	f000 fe47 	bl	8001cb0 <HAL_Delay>
              break;
 8001022:	e10d      	b.n	8001240 <main+0x364>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8001024:	2008      	movs	r0, #8
 8001026:	f7ff fc7b 	bl	8000920 <KBD_ButtonStatus>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 8107 	bne.w	8001240 <main+0x364>
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
 8001032:	2308      	movs	r3, #8
 8001034:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayNewMainSettingsPage1();
 8001036:	f7ff ff34 	bl	8000ea2 <LCD_DisplayNewMainSettingsPage1>
                  HAL_Delay(300);
 800103a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800103e:	f000 fe37 	bl	8001cb0 <HAL_Delay>
              break;
 8001042:	e0fd      	b.n	8001240 <main+0x364>

          /*
           * Confirm New Patient Screen
           */
          case SCREEN_CONFIRM_NEW_PATIENT:
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8001044:	2004      	movs	r0, #4
 8001046:	f7ff fc6b 	bl	8000920 <KBD_ButtonStatus>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10c      	bne.n	800106a <main+0x18e>
              {
                  currentScreen = SCREEN_ERASING_OLD_DATA;  // Go to Flash Erasing Screen
 8001050:	2302      	movs	r3, #2
 8001052:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayFlashErasingScreen();
 8001054:	f7ff febb 	bl	8000dce <LCD_DisplayFlashErasingScreen>
                  HAL_Delay(2000);
 8001058:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105c:	f000 fe28 	bl	8001cb0 <HAL_Delay>
                  currentScreen = SCREEN_CLAMP_TUBES_MAIN;
 8001060:	2303      	movs	r3, #3
 8001062:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayClampTubesMain();
 8001064:	f7ff feba 	bl	8000ddc <LCD_DisplayClampTubesMain>
              {
                  currentScreen = SCREEN_NEW_PATIENT_SELECTION;  // Return to New Patient Selection
                  LCD_DisplayNewPatientSelection();
                  HAL_Delay(300);
              }
              break;
 8001068:	e0ec      	b.n	8001244 <main+0x368>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 800106a:	2005      	movs	r0, #5
 800106c:	f7ff fc58 	bl	8000920 <KBD_ButtonStatus>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	f040 80e6 	bne.w	8001244 <main+0x368>
                  currentScreen = SCREEN_NEW_PATIENT_SELECTION;  // Return to New Patient Selection
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayNewPatientSelection();
 800107c:	f7ff fe78 	bl	8000d70 <LCD_DisplayNewPatientSelection>
                  HAL_Delay(300);
 8001080:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001084:	f000 fe14 	bl	8001cb0 <HAL_Delay>
              break;
 8001088:	e0dc      	b.n	8001244 <main+0x368>

          /*
           * Clamp Tubes Main Screen
           */
          case SCREEN_CLAMP_TUBES_MAIN:
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 800108a:	2004      	movs	r0, #4
 800108c:	f7ff fc48 	bl	8000920 <KBD_ButtonStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d108      	bne.n	80010a8 <main+0x1cc>
              {
                  currentScreen = SCREEN_CLAMP_TUBES_PAUSE;  // Go to Clamp Tubes Pause
 8001096:	2304      	movs	r3, #4
 8001098:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayClampTubesPause();
 800109a:	f7ff fea6 	bl	8000dea <LCD_DisplayClampTubesPause>
                  HAL_Delay(300);
 800109e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010a2:	f000 fe05 	bl	8001cb0 <HAL_Delay>
              {
                  currentScreen = SCREEN_NEW_PATIENT_SELECTION;  // Return to New Patient Selection
                  LCD_DisplayNewPatientSelection();
                  HAL_Delay(300);
              }
              break;
 80010a6:	e0cf      	b.n	8001248 <main+0x36c>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 80010a8:	2005      	movs	r0, #5
 80010aa:	f7ff fc39 	bl	8000920 <KBD_ButtonStatus>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 80c9 	bne.w	8001248 <main+0x36c>
                  currentScreen = SCREEN_NEW_PATIENT_SELECTION;  // Return to New Patient Selection
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayNewPatientSelection();
 80010ba:	f7ff fe59 	bl	8000d70 <LCD_DisplayNewPatientSelection>
                  HAL_Delay(300);
 80010be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010c2:	f000 fdf5 	bl	8001cb0 <HAL_Delay>
              break;
 80010c6:	e0bf      	b.n	8001248 <main+0x36c>

          /*
           * Clamp Tubes Pause Screen
           */
          case SCREEN_CLAMP_TUBES_PAUSE:
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff fc29 	bl	8000920 <KBD_ButtonStatus>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10e      	bne.n	80010f2 <main+0x216>
              {
                  currentScreen = SCREEN_UNCLAMP_TUBES;  // Go to Unclamp Tubes
 80010d4:	2305      	movs	r3, #5
 80010d6:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayUnclampTubes();
 80010d8:	f7ff fe8e 	bl	8000df8 <LCD_DisplayUnclampTubes>
                  HAL_Delay(1000);  // 3-second delay
 80010dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e0:	f000 fde6 	bl	8001cb0 <HAL_Delay>
                  currentScreen = SCREEN_CONFIRM_PARAMETER;  // Go to Confirm Parameter Screen
 80010e4:	2306      	movs	r3, #6
 80010e6:	71fb      	strb	r3, [r7, #7]
                  LCD_ConfirmParameterAndBeginSuctionScreen();
 80010e8:	f7ff fed4 	bl	8000e94 <LCD_ConfirmParameterAndBeginSuctionScreen>
                  previousScreen=currentScreen;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	71bb      	strb	r3, [r7, #6]
              {
                  currentScreen = SCREEN_CLAMP_TUBES_MAIN;  // Return to Clamp Tubes Main
                  LCD_DisplayClampTubesMain();
                  HAL_Delay(300);
              }
              break;
 80010f0:	e0ac      	b.n	800124c <main+0x370>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 80010f2:	2005      	movs	r0, #5
 80010f4:	f7ff fc14 	bl	8000920 <KBD_ButtonStatus>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 80a6 	bne.w	800124c <main+0x370>
                  currentScreen = SCREEN_CLAMP_TUBES_MAIN;  // Return to Clamp Tubes Main
 8001100:	2303      	movs	r3, #3
 8001102:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayClampTubesMain();
 8001104:	f7ff fe6a 	bl	8000ddc <LCD_DisplayClampTubesMain>
                  HAL_Delay(300);
 8001108:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800110c:	f000 fdd0 	bl	8001cb0 <HAL_Delay>
              break;
 8001110:	e09c      	b.n	800124c <main+0x370>

          /*
           * Confirm Parameter And Begin Suction Screen
           */
          case SCREEN_CONFIRM_PARAMETER:
              if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8001112:	2006      	movs	r0, #6
 8001114:	f7ff fc04 	bl	8000920 <KBD_ButtonStatus>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d108      	bne.n	8001130 <main+0x254>
              {
                  currentScreen = SCREEN_BEGIN_SUCTION;  // Go to Begin Suction Screen
 800111e:	2307      	movs	r3, #7
 8001120:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayBeginSuction();
 8001122:	f7ff fecc 	bl	8000ebe <LCD_DisplayBeginSuction>
                  HAL_Delay(300);
 8001126:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800112a:	f000 fdc1 	bl	8001cb0 <HAL_Delay>
              {
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
                  LCD_DisplayNewMainSettingsPage1();
                  HAL_Delay(300);
              }
              break;
 800112e:	e08f      	b.n	8001250 <main+0x374>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8001130:	2008      	movs	r0, #8
 8001132:	f7ff fbf5 	bl	8000920 <KBD_ButtonStatus>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f040 8089 	bne.w	8001250 <main+0x374>
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
 800113e:	2308      	movs	r3, #8
 8001140:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayNewMainSettingsPage1();
 8001142:	f7ff feae 	bl	8000ea2 <LCD_DisplayNewMainSettingsPage1>
                  HAL_Delay(300);
 8001146:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800114a:	f000 fdb1 	bl	8001cb0 <HAL_Delay>
              break;
 800114e:	e07f      	b.n	8001250 <main+0x374>

          /*
           * Begin Suction Screen
           */
          case SCREEN_BEGIN_SUCTION:
              if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8001150:	2006      	movs	r0, #6
 8001152:	f7ff fbe5 	bl	8000920 <KBD_ButtonStatus>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d104      	bne.n	8001166 <main+0x28a>
              {
            	  currentScreen = SCREEN_ORO_PORT;
 800115c:	2309      	movs	r3, #9
 800115e:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayPharyngealPortSuction();  // Navigate to Pharyngeal Port Suction
 8001160:	f7ff fea6 	bl	8000eb0 <LCD_DisplayPharyngealPortSuction>
              {
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
                  LCD_DisplayNewMainSettingsPage1();
                  HAL_Delay(300);
              }
              break;
 8001164:	e076      	b.n	8001254 <main+0x378>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8001166:	2008      	movs	r0, #8
 8001168:	f7ff fbda 	bl	8000920 <KBD_ButtonStatus>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d170      	bne.n	8001254 <main+0x378>
                  currentScreen = SCREEN_SETTINGS;  // Go to Settings Screen
 8001172:	2308      	movs	r3, #8
 8001174:	71fb      	strb	r3, [r7, #7]
                  LCD_DisplayNewMainSettingsPage1();
 8001176:	f7ff fe94 	bl	8000ea2 <LCD_DisplayNewMainSettingsPage1>
                  HAL_Delay(300);
 800117a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800117e:	f000 fd97 	bl	8001cb0 <HAL_Delay>
              break;
 8001182:	e067      	b.n	8001254 <main+0x378>
          /*** oro port*/

          case SCREEN_ORO_PORT:
//        	  LCD_DisplayPharyngealPortSuction();
        	  if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8001184:	2006      	movs	r0, #6
 8001186:	f7ff fbcb 	bl	8000920 <KBD_ButtonStatus>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <main+0x2c4>
        	  {
        		  currentScreen= SCREEN_PAUSED;
 8001190:	230d      	movs	r3, #13
 8001192:	71fb      	strb	r3, [r7, #7]
        		  LCD_DisplayPauseScreen();
 8001194:	f7ff fe9a 	bl	8000ecc <LCD_DisplayPauseScreen>
        		  HAL_Delay(300);
 8001198:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800119c:	f000 fd88 	bl	8001cb0 <HAL_Delay>
        	  }
          case SCREEN_PAUSED:
        	  if(KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 80011a0:	2006      	movs	r0, #6
 80011a2:	f7ff fbbd 	bl	8000920 <KBD_ButtonStatus>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <main+0x2e0>
        	  {
        		  currentScreen= SCREEN_ORO_PORT;
 80011ac:	2309      	movs	r3, #9
 80011ae:	71fb      	strb	r3, [r7, #7]
        		  LCD_DisplayPharyngealPortSuction();
 80011b0:	f7ff fe7e 	bl	8000eb0 <LCD_DisplayPharyngealPortSuction>
        		  HAL_Delay(300);
 80011b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011b8:	f000 fd7a 	bl	8001cb0 <HAL_Delay>

          /*
           * Settings Screen
           */
          case SCREEN_SETTINGS:
        	  if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 80011bc:	2005      	movs	r0, #5
 80011be:	f7ff fbaf 	bl	8000920 <KBD_ButtonStatus>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d147      	bne.n	8001258 <main+0x37c>
                  {
                      currentScreen = previousScreen;  // Go back to the previous screen
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	71fb      	strb	r3, [r7, #7]
                      switch (previousScreen)
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b07      	cmp	r3, #7
 80011d0:	d827      	bhi.n	8001222 <main+0x346>
 80011d2:	a201      	add	r2, pc, #4	@ (adr r2, 80011d8 <main+0x2fc>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	080011ff 	.word	0x080011ff
 80011e0:	08001223 	.word	0x08001223
 80011e4:	08001205 	.word	0x08001205
 80011e8:	0800120b 	.word	0x0800120b
 80011ec:	08001211 	.word	0x08001211
 80011f0:	08001217 	.word	0x08001217
 80011f4:	0800121d 	.word	0x0800121d
                      {
                          case SCREEN_NEW_PATIENT_SELECTION:
                              LCD_DisplayNewPatientSelection();
 80011f8:	f7ff fdba 	bl	8000d70 <LCD_DisplayNewPatientSelection>
                              break;
 80011fc:	e016      	b.n	800122c <main+0x350>
                          case SCREEN_CONFIRM_NEW_PATIENT:
                              LCD_DisplayConfirmNewPatient();
 80011fe:	f7ff fddf 	bl	8000dc0 <LCD_DisplayConfirmNewPatient>
                              break;
 8001202:	e013      	b.n	800122c <main+0x350>
                          case SCREEN_CLAMP_TUBES_MAIN:
                              LCD_DisplayClampTubesMain();
 8001204:	f7ff fdea 	bl	8000ddc <LCD_DisplayClampTubesMain>
                              break;
 8001208:	e010      	b.n	800122c <main+0x350>
                          case SCREEN_CLAMP_TUBES_PAUSE:
                              LCD_DisplayClampTubesPause();
 800120a:	f7ff fdee 	bl	8000dea <LCD_DisplayClampTubesPause>
                              break;
 800120e:	e00d      	b.n	800122c <main+0x350>
                          case SCREEN_UNCLAMP_TUBES:
                              LCD_DisplayUnclampTubes();
 8001210:	f7ff fdf2 	bl	8000df8 <LCD_DisplayUnclampTubes>
                              break;
 8001214:	e00a      	b.n	800122c <main+0x350>
                          case SCREEN_CONFIRM_PARAMETER:
                              LCD_ConfirmParameterAndBeginSuctionScreen();
 8001216:	f7ff fe3d 	bl	8000e94 <LCD_ConfirmParameterAndBeginSuctionScreen>
                              break;
 800121a:	e007      	b.n	800122c <main+0x350>
                          case SCREEN_BEGIN_SUCTION:
                              LCD_DisplayBeginSuction();
 800121c:	f7ff fe4f 	bl	8000ebe <LCD_DisplayBeginSuction>
                              break;
 8001220:	e004      	b.n	800122c <main+0x350>
                          default:
                              // Fallback to New Patient Selection if the previous screen is undefined
                              currentScreen = SCREEN_NEW_PATIENT_SELECTION;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
                              LCD_DisplayNewPatientSelection();
 8001226:	f7ff fda3 	bl	8000d70 <LCD_DisplayNewPatientSelection>
                              break;
 800122a:	bf00      	nop
                      }
                      HAL_Delay(300);
 800122c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001230:	f000 fd3e 	bl	8001cb0 <HAL_Delay>
                  }
                  break;
 8001234:	e010      	b.n	8001258 <main+0x37c>

          default:
              // Handle undefined states
              currentScreen = SCREEN_NEW_PATIENT_SELECTION;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
              LCD_DisplayNewPatientSelection();
 800123a:	f7ff fd99 	bl	8000d70 <LCD_DisplayNewPatientSelection>
              break;
 800123e:	e00c      	b.n	800125a <main+0x37e>
              break;
 8001240:	bf00      	nop
 8001242:	e67b      	b.n	8000f3c <main+0x60>
              break;
 8001244:	bf00      	nop
 8001246:	e679      	b.n	8000f3c <main+0x60>
              break;
 8001248:	bf00      	nop
 800124a:	e677      	b.n	8000f3c <main+0x60>
              break;
 800124c:	bf00      	nop
 800124e:	e675      	b.n	8000f3c <main+0x60>
              break;
 8001250:	bf00      	nop
 8001252:	e673      	b.n	8000f3c <main+0x60>
              break;
 8001254:	bf00      	nop
 8001256:	e671      	b.n	8000f3c <main+0x60>
                  break;
 8001258:	bf00      	nop
      switch (currentScreen)
 800125a:	e66f      	b.n	8000f3c <main+0x60>
 800125c:	20000040 	.word	0x20000040

08001260 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b092      	sub	sp, #72	@ 0x48
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2234      	movs	r2, #52	@ 0x34
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 f91c 	bl	80044ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <SystemClock_Config+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <SystemClock_Config+0x9c>)
 800128c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001290:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001292:	2303      	movs	r3, #3
 8001294:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129e:	2310      	movs	r3, #16
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80012ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80012b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fbb3 	bl	8002a28 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80012c8:	f000 f81a 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2303      	movs	r3, #3
 80012d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fecf 	bl	8003088 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f0:	f000 f806 	bl	8001300 <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3748      	adds	r7, #72	@ 0x48
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40007000 	.word	0x40007000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_SPI1_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_SPI1_Init+0x64>)
 800135e:	f002 f957 	bl	8003610 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001368:	f7ff ffca 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000214 	.word	0x20000214
 8001374:	40013000 	.word	0x40013000

08001378 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <HAL_SPI_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a16      	ldr	r2, [pc, #88]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a10      	ldr	r2, [pc, #64]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <HAL_SPI_MspInit+0x80>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013dc:	2305      	movs	r3, #5
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <HAL_SPI_MspInit+0x84>)
 80013e8:	f001 f81a 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013000 	.word	0x40013000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_MspInit+0x58>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <HAL_MspInit+0x58>)
 800140c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001410:	6253      	str	r3, [r2, #36]	@ 0x24
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_MspInit+0x58>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001416:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_MspInit+0x58>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <HAL_MspInit+0x58>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_MspInit+0x58>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_MspInit+0x58>)
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_MspInit+0x58>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6253      	str	r3, [r2, #36]	@ 0x24
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_MspInit+0x58>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40023800 	.word	0x40023800

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 fbe4 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f002 fffe 	bl	80044e4 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20014000 	.word	0x20014000
 8001514:	00000400 	.word	0x00000400
 8001518:	2000026c 	.word	0x2000026c
 800151c:	200005a0 	.word	0x200005a0

08001520 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	463b      	mov	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001548:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800154a:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <MX_TIM3_Init+0x98>)
 800154c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800155c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156e:	4814      	ldr	r0, [pc, #80]	@ (80015c0 <MX_TIM3_Init+0x94>)
 8001570:	f002 f8d7 	bl	8003722 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800157a:	f7ff fec1 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM3_Init+0x94>)
 800158c:	f002 fa12 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001596:	f7ff feb3 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM3_Init+0x94>)
 80015a8:	f002 fcc8 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015b2:	f7ff fea5 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000270 	.word	0x20000270
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <MX_TIM4_Init+0x94>)
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <MX_TIM4_Init+0x98>)
 80015e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <MX_TIM4_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_TIM4_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <MX_TIM4_Init+0x94>)
 80015f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <MX_TIM4_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <MX_TIM4_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <MX_TIM4_Init+0x94>)
 800160c:	f002 f889 	bl	8003722 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001616:	f7ff fe73 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_TIM4_Init+0x94>)
 8001628:	f002 f9c4 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001632:	f7ff fe65 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	@ (800165c <MX_TIM4_Init+0x94>)
 8001644:	f002 fc7a 	bl	8003f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800164e:	f7ff fe57 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002b0 	.word	0x200002b0
 8001660:	40000800 	.word	0x40000800

08001664 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <MX_TIM11_Init+0xb8>)
 8001686:	4a26      	ldr	r2, [pc, #152]	@ (8001720 <MX_TIM11_Init+0xbc>)
 8001688:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800168a:	4b24      	ldr	r3, [pc, #144]	@ (800171c <MX_TIM11_Init+0xb8>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <MX_TIM11_Init+0xb8>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001696:	4b21      	ldr	r3, [pc, #132]	@ (800171c <MX_TIM11_Init+0xb8>)
 8001698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016aa:	481c      	ldr	r0, [pc, #112]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016ac:	f002 f839 	bl	8003722 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM11_Init+0x56>
  {
    Error_Handler();
 80016b6:	f7ff fe23 	bl	8001300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	4815      	ldr	r0, [pc, #84]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016c8:	f002 f974 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM11_Init+0x72>
  {
    Error_Handler();
 80016d2:	f7ff fe15 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016d8:	f002 f862 	bl	80037a0 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 80016e2:	f7ff fe0d 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	@ 0x60
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	@ (800171c <MX_TIM11_Init+0xb8>)
 80016fe:	f002 f897 	bl	8003830 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM11_Init+0xa8>
  {
    Error_Handler();
 8001708:	f7ff fdfa 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800170c:	4803      	ldr	r0, [pc, #12]	@ (800171c <MX_TIM11_Init+0xb8>)
 800170e:	f000 f84f 	bl	80017b0 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002f0 	.word	0x200002f0
 8001720:	40011000 	.word	0x40011000

08001724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10c      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173a:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6253      	str	r3, [r2, #36]	@ 0x24
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800174e:	e022      	b.n	8001796 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_TIM_Base_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10c      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6253      	str	r3, [r2, #36]	@ 0x24
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
}
 8001772:	e010      	b.n	8001796 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM11)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <HAL_TIM_Base_MspInit+0x88>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10b      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_TIM_Base_MspInit+0x80>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40000800 	.word	0x40000800
 80017ac:	40011000 	.word	0x40011000

080017b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_TIM_MspPostInit+0x64>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d11c      	bne.n	800180c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_TIM_MspPostInit+0x68>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB15     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80017fc:	2303      	movs	r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <HAL_TIM_MspPostInit+0x6c>)
 8001808:	f000 fe0a 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40011000 	.word	0x40011000
 8001818:	40023800 	.word	0x40023800
 800181c:	40020400 	.word	0x40020400

08001820 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_UART5_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <MX_UART5_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800182a:	4b10      	ldr	r3, [pc, #64]	@ (800186c <MX_UART5_Init+0x4c>)
 800182c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_UART5_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_UART5_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_UART5_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_UART5_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_UART5_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_UART5_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_UART5_Init+0x4c>)
 8001858:	f002 fbce 	bl	8003ff8 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001862:	f7ff fd4d 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000330 	.word	0x20000330
 8001870:	40005000 	.word	0x40005000

08001874 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <MX_USART1_UART_Init+0x50>)
 800187c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800187e:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018ac:	f002 fba4 	bl	8003ff8 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018b6:	f7ff fd23 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000378 	.word	0x20000378
 80018c4:	40013800 	.word	0x40013800

080018c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_USART2_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_USART2_UART_Init+0x4c>)
 8001900:	f002 fb7a 	bl	8003ff8 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190a:	f7ff fcf9 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003c0 	.word	0x200003c0
 8001918:	40004400 	.word	0x40004400

0800191c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	@ (800196c <MX_USART3_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_USART3_UART_Init+0x4c>)
 8001954:	f002 fb50 	bl	8003ff8 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f7ff fccf 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000408 	.word	0x20000408
 800196c:	40004800 	.word	0x40004800

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b090      	sub	sp, #64	@ 0x40
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <HAL_UART_MspInit+0x1cc>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d145      	bne.n	8001a1e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001992:	4b6b      	ldr	r3, [pc, #428]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	4a6a      	ldr	r2, [pc, #424]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001998:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800199c:	6253      	str	r3, [r2, #36]	@ 0x24
 800199e:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a64      	ldr	r2, [pc, #400]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b62      	ldr	r3, [pc, #392]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019ec:	2308      	movs	r3, #8
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f4:	4619      	mov	r1, r3
 80019f6:	4853      	ldr	r0, [pc, #332]	@ (8001b44 <HAL_UART_MspInit+0x1d4>)
 80019f8:	f000 fd12 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fc:	2304      	movs	r3, #4
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a14:	4619      	mov	r1, r3
 8001a16:	484c      	ldr	r0, [pc, #304]	@ (8001b48 <HAL_UART_MspInit+0x1d8>)
 8001a18:	f000 fd02 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a1c:	e08a      	b.n	8001b34 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a4a      	ldr	r2, [pc, #296]	@ (8001b4c <HAL_UART_MspInit+0x1dc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d129      	bne.n	8001a7c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	4b45      	ldr	r3, [pc, #276]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a44      	ldr	r2, [pc, #272]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b3f      	ldr	r3, [pc, #252]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a3e      	ldr	r2, [pc, #248]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	61d3      	str	r3, [r2, #28]
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4836      	ldr	r0, [pc, #216]	@ (8001b50 <HAL_UART_MspInit+0x1e0>)
 8001a76:	f000 fcd3 	bl	8002420 <HAL_GPIO_Init>
}
 8001a7a:	e05b      	b.n	8001b34 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	@ (8001b54 <HAL_UART_MspInit+0x1e4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d128      	bne.n	8001ad8 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a86:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a92:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a27      	ldr	r2, [pc, #156]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ab6:	2360      	movs	r3, #96	@ 0x60
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481d      	ldr	r0, [pc, #116]	@ (8001b48 <HAL_UART_MspInit+0x1d8>)
 8001ad2:	f000 fca5 	bl	8002420 <HAL_GPIO_Init>
}
 8001ad6:	e02d      	b.n	8001b34 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <HAL_UART_MspInit+0x1e8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d128      	bne.n	8001b34 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	4a16      	ldr	r2, [pc, #88]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	6253      	str	r3, [r2, #36]	@ 0x24
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_UART_MspInit+0x1d0>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b24:	2307      	movs	r3, #7
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <HAL_UART_MspInit+0x1d8>)
 8001b30:	f000 fc76 	bl	8002420 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3740      	adds	r7, #64	@ 0x40
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40005000 	.word	0x40005000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40004400 	.word	0x40004400
 8001b58:	40004800 	.word	0x40004800

08001b5c <USART_SendCommand>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART_SendCommand(const char *command) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7fe fb09 	bl	800017c <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <USART_SendCommand+0x28>)
 8001b76:	f002 fa8f 	bl	8004098 <HAL_UART_Transmit>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003c0 	.word	0x200003c0

08001b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff fcca 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b8e:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ba4:	4c09      	ldr	r4, [pc, #36]	@ (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f002 fc9d 	bl	80044f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff f991 	bl	8000edc <main>
  bx lr
 8001bba:	4770      	bx	lr
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001bc4:	08005e50 	.word	0x08005e50
  ldr r2, =_sbss
 8001bc8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001bcc:	2000059c 	.word	0x2000059c

08001bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_IRQHandler>

08001bd2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 fbeb 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be2:	200f      	movs	r0, #15
 8001be4:	f000 f80e 	bl	8001c04 <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	e001      	b.n	8001bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf4:	f7ff fc04 	bl	8001400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_InitTick+0x68>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d022      	beq.n	8001c5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_InitTick+0x6c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <HAL_InitTick+0x68>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fbea 	bl	8002406 <HAL_SYSTICK_Config>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10f      	bne.n	8001c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	d809      	bhi.n	8001c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	f04f 30ff 	mov.w	r0, #4294967295
 8001c46:	f000 fbc2 	bl	80023ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <HAL_InitTick+0x70>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e004      	b.n	8001c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000004c 	.word	0x2000004c
 8001c70:	20000044 	.word	0x20000044
 8001c74:	20000048 	.word	0x20000048

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_IncTick+0x1c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_IncTick+0x20>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_IncTick+0x1c>)
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000450 	.word	0x20000450
 8001c98:	2000004c 	.word	0x2000004c

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	@ (8001cac <HAL_GetTick+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000450 	.word	0x20000450

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d004      	beq.n	8001cd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_Delay+0x40>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd4:	bf00      	nop
 8001cd6:	f7ff ffe1 	bl	8001c9c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d8f7      	bhi.n	8001cd6 <HAL_Delay+0x26>
  {
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000004c 	.word	0x2000004c

08001cf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	@ 0x38
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e127      	b.n	8001f64 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b8e      	ldr	r3, [pc, #568]	@ (8001f6c <HAL_ADC_Init+0x278>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a8d      	ldr	r2, [pc, #564]	@ (8001f6c <HAL_ADC_Init+0x278>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	4b8b      	ldr	r3, [pc, #556]	@ (8001f6c <HAL_ADC_Init+0x278>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fbed 	bl	8000528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 80ff 	bne.w	8001f5a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001d70:	4b7f      	ldr	r3, [pc, #508]	@ (8001f70 <HAL_ADC_Init+0x27c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	497c      	ldr	r1, [pc, #496]	@ (8001f70 <HAL_ADC_Init+0x27c>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001d8a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d92:	4619      	mov	r1, r3
 8001d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d98:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001dae:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001db4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001dd6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d007      	beq.n	8001df6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001dee:	4313      	orrs	r3, r2
 8001df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001df2:	4313      	orrs	r3, r2
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e00:	2b40      	cmp	r3, #64	@ 0x40
 8001e02:	d04f      	beq.n	8001ea4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e16:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6912      	ldr	r2, [r2, #16]
 8001e1c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001e20:	d003      	beq.n	8001e2a <HAL_ADC_Init+0x136>
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6912      	ldr	r2, [r2, #16]
 8001e26:	2a01      	cmp	r2, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_Init+0x13c>
 8001e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Init+0x13e>
 8001e30:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001e32:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e36:	4313      	orrs	r3, r2
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d125      	bne.n	8001e90 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d114      	bne.n	8001e78 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	fa92 f2a2 	rbit	r2, r2
 8001e60:	617a      	str	r2, [r7, #20]
  return result;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e72:	4313      	orrs	r3, r2
 8001e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e76:	e00b      	b.n	8001e90 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <HAL_ADC_Init+0x280>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <HAL_ADC_Init+0x284>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_Init+0x1d6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d119      	bne.n	8001efe <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 8001ede:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	60fa      	str	r2, [r7, #12]
  return result;
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001efc:	e007      	b.n	8001f0e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001f0c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_ADC_Init+0x288>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	f023 0303 	bic.w	r3, r3, #3
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f34:	e014      	b.n	8001f60 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	f023 0312 	bic.w	r3, r3, #18
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40012700 	.word	0x40012700
 8001f74:	fcfc16ff 	.word	0xfcfc16ff
 8001f78:	c0fff189 	.word	0xc0fff189
 8001f7c:	bf80fffe 	.word	0xbf80fffe

08001f80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x20>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e14f      	b.n	8002240 <HAL_ADC_ConfigChannel+0x2c0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d81c      	bhi.n	8001fea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b05      	subs	r3, #5
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe8:	e07e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d81c      	bhi.n	800202c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b23      	subs	r3, #35	@ 0x23
 8002004:	221f      	movs	r2, #31
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	4019      	ands	r1, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3b23      	subs	r3, #35	@ 0x23
 800201e:	fa00 f203 	lsl.w	r2, r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	63da      	str	r2, [r3, #60]	@ 0x3c
 800202a:	e05d      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d81c      	bhi.n	800206e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b41      	subs	r3, #65	@ 0x41
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	@ 0x41
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	639a      	str	r2, [r3, #56]	@ 0x38
 800206c:	e03c      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b18      	cmp	r3, #24
 8002074:	d81c      	bhi.n	80020b0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	3b5f      	subs	r3, #95	@ 0x5f
 8002088:	221f      	movs	r2, #31
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	4019      	ands	r1, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b5f      	subs	r3, #95	@ 0x5f
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ae:	e01b      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b7d      	subs	r3, #125	@ 0x7d
 80020c2:	221f      	movs	r2, #31
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4019      	ands	r1, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b7d      	subs	r3, #125	@ 0x7d
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d81a      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6959      	ldr	r1, [r3, #20]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	2207      	movs	r2, #7
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	4019      	ands	r1, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6898      	ldr	r0, [r3, #8]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	fa00 f203 	lsl.w	r2, r0, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	615a      	str	r2, [r3, #20]
 8002124:	e05d      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b13      	cmp	r3, #19
 800212c:	d81c      	bhi.n	8002168 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6919      	ldr	r1, [r3, #16]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	3b1e      	subs	r3, #30
 8002140:	2207      	movs	r2, #7
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	4019      	ands	r1, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6898      	ldr	r0, [r3, #8]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	3b1e      	subs	r3, #30
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	e03c      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b1d      	cmp	r3, #29
 800216e:	d81c      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b3c      	subs	r3, #60	@ 0x3c
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4019      	ands	r1, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6898      	ldr	r0, [r3, #8]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	3b3c      	subs	r3, #60	@ 0x3c
 800219c:	fa00 f203 	lsl.w	r2, r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	e01b      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	3b5a      	subs	r3, #90	@ 0x5a
 80021bc:	2207      	movs	r2, #7
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	4019      	ands	r1, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6898      	ldr	r0, [r3, #8]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	3b5a      	subs	r3, #90	@ 0x5a
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d003      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ee:	2b11      	cmp	r3, #17
 80021f0:	d121      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_ADC_ConfigChannel+0x2cc>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11b      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_ADC_ConfigChannel+0x2cc>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <HAL_ADC_ConfigChannel+0x2cc>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002208:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d111      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002212:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <HAL_ADC_ConfigChannel+0x2d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <HAL_ADC_ConfigChannel+0x2d4>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9a      	lsrs	r2, r3, #18
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40012700 	.word	0x40012700
 8002250:	20000044 	.word	0x20000044
 8002254:	431bde83 	.word	0x431bde83

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff90 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff49 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff5e 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff90 	bl	8002310 <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5f 	bl	80022bc <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffb0 	bl	8002374 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002436:	e160      	b.n	80026fa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8152 	beq.w	80026f4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002464:	2b02      	cmp	r3, #2
 8002466:	d130      	bne.n	80024ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800249e:	2201      	movs	r2, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d017      	beq.n	8002506 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2203      	movs	r2, #3
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d123      	bne.n	800255a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	6939      	ldr	r1, [r7, #16]
 8002556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0203 	and.w	r2, r3, #3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80ac 	beq.w	80026f4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259c:	4b5e      	ldr	r3, [pc, #376]	@ (8002718 <HAL_GPIO_Init+0x2f8>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_GPIO_Init+0x2f8>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <HAL_GPIO_Init+0x2f8>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80025b4:	4a59      	ldr	r2, [pc, #356]	@ (800271c <HAL_GPIO_Init+0x2fc>)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	089b      	lsrs	r3, r3, #2
 80025ba:	3302      	adds	r3, #2
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a51      	ldr	r2, [pc, #324]	@ (8002720 <HAL_GPIO_Init+0x300>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d025      	beq.n	800262c <HAL_GPIO_Init+0x20c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_GPIO_Init+0x304>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01f      	beq.n	8002628 <HAL_GPIO_Init+0x208>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <HAL_GPIO_Init+0x308>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d019      	beq.n	8002624 <HAL_GPIO_Init+0x204>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a4e      	ldr	r2, [pc, #312]	@ (800272c <HAL_GPIO_Init+0x30c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_Init+0x200>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002730 <HAL_GPIO_Init+0x310>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1fc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a4c      	ldr	r2, [pc, #304]	@ (8002734 <HAL_GPIO_Init+0x314>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1f8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <HAL_GPIO_Init+0x318>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1f4>
 8002610:	2306      	movs	r3, #6
 8002612:	e00c      	b.n	800262e <HAL_GPIO_Init+0x20e>
 8002614:	2307      	movs	r3, #7
 8002616:	e00a      	b.n	800262e <HAL_GPIO_Init+0x20e>
 8002618:	2305      	movs	r3, #5
 800261a:	e008      	b.n	800262e <HAL_GPIO_Init+0x20e>
 800261c:	2304      	movs	r3, #4
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x20e>
 8002620:	2303      	movs	r3, #3
 8002622:	e004      	b.n	800262e <HAL_GPIO_Init+0x20e>
 8002624:	2302      	movs	r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x20e>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_GPIO_Init+0x20e>
 800262c:	2300      	movs	r3, #0
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800263e:	4937      	ldr	r1, [pc, #220]	@ (800271c <HAL_GPIO_Init+0x2fc>)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264c:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_GPIO_Init+0x31c>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002670:	4a32      	ldr	r2, [pc, #200]	@ (800273c <HAL_GPIO_Init+0x31c>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002676:	4b31      	ldr	r3, [pc, #196]	@ (800273c <HAL_GPIO_Init+0x31c>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800269a:	4a28      	ldr	r2, [pc, #160]	@ (800273c <HAL_GPIO_Init+0x31c>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a0:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_GPIO_Init+0x31c>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026c4:	4a1d      	ldr	r2, [pc, #116]	@ (800273c <HAL_GPIO_Init+0x31c>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_GPIO_Init+0x31c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026ee:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_GPIO_Init+0x31c>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3301      	adds	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f ae97 	bne.w	8002438 <HAL_GPIO_Init+0x18>
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40010000 	.word	0x40010000
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40021400 	.word	0x40021400
 8002738:	40021800 	.word	0x40021800
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e001      	b.n	8002762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]
 800277a:	4613      	mov	r3, r2
 800277c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800277e:	787b      	ldrb	r3, [r7, #1]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800278a:	e003      	b.n	8002794 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	041a      	lsls	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e12b      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd ffb6 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	@ 0x24
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002804:	f000 fe7c 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a81      	ldr	r2, [pc, #516]	@ (8002a14 <HAL_I2C_Init+0x274>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d807      	bhi.n	8002824 <HAL_I2C_Init+0x84>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a80      	ldr	r2, [pc, #512]	@ (8002a18 <HAL_I2C_Init+0x278>)
 8002818:	4293      	cmp	r3, r2
 800281a:	bf94      	ite	ls
 800281c:	2301      	movls	r3, #1
 800281e:	2300      	movhi	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e006      	b.n	8002832 <HAL_I2C_Init+0x92>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a7d      	ldr	r2, [pc, #500]	@ (8002a1c <HAL_I2C_Init+0x27c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0e7      	b.n	8002a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a78      	ldr	r2, [pc, #480]	@ (8002a20 <HAL_I2C_Init+0x280>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a6a      	ldr	r2, [pc, #424]	@ (8002a14 <HAL_I2C_Init+0x274>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d802      	bhi.n	8002874 <HAL_I2C_Init+0xd4>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3301      	adds	r3, #1
 8002872:	e009      	b.n	8002888 <HAL_I2C_Init+0xe8>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	4a69      	ldr	r2, [pc, #420]	@ (8002a24 <HAL_I2C_Init+0x284>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	3301      	adds	r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800289a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	495c      	ldr	r1, [pc, #368]	@ (8002a14 <HAL_I2C_Init+0x274>)
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d819      	bhi.n	80028dc <HAL_I2C_Init+0x13c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e59      	subs	r1, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028bc:	400b      	ands	r3, r1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_I2C_Init+0x138>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e59      	subs	r1, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	e051      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028d8:	2304      	movs	r3, #4
 80028da:	e04f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <HAL_I2C_Init+0x168>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e012      	b.n	800292e <HAL_I2C_Init+0x18e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x196>
 8002932:	2301      	movs	r3, #1
 8002934:	e022      	b.n	800297c <HAL_I2C_Init+0x1dc>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10e      	bne.n	800295c <HAL_I2C_Init+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e58      	subs	r0, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800295a:	e00f      	b.n	800297c <HAL_I2C_Init+0x1dc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6911      	ldr	r1, [r2, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	000186a0 	.word	0x000186a0
 8002a18:	001e847f 	.word	0x001e847f
 8002a1c:	003d08ff 	.word	0x003d08ff
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e31d      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b94      	ldr	r3, [pc, #592]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b91      	ldr	r3, [pc, #580]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d07b      	beq.n	8002b52 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d006      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5e>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4b87      	ldr	r3, [pc, #540]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06a      	beq.n	8002b50 <HAL_RCC_OscConfig+0x128>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d166      	bne.n	8002b50 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e2f7      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7e      	ldr	r2, [pc, #504]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e02d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x96>
 8002aa4:	4b79      	ldr	r3, [pc, #484]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a78      	ldr	r2, [pc, #480]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b76      	ldr	r3, [pc, #472]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a75      	ldr	r2, [pc, #468]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0xd0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xb8>
 8002ac6:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a70      	ldr	r2, [pc, #448]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd0>
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a69      	ldr	r2, [pc, #420]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b67      	ldr	r3, [pc, #412]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a66      	ldr	r2, [pc, #408]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff f8cc 	bl	8001c9c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f8c8 	bl	8001c9c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e2ad      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff f8b8 	bl	8001c9c <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff f8b4 	bl	8001c9c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e299      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b42:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d05a      	beq.n	8002c14 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d119      	bne.n	8002b9e <HAL_RCC_OscConfig+0x176>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d116      	bne.n	8002b9e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b70:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x160>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e276      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	493d      	ldr	r1, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9c:	e03a      	b.n	8002c14 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d020      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f876 	bl	8001c9c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7ff f872 	bl	8001c9c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e257      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bc6:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	492a      	ldr	r1, [pc, #168]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be8:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7ff f855 	bl	8001c9c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f851 	bl	8001c9c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e236      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c08:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b8 	beq.w	8002d92 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d170      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c28:	4b18      	ldr	r3, [pc, #96]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x218>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e21a      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d921      	bls.n	8002c94 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fc7b 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e208      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4906      	ldr	r1, [pc, #24]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	4901      	ldr	r1, [pc, #4]	@ (8002c8c <HAL_RCC_OscConfig+0x264>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
 8002c8a:	e020      	b.n	8002cce <HAL_RCC_OscConfig+0x2a6>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c94:	4b99      	ldr	r3, [pc, #612]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4996      	ldr	r1, [pc, #600]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca6:	4b95      	ldr	r3, [pc, #596]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	4991      	ldr	r1, [pc, #580]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fc46 	bl	8003550 <RCC_SetFlashLatencyFromMSIRange>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1d3      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	0b5b      	lsrs	r3, r3, #13
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cde:	4a87      	ldr	r2, [pc, #540]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	0912      	lsrs	r2, r2, #4
 8002ce4:	f002 020f 	and.w	r2, r2, #15
 8002ce8:	4985      	ldr	r1, [pc, #532]	@ (8002f00 <HAL_RCC_OscConfig+0x4d8>)
 8002cea:	5c8a      	ldrb	r2, [r1, r2]
 8002cec:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cee:	4a85      	ldr	r2, [pc, #532]	@ (8002f04 <HAL_RCC_OscConfig+0x4dc>)
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x4e0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ff84 	bl	8001c04 <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d045      	beq.n	8002d92 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	e1b5      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d029      	beq.n	8002d66 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d12:	4b7e      	ldr	r3, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x4e4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ffc0 	bl	8001c9c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d20:	f7fe ffbc 	bl	8001c9c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1a1      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	496c      	ldr	r1, [pc, #432]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4967      	ldr	r1, [pc, #412]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d66:	4b69      	ldr	r3, [pc, #420]	@ (8002f0c <HAL_RCC_OscConfig+0x4e4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe ff96 	bl	8001c9c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d74:	f7fe ff92 	bl	8001c9c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e177      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d86:	4b5d      	ldr	r3, [pc, #372]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d030      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7fe ff76 	bl	8001c9c <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fe ff72 	bl	8001c9c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e157      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x38c>
 8002dd2:	e015      	b.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe ff5f 	bl	8001c9c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe ff5b 	bl	8001c9c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e140      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80b5 	beq.w	8002f78 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e12:	4b3a      	ldr	r3, [pc, #232]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	4a36      	ldr	r2, [pc, #216]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	6253      	str	r3, [r2, #36]	@ 0x24
 8002e2a:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	2301      	movs	r3, #1
 8002e38:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d118      	bne.n	8002e78 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e46:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e52:	f7fe ff23 	bl	8001c9c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fe ff1f 	bl	8001c9c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b64      	cmp	r3, #100	@ 0x64
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e104      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x466>
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e84:	4a1d      	ldr	r2, [pc, #116]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e8c:	e02d      	b.n	8002eea <HAL_RCC_OscConfig+0x4c2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x488>
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ea0:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ea2:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002eac:	6353      	str	r3, [r2, #52]	@ 0x34
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x4c2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4aa>
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec2:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ece:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x4c2>
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002edc:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	4a06      	ldr	r2, [pc, #24]	@ (8002efc <HAL_RCC_OscConfig+0x4d4>)
 8002ee4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ee8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fed3 	bl	8001c9c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef8:	e019      	b.n	8002f2e <HAL_RCC_OscConfig+0x506>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	08005df4 	.word	0x08005df4
 8002f04:	20000044 	.word	0x20000044
 8002f08:	20000048 	.word	0x20000048
 8002f0c:	42470020 	.word	0x42470020
 8002f10:	42470680 	.word	0x42470680
 8002f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe fec0 	bl	8001c9c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0a3      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2e:	4b54      	ldr	r3, [pc, #336]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4f0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe feae 	bl	8001c9c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe feaa 	bl	8001c9c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e08d      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f5a:	4b49      	ldr	r3, [pc, #292]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ee      	bne.n	8002f44 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b44      	ldr	r3, [pc, #272]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	4a43      	ldr	r2, [pc, #268]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f76:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d079      	beq.n	8003074 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b0c      	cmp	r3, #12
 8002f84:	d056      	beq.n	8003034 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d13b      	bne.n	8003006 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <HAL_RCC_OscConfig+0x65c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fe82 	bl	8001c9c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fe7e 	bl	8001c9c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e063      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fae:	4b34      	ldr	r3, [pc, #208]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fba:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	4319      	orrs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	492b      	ldr	r1, [pc, #172]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <HAL_RCC_OscConfig+0x65c>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fe5d 	bl	8001c9c <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fe59 	bl	8001c9c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03e      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff8:	4b21      	ldr	r3, [pc, #132]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x5be>
 8003004:	e036      	b.n	8003074 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <HAL_RCC_OscConfig+0x65c>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300c:	f7fe fe46 	bl	8001c9c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fe42 	bl	8001c9c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e027      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003026:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x5ec>
 8003032:	e01f      	b.n	8003074 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e01a      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <HAL_RCC_OscConfig+0x658>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	429a      	cmp	r2, r3
 8003052:	d10d      	bne.n	8003070 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	42470060 	.word	0x42470060

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e11a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b8f      	ldr	r3, [pc, #572]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d919      	bls.n	80030de <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d105      	bne.n	80030bc <HAL_RCC_ClockConfig+0x34>
 80030b0:	4b8a      	ldr	r3, [pc, #552]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a89      	ldr	r2, [pc, #548]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b87      	ldr	r3, [pc, #540]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 0201 	bic.w	r2, r3, #1
 80030c4:	4985      	ldr	r1, [pc, #532]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	4b83      	ldr	r3, [pc, #524]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0f9      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ea:	4b7d      	ldr	r3, [pc, #500]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	497a      	ldr	r1, [pc, #488]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808e 	beq.w	8003226 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003112:	4b73      	ldr	r3, [pc, #460]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d121      	bne.n	8003162 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0d7      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312a:	4b6d      	ldr	r3, [pc, #436]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0cb      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003142:	4b67      	ldr	r3, [pc, #412]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0bf      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003152:	4b63      	ldr	r3, [pc, #396]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0b7      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b5f      	ldr	r3, [pc, #380]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	495c      	ldr	r1, [pc, #368]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fd92 	bl	8001c9c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d112      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fd8a 	bl	8001c9c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e09b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800319a:	4b51      	ldr	r3, [pc, #324]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_ClockConfig+0xfc>
 80031a6:	e03e      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d112      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b2:	f7fe fd73 	bl	8001c9c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e084      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c8:	4b45      	ldr	r3, [pc, #276]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x12a>
 80031d4:	e027      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d11d      	bne.n	800321a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e0:	f7fe fd5c 	bl	8001c9c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e06d      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f6:	4b3a      	ldr	r3, [pc, #232]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x158>
 8003202:	e010      	b.n	8003226 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fe fd4a 	bl	8001c9c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e05b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800321a:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ee      	bne.n	8003204 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003226:	4b2d      	ldr	r3, [pc, #180]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d219      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d105      	bne.n	8003246 <HAL_RCC_ClockConfig+0x1be>
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	4923      	ldr	r1, [pc, #140]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b21      	ldr	r3, [pc, #132]	@ (80032dc <HAL_RCC_ClockConfig+0x254>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e034      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4917      	ldr	r1, [pc, #92]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	490f      	ldr	r1, [pc, #60]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a6:	f000 f823 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4b0c      	ldr	r3, [pc, #48]	@ (80032e0 <HAL_RCC_ClockConfig+0x258>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	490b      	ldr	r1, [pc, #44]	@ (80032e4 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_RCC_ClockConfig+0x264>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc9c 	bl	8001c04 <HAL_InitTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08005df4 	.word	0x08005df4
 80032e8:	20000044 	.word	0x20000044
 80032ec:	20000048 	.word	0x20000048

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b092      	sub	sp, #72	@ 0x48
 80032f6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80032f8:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d00d      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
 8003308:	2b0c      	cmp	r3, #12
 800330a:	f200 80d5 	bhi.w	80034b8 <HAL_RCC_GetSysClockFreq+0x1c8>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d002      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x28>
 8003312:	2b08      	cmp	r3, #8
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x2e>
 8003316:	e0cf      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800331c:	e0da      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800331e:	4b71      	ldr	r3, [pc, #452]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003320:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003322:	e0d7      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003326:	0c9b      	lsrs	r3, r3, #18
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4b6e      	ldr	r3, [pc, #440]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800332e:	5c9b      	ldrb	r3, [r3, r2]
 8003330:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003334:	0d9b      	lsrs	r3, r3, #22
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	3301      	adds	r3, #1
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333e:	4b68      	ldr	r3, [pc, #416]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d05d      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334c:	2200      	movs	r2, #0
 800334e:	4618      	mov	r0, r3
 8003350:	4611      	mov	r1, r2
 8003352:	4604      	mov	r4, r0
 8003354:	460d      	mov	r5, r1
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4621      	mov	r1, r4
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	6139      	str	r1, [r7, #16]
 8003374:	4629      	mov	r1, r5
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003388:	4659      	mov	r1, fp
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4651      	mov	r1, sl
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4651      	mov	r1, sl
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	46d4      	mov	ip, sl
 8003398:	ebb2 080c 	subs.w	r8, r2, ip
 800339c:	4659      	mov	r1, fp
 800339e:	eb63 0901 	sbc.w	r9, r3, r1
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b6:	4690      	mov	r8, r2
 80033b8:	4699      	mov	r9, r3
 80033ba:	4623      	mov	r3, r4
 80033bc:	eb18 0303 	adds.w	r3, r8, r3
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	462b      	mov	r3, r5
 80033c4:	eb49 0303 	adc.w	r3, r9, r3
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033d6:	4629      	mov	r1, r5
 80033d8:	028b      	lsls	r3, r1, #10
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	4604      	mov	r4, r0
 80033e0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80033e4:	4601      	mov	r1, r0
 80033e6:	028a      	lsls	r2, r1, #10
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	2200      	movs	r2, #0
 80033f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f8:	f7fc fec8 	bl	800018c <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	647b      	str	r3, [r7, #68]	@ 0x44
 8003404:	e055      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	2200      	movs	r2, #0
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	627a      	str	r2, [r7, #36]	@ 0x24
 800340e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003412:	4642      	mov	r2, r8
 8003414:	464b      	mov	r3, r9
 8003416:	f04f 0000 	mov.w	r0, #0
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	0159      	lsls	r1, r3, #5
 8003420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003424:	0150      	lsls	r0, r2, #5
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	46c4      	mov	ip, r8
 800342c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003430:	4640      	mov	r0, r8
 8003432:	4649      	mov	r1, r9
 8003434:	468c      	mov	ip, r1
 8003436:	eb63 0b0c 	sbc.w	fp, r3, ip
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003446:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800344a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800344e:	ebb2 040a 	subs.w	r4, r2, sl
 8003452:	eb63 050b 	sbc.w	r5, r3, fp
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	00eb      	lsls	r3, r5, #3
 8003460:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003464:	00e2      	lsls	r2, r4, #3
 8003466:	4614      	mov	r4, r2
 8003468:	461d      	mov	r5, r3
 800346a:	4603      	mov	r3, r0
 800346c:	18e3      	adds	r3, r4, r3
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	460b      	mov	r3, r1
 8003472:	eb45 0303 	adc.w	r3, r5, r3
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003484:	4629      	mov	r1, r5
 8003486:	028b      	lsls	r3, r1, #10
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	4604      	mov	r4, r0
 800348e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003492:	4601      	mov	r1, r0
 8003494:	028a      	lsls	r2, r1, #10
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349c:	2200      	movs	r2, #0
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	61fa      	str	r2, [r7, #28]
 80034a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a6:	f7fc fe71 	bl	800018c <__aeabi_uldivmod>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4613      	mov	r3, r2
 80034b0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80034b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80034b6:	e00d      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0b5b      	lsrs	r3, r3, #13
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	3301      	adds	r3, #1
 80034c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80034d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3748      	adds	r7, #72	@ 0x48
 80034da:	46bd      	mov	sp, r7
 80034dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	08005de8 	.word	0x08005de8

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b02      	ldr	r3, [pc, #8]	@ (80034fc <HAL_RCC_GetHCLKFreq+0x10>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000044 	.word	0x20000044

08003500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003504:	f7ff fff2 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	08005e04 	.word	0x08005e04

08003528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800352c:	f7ff ffde 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0adb      	lsrs	r3, r3, #11
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08005e04 	.word	0x08005e04

08003550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003558:	2300      	movs	r3, #0
 800355a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800355c:	4b29      	ldr	r3, [pc, #164]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d12c      	bne.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003568:	4b26      	ldr	r3, [pc, #152]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e016      	b.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800358a:	6253      	str	r3, [r2, #36]	@ 0x24
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80035a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035ac:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80035b4:	d105      	bne.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035bc:	d101      	bne.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80035be:	2301      	movs	r3, #1
 80035c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80035c8:	4b10      	ldr	r3, [pc, #64]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 0201 	bic.w	r2, r3, #1
 80035dc:	490b      	ldr	r1, [pc, #44]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035e4:	4b09      	ldr	r3, [pc, #36]	@ (800360c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	40023c00 	.word	0x40023c00

08003610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07b      	b.n	800371a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003632:	d009      	beq.n	8003648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]
 800363a:	e005      	b.n	8003648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fe88 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	ea42 0103 	orr.w	r1, r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0104 	and.w	r1, r3, #4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	f003 0210 	and.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e031      	b.n	8003798 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fd ffeb 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f000 f9ef 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e031      	b.n	8003816 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f829 	bl	800381e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 f9b0 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384a:	2302      	movs	r3, #2
 800384c:	e0ae      	b.n	80039ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f200 809f 	bhi.w	800399c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800385e:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003899 	.word	0x08003899
 8003868:	0800399d 	.word	0x0800399d
 800386c:	0800399d 	.word	0x0800399d
 8003870:	0800399d 	.word	0x0800399d
 8003874:	080038d9 	.word	0x080038d9
 8003878:	0800399d 	.word	0x0800399d
 800387c:	0800399d 	.word	0x0800399d
 8003880:	0800399d 	.word	0x0800399d
 8003884:	0800391b 	.word	0x0800391b
 8003888:	0800399d 	.word	0x0800399d
 800388c:	0800399d 	.word	0x0800399d
 8003890:	0800399d 	.word	0x0800399d
 8003894:	0800395b 	.word	0x0800395b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f9c0 	bl	8003c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0208 	orr.w	r2, r2, #8
 80038b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0204 	bic.w	r2, r2, #4
 80038c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	619a      	str	r2, [r3, #24]
      break;
 80038d6:	e064      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f9dc 	bl	8003c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	021a      	lsls	r2, r3, #8
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	619a      	str	r2, [r3, #24]
      break;
 8003918:	e043      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f9f9 	bl	8003d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69da      	ldr	r2, [r3, #28]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f042 0208 	orr.w	r2, r2, #8
 8003934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0204 	bic.w	r2, r2, #4
 8003944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	61da      	str	r2, [r3, #28]
      break;
 8003958:	e023      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fa16 	bl	8003d92 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	021a      	lsls	r2, r3, #8
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	61da      	str	r2, [r3, #28]
      break;
 800399a:	e002      	b.n	80039a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIM_ConfigClockSource+0x1c>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b4      	b.n	8003b3a <HAL_TIM_ConfigClockSource+0x186>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a08:	d03e      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0xd4>
 8003a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0e:	f200 8087 	bhi.w	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a16:	f000 8086 	beq.w	8003b26 <HAL_TIM_ConfigClockSource+0x172>
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1e:	d87f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d01a      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0xa6>
 8003a24:	2b70      	cmp	r3, #112	@ 0x70
 8003a26:	d87b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d050      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x11a>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d877      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d03c      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0xfa>
 8003a34:	2b50      	cmp	r3, #80	@ 0x50
 8003a36:	d873      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d058      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x13a>
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d86f      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d064      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a44:	2b30      	cmp	r3, #48	@ 0x30
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d867      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d05c      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d05a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	e062      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	f000 fa47 	bl	8003efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	609a      	str	r2, [r3, #8]
      break;
 8003a86:	e04f      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	f000 fa30 	bl	8003efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 f9a7 	bl	8003e0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	@ 0x50
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9fe 	bl	8003ec8 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	461a      	mov	r2, r3
 8003adc:	f000 f9c5 	bl	8003e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	@ 0x60
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f9ee 	bl	8003ec8 <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	461a      	mov	r2, r3
 8003afc:	f000 f987 	bl	8003e0e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	@ 0x40
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9de 	bl	8003ec8 <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00c      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 f9d5 	bl	8003ec8 <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e000      	b.n	8003b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d00f      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <TIM_Base_SetConfig+0xc8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00b      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2a      	ldr	r2, [pc, #168]	@ (8003c10 <TIM_Base_SetConfig+0xcc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d007      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a29      	ldr	r2, [pc, #164]	@ (8003c14 <TIM_Base_SetConfig+0xd0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0x38>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a28      	ldr	r2, [pc, #160]	@ (8003c18 <TIM_Base_SetConfig+0xd4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d108      	bne.n	8003b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b94:	d017      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	@ (8003c0c <TIM_Base_SetConfig+0xc8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <TIM_Base_SetConfig+0xcc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00f      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c14 <TIM_Base_SetConfig+0xd0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	@ (8003c18 <TIM_Base_SetConfig+0xd4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <TIM_Base_SetConfig+0xd8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_Base_SetConfig+0x82>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM_Base_SetConfig+0xdc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40010800 	.word	0x40010800
 8003c1c:	40010c00 	.word	0x40010c00
 8003c20:	40011000 	.word	0x40011000

08003c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 0201 	bic.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f023 0302 	bic.w	r3, r3, #2
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 0210 	bic.w	r2, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0320 	bic.w	r3, r3, #32
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b087      	sub	sp, #28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	031b      	lsls	r3, r3, #12
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 0201 	bic.w	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 030a 	bic.w	r3, r3, #10
 8003e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 0210 	bic.w	r2, r3, #16
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f043 0307 	orr.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	609a      	str	r2, [r3, #8]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e046      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a10      	ldr	r2, [pc, #64]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40010800 	.word	0x40010800

08003ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e042      	b.n	8004090 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fca6 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	@ 0x24
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800403a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f91d 	bl	800427c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	@ 0x28
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d16d      	bne.n	8004194 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Transmit+0x2c>
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e066      	b.n	8004196 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2221      	movs	r2, #33	@ 0x21
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fde1 	bl	8001c9c <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f0:	d108      	bne.n	8004104 <HAL_UART_Transmit+0x6c>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e003      	b.n	800410c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800410c:	e02a      	b.n	8004164 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	2180      	movs	r1, #128	@ 0x80
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f840 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e036      	b.n	8004196 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e007      	b.n	8004156 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cf      	bne.n	800410e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f810 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b090      	sub	sp, #64	@ 0x40
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	e050      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d04c      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x30>
 80041be:	f7fd fd6d 	bl	8001c9c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d241      	bcs.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80041f0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	613b      	str	r3, [r7, #16]
   return(result);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	63bb      	str	r3, [r7, #56]	@ 0x38
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004222:	623a      	str	r2, [r7, #32]
 8004224:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d09f      	beq.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3740      	adds	r7, #64	@ 0x40
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80042bc:	f023 030c 	bic.w	r3, r3, #12
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	430b      	orrs	r3, r1
 80042c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a55      	ldr	r2, [pc, #340]	@ (800443c <UART_SetConfig+0x1c0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d103      	bne.n	80042f2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042ea:	f7ff f91d 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	e002      	b.n	80042f8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f2:	f7ff f905 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 80042f6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004300:	d14c      	bne.n	800439c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	4a49      	ldr	r2, [pc, #292]	@ (8004440 <UART_SetConfig+0x1c4>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	0119      	lsls	r1, r3, #4
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009a      	lsls	r2, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fbb2 f2f3 	udiv	r2, r2, r3
 8004338:	4b41      	ldr	r3, [pc, #260]	@ (8004440 <UART_SetConfig+0x1c4>)
 800433a:	fba3 0302 	umull	r0, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2064      	movs	r0, #100	@ 0x64
 8004342:	fb00 f303 	mul.w	r3, r0, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	3332      	adds	r3, #50	@ 0x32
 800434c:	4a3c      	ldr	r2, [pc, #240]	@ (8004440 <UART_SetConfig+0x1c4>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800435a:	4419      	add	r1, r3
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	009a      	lsls	r2, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004372:	4b33      	ldr	r3, [pc, #204]	@ (8004440 <UART_SetConfig+0x1c4>)
 8004374:	fba3 0302 	umull	r0, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2064      	movs	r0, #100	@ 0x64
 800437c:	fb00 f303 	mul.w	r3, r0, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	3332      	adds	r3, #50	@ 0x32
 8004386:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <UART_SetConfig+0x1c4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	440a      	add	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800439a:	e04a      	b.n	8004432 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009a      	lsls	r2, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	4a23      	ldr	r2, [pc, #140]	@ (8004440 <UART_SetConfig+0x1c4>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	0119      	lsls	r1, r3, #4
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009a      	lsls	r2, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <UART_SetConfig+0x1c4>)
 80043d4:	fba3 0302 	umull	r0, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2064      	movs	r0, #100	@ 0x64
 80043dc:	fb00 f303 	mul.w	r3, r0, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	@ 0x32
 80043e6:	4a16      	ldr	r2, [pc, #88]	@ (8004440 <UART_SetConfig+0x1c4>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f2:	4419      	add	r1, r3
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009a      	lsls	r2, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	fbb2 f2f3 	udiv	r2, r2, r3
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <UART_SetConfig+0x1c4>)
 800440c:	fba3 0302 	umull	r0, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2064      	movs	r0, #100	@ 0x64
 8004414:	fb00 f303 	mul.w	r3, r0, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	3332      	adds	r3, #50	@ 0x32
 800441e:	4a08      	ldr	r2, [pc, #32]	@ (8004440 <UART_SetConfig+0x1c4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	440a      	add	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40013800 	.word	0x40013800
 8004440:	51eb851f 	.word	0x51eb851f

08004444 <sniprintf>:
 8004444:	b40c      	push	{r2, r3}
 8004446:	b530      	push	{r4, r5, lr}
 8004448:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <sniprintf+0x64>)
 800444a:	1e0c      	subs	r4, r1, #0
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	b09d      	sub	sp, #116	@ 0x74
 8004450:	da08      	bge.n	8004464 <sniprintf+0x20>
 8004452:	238b      	movs	r3, #139	@ 0x8b
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	b01d      	add	sp, #116	@ 0x74
 800445c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004460:	b002      	add	sp, #8
 8004462:	4770      	bx	lr
 8004464:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004468:	f8ad 3014 	strh.w	r3, [sp, #20]
 800446c:	bf0c      	ite	eq
 800446e:	4623      	moveq	r3, r4
 8004470:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800447c:	9002      	str	r0, [sp, #8]
 800447e:	9006      	str	r0, [sp, #24]
 8004480:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004484:	4628      	mov	r0, r5
 8004486:	ab21      	add	r3, sp, #132	@ 0x84
 8004488:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800448a:	a902      	add	r1, sp, #8
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	f000 f9a7 	bl	80047e0 <_svfiprintf_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	bfbc      	itt	lt
 8004496:	238b      	movlt	r3, #139	@ 0x8b
 8004498:	602b      	strlt	r3, [r5, #0]
 800449a:	2c00      	cmp	r4, #0
 800449c:	d0dd      	beq.n	800445a <sniprintf+0x16>
 800449e:	2200      	movs	r2, #0
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	e7d9      	b.n	800445a <sniprintf+0x16>
 80044a6:	bf00      	nop
 80044a8:	20000050 	.word	0x20000050

080044ac <memset>:
 80044ac:	4603      	mov	r3, r0
 80044ae:	4402      	add	r2, r0
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d100      	bne.n	80044b6 <memset+0xa>
 80044b4:	4770      	bx	lr
 80044b6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ba:	e7f9      	b.n	80044b0 <memset+0x4>

080044bc <strncat>:
 80044bc:	b530      	push	{r4, r5, lr}
 80044be:	4604      	mov	r4, r0
 80044c0:	7825      	ldrb	r5, [r4, #0]
 80044c2:	4623      	mov	r3, r4
 80044c4:	3401      	adds	r4, #1
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d1fa      	bne.n	80044c0 <strncat+0x4>
 80044ca:	3a01      	subs	r2, #1
 80044cc:	d304      	bcc.n	80044d8 <strncat+0x1c>
 80044ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044d2:	f803 4b01 	strb.w	r4, [r3], #1
 80044d6:	b904      	cbnz	r4, 80044da <strncat+0x1e>
 80044d8:	bd30      	pop	{r4, r5, pc}
 80044da:	2a00      	cmp	r2, #0
 80044dc:	d1f5      	bne.n	80044ca <strncat+0xe>
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	e7f3      	b.n	80044ca <strncat+0xe>
	...

080044e4 <__errno>:
 80044e4:	4b01      	ldr	r3, [pc, #4]	@ (80044ec <__errno+0x8>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000050 	.word	0x20000050

080044f0 <__libc_init_array>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	2600      	movs	r6, #0
 80044f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004528 <__libc_init_array+0x38>)
 80044f6:	4c0d      	ldr	r4, [pc, #52]	@ (800452c <__libc_init_array+0x3c>)
 80044f8:	1b64      	subs	r4, r4, r5
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	42a6      	cmp	r6, r4
 80044fe:	d109      	bne.n	8004514 <__libc_init_array+0x24>
 8004500:	f000 fc78 	bl	8004df4 <_init>
 8004504:	2600      	movs	r6, #0
 8004506:	4d0a      	ldr	r5, [pc, #40]	@ (8004530 <__libc_init_array+0x40>)
 8004508:	4c0a      	ldr	r4, [pc, #40]	@ (8004534 <__libc_init_array+0x44>)
 800450a:	1b64      	subs	r4, r4, r5
 800450c:	10a4      	asrs	r4, r4, #2
 800450e:	42a6      	cmp	r6, r4
 8004510:	d105      	bne.n	800451e <__libc_init_array+0x2e>
 8004512:	bd70      	pop	{r4, r5, r6, pc}
 8004514:	f855 3b04 	ldr.w	r3, [r5], #4
 8004518:	4798      	blx	r3
 800451a:	3601      	adds	r6, #1
 800451c:	e7ee      	b.n	80044fc <__libc_init_array+0xc>
 800451e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004522:	4798      	blx	r3
 8004524:	3601      	adds	r6, #1
 8004526:	e7f2      	b.n	800450e <__libc_init_array+0x1e>
 8004528:	08005e48 	.word	0x08005e48
 800452c:	08005e48 	.word	0x08005e48
 8004530:	08005e48 	.word	0x08005e48
 8004534:	08005e4c 	.word	0x08005e4c

08004538 <__retarget_lock_acquire_recursive>:
 8004538:	4770      	bx	lr

0800453a <__retarget_lock_release_recursive>:
 800453a:	4770      	bx	lr

0800453c <_free_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4605      	mov	r5, r0
 8004540:	2900      	cmp	r1, #0
 8004542:	d040      	beq.n	80045c6 <_free_r+0x8a>
 8004544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004548:	1f0c      	subs	r4, r1, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	bfb8      	it	lt
 800454e:	18e4      	addlt	r4, r4, r3
 8004550:	f000 f8de 	bl	8004710 <__malloc_lock>
 8004554:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <_free_r+0x8c>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	b933      	cbnz	r3, 8004568 <_free_r+0x2c>
 800455a:	6063      	str	r3, [r4, #4]
 800455c:	6014      	str	r4, [r2, #0]
 800455e:	4628      	mov	r0, r5
 8004560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004564:	f000 b8da 	b.w	800471c <__malloc_unlock>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d908      	bls.n	800457e <_free_r+0x42>
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	1821      	adds	r1, r4, r0
 8004570:	428b      	cmp	r3, r1
 8004572:	bf01      	itttt	eq
 8004574:	6819      	ldreq	r1, [r3, #0]
 8004576:	685b      	ldreq	r3, [r3, #4]
 8004578:	1809      	addeq	r1, r1, r0
 800457a:	6021      	streq	r1, [r4, #0]
 800457c:	e7ed      	b.n	800455a <_free_r+0x1e>
 800457e:	461a      	mov	r2, r3
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	b10b      	cbz	r3, 8004588 <_free_r+0x4c>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d9fa      	bls.n	800457e <_free_r+0x42>
 8004588:	6811      	ldr	r1, [r2, #0]
 800458a:	1850      	adds	r0, r2, r1
 800458c:	42a0      	cmp	r0, r4
 800458e:	d10b      	bne.n	80045a8 <_free_r+0x6c>
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	4401      	add	r1, r0
 8004594:	1850      	adds	r0, r2, r1
 8004596:	4283      	cmp	r3, r0
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	d1e0      	bne.n	800455e <_free_r+0x22>
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4408      	add	r0, r1
 80045a2:	6010      	str	r0, [r2, #0]
 80045a4:	6053      	str	r3, [r2, #4]
 80045a6:	e7da      	b.n	800455e <_free_r+0x22>
 80045a8:	d902      	bls.n	80045b0 <_free_r+0x74>
 80045aa:	230c      	movs	r3, #12
 80045ac:	602b      	str	r3, [r5, #0]
 80045ae:	e7d6      	b.n	800455e <_free_r+0x22>
 80045b0:	6820      	ldr	r0, [r4, #0]
 80045b2:	1821      	adds	r1, r4, r0
 80045b4:	428b      	cmp	r3, r1
 80045b6:	bf01      	itttt	eq
 80045b8:	6819      	ldreq	r1, [r3, #0]
 80045ba:	685b      	ldreq	r3, [r3, #4]
 80045bc:	1809      	addeq	r1, r1, r0
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6063      	str	r3, [r4, #4]
 80045c2:	6054      	str	r4, [r2, #4]
 80045c4:	e7cb      	b.n	800455e <_free_r+0x22>
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	20000598 	.word	0x20000598

080045cc <sbrk_aligned>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4e0f      	ldr	r6, [pc, #60]	@ (800460c <sbrk_aligned+0x40>)
 80045d0:	460c      	mov	r4, r1
 80045d2:	6831      	ldr	r1, [r6, #0]
 80045d4:	4605      	mov	r5, r0
 80045d6:	b911      	cbnz	r1, 80045de <sbrk_aligned+0x12>
 80045d8:	f000 fbaa 	bl	8004d30 <_sbrk_r>
 80045dc:	6030      	str	r0, [r6, #0]
 80045de:	4621      	mov	r1, r4
 80045e0:	4628      	mov	r0, r5
 80045e2:	f000 fba5 	bl	8004d30 <_sbrk_r>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d103      	bne.n	80045f2 <sbrk_aligned+0x26>
 80045ea:	f04f 34ff 	mov.w	r4, #4294967295
 80045ee:	4620      	mov	r0, r4
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	1cc4      	adds	r4, r0, #3
 80045f4:	f024 0403 	bic.w	r4, r4, #3
 80045f8:	42a0      	cmp	r0, r4
 80045fa:	d0f8      	beq.n	80045ee <sbrk_aligned+0x22>
 80045fc:	1a21      	subs	r1, r4, r0
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 fb96 	bl	8004d30 <_sbrk_r>
 8004604:	3001      	adds	r0, #1
 8004606:	d1f2      	bne.n	80045ee <sbrk_aligned+0x22>
 8004608:	e7ef      	b.n	80045ea <sbrk_aligned+0x1e>
 800460a:	bf00      	nop
 800460c:	20000594 	.word	0x20000594

08004610 <_malloc_r>:
 8004610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004614:	1ccd      	adds	r5, r1, #3
 8004616:	f025 0503 	bic.w	r5, r5, #3
 800461a:	3508      	adds	r5, #8
 800461c:	2d0c      	cmp	r5, #12
 800461e:	bf38      	it	cc
 8004620:	250c      	movcc	r5, #12
 8004622:	2d00      	cmp	r5, #0
 8004624:	4606      	mov	r6, r0
 8004626:	db01      	blt.n	800462c <_malloc_r+0x1c>
 8004628:	42a9      	cmp	r1, r5
 800462a:	d904      	bls.n	8004636 <_malloc_r+0x26>
 800462c:	230c      	movs	r3, #12
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800470c <_malloc_r+0xfc>
 800463a:	f000 f869 	bl	8004710 <__malloc_lock>
 800463e:	f8d8 3000 	ldr.w	r3, [r8]
 8004642:	461c      	mov	r4, r3
 8004644:	bb44      	cbnz	r4, 8004698 <_malloc_r+0x88>
 8004646:	4629      	mov	r1, r5
 8004648:	4630      	mov	r0, r6
 800464a:	f7ff ffbf 	bl	80045cc <sbrk_aligned>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	4604      	mov	r4, r0
 8004652:	d158      	bne.n	8004706 <_malloc_r+0xf6>
 8004654:	f8d8 4000 	ldr.w	r4, [r8]
 8004658:	4627      	mov	r7, r4
 800465a:	2f00      	cmp	r7, #0
 800465c:	d143      	bne.n	80046e6 <_malloc_r+0xd6>
 800465e:	2c00      	cmp	r4, #0
 8004660:	d04b      	beq.n	80046fa <_malloc_r+0xea>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	4639      	mov	r1, r7
 8004666:	4630      	mov	r0, r6
 8004668:	eb04 0903 	add.w	r9, r4, r3
 800466c:	f000 fb60 	bl	8004d30 <_sbrk_r>
 8004670:	4581      	cmp	r9, r0
 8004672:	d142      	bne.n	80046fa <_malloc_r+0xea>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	4630      	mov	r0, r6
 8004678:	1a6d      	subs	r5, r5, r1
 800467a:	4629      	mov	r1, r5
 800467c:	f7ff ffa6 	bl	80045cc <sbrk_aligned>
 8004680:	3001      	adds	r0, #1
 8004682:	d03a      	beq.n	80046fa <_malloc_r+0xea>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	442b      	add	r3, r5
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	f8d8 3000 	ldr.w	r3, [r8]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	bb62      	cbnz	r2, 80046ec <_malloc_r+0xdc>
 8004692:	f8c8 7000 	str.w	r7, [r8]
 8004696:	e00f      	b.n	80046b8 <_malloc_r+0xa8>
 8004698:	6822      	ldr	r2, [r4, #0]
 800469a:	1b52      	subs	r2, r2, r5
 800469c:	d420      	bmi.n	80046e0 <_malloc_r+0xd0>
 800469e:	2a0b      	cmp	r2, #11
 80046a0:	d917      	bls.n	80046d2 <_malloc_r+0xc2>
 80046a2:	1961      	adds	r1, r4, r5
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	bf18      	it	ne
 80046aa:	6059      	strne	r1, [r3, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	bf08      	it	eq
 80046b0:	f8c8 1000 	streq.w	r1, [r8]
 80046b4:	5162      	str	r2, [r4, r5]
 80046b6:	604b      	str	r3, [r1, #4]
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f82f 	bl	800471c <__malloc_unlock>
 80046be:	f104 000b 	add.w	r0, r4, #11
 80046c2:	1d23      	adds	r3, r4, #4
 80046c4:	f020 0007 	bic.w	r0, r0, #7
 80046c8:	1ac2      	subs	r2, r0, r3
 80046ca:	bf1c      	itt	ne
 80046cc:	1a1b      	subne	r3, r3, r0
 80046ce:	50a3      	strne	r3, [r4, r2]
 80046d0:	e7af      	b.n	8004632 <_malloc_r+0x22>
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	bf0c      	ite	eq
 80046d8:	f8c8 2000 	streq.w	r2, [r8]
 80046dc:	605a      	strne	r2, [r3, #4]
 80046de:	e7eb      	b.n	80046b8 <_malloc_r+0xa8>
 80046e0:	4623      	mov	r3, r4
 80046e2:	6864      	ldr	r4, [r4, #4]
 80046e4:	e7ae      	b.n	8004644 <_malloc_r+0x34>
 80046e6:	463c      	mov	r4, r7
 80046e8:	687f      	ldr	r7, [r7, #4]
 80046ea:	e7b6      	b.n	800465a <_malloc_r+0x4a>
 80046ec:	461a      	mov	r2, r3
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	42a3      	cmp	r3, r4
 80046f2:	d1fb      	bne.n	80046ec <_malloc_r+0xdc>
 80046f4:	2300      	movs	r3, #0
 80046f6:	6053      	str	r3, [r2, #4]
 80046f8:	e7de      	b.n	80046b8 <_malloc_r+0xa8>
 80046fa:	230c      	movs	r3, #12
 80046fc:	4630      	mov	r0, r6
 80046fe:	6033      	str	r3, [r6, #0]
 8004700:	f000 f80c 	bl	800471c <__malloc_unlock>
 8004704:	e794      	b.n	8004630 <_malloc_r+0x20>
 8004706:	6005      	str	r5, [r0, #0]
 8004708:	e7d6      	b.n	80046b8 <_malloc_r+0xa8>
 800470a:	bf00      	nop
 800470c:	20000598 	.word	0x20000598

08004710 <__malloc_lock>:
 8004710:	4801      	ldr	r0, [pc, #4]	@ (8004718 <__malloc_lock+0x8>)
 8004712:	f7ff bf11 	b.w	8004538 <__retarget_lock_acquire_recursive>
 8004716:	bf00      	nop
 8004718:	20000590 	.word	0x20000590

0800471c <__malloc_unlock>:
 800471c:	4801      	ldr	r0, [pc, #4]	@ (8004724 <__malloc_unlock+0x8>)
 800471e:	f7ff bf0c 	b.w	800453a <__retarget_lock_release_recursive>
 8004722:	bf00      	nop
 8004724:	20000590 	.word	0x20000590

08004728 <__ssputs_r>:
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	461f      	mov	r7, r3
 800472e:	688e      	ldr	r6, [r1, #8]
 8004730:	4682      	mov	sl, r0
 8004732:	42be      	cmp	r6, r7
 8004734:	460c      	mov	r4, r1
 8004736:	4690      	mov	r8, r2
 8004738:	680b      	ldr	r3, [r1, #0]
 800473a:	d82d      	bhi.n	8004798 <__ssputs_r+0x70>
 800473c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004740:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004744:	d026      	beq.n	8004794 <__ssputs_r+0x6c>
 8004746:	6965      	ldr	r5, [r4, #20]
 8004748:	6909      	ldr	r1, [r1, #16]
 800474a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800474e:	eba3 0901 	sub.w	r9, r3, r1
 8004752:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004756:	1c7b      	adds	r3, r7, #1
 8004758:	444b      	add	r3, r9
 800475a:	106d      	asrs	r5, r5, #1
 800475c:	429d      	cmp	r5, r3
 800475e:	bf38      	it	cc
 8004760:	461d      	movcc	r5, r3
 8004762:	0553      	lsls	r3, r2, #21
 8004764:	d527      	bpl.n	80047b6 <__ssputs_r+0x8e>
 8004766:	4629      	mov	r1, r5
 8004768:	f7ff ff52 	bl	8004610 <_malloc_r>
 800476c:	4606      	mov	r6, r0
 800476e:	b360      	cbz	r0, 80047ca <__ssputs_r+0xa2>
 8004770:	464a      	mov	r2, r9
 8004772:	6921      	ldr	r1, [r4, #16]
 8004774:	f000 fafa 	bl	8004d6c <memcpy>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800477e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	6126      	str	r6, [r4, #16]
 8004786:	444e      	add	r6, r9
 8004788:	6026      	str	r6, [r4, #0]
 800478a:	463e      	mov	r6, r7
 800478c:	6165      	str	r5, [r4, #20]
 800478e:	eba5 0509 	sub.w	r5, r5, r9
 8004792:	60a5      	str	r5, [r4, #8]
 8004794:	42be      	cmp	r6, r7
 8004796:	d900      	bls.n	800479a <__ssputs_r+0x72>
 8004798:	463e      	mov	r6, r7
 800479a:	4632      	mov	r2, r6
 800479c:	4641      	mov	r1, r8
 800479e:	6820      	ldr	r0, [r4, #0]
 80047a0:	f000 faac 	bl	8004cfc <memmove>
 80047a4:	2000      	movs	r0, #0
 80047a6:	68a3      	ldr	r3, [r4, #8]
 80047a8:	1b9b      	subs	r3, r3, r6
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	4433      	add	r3, r6
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b6:	462a      	mov	r2, r5
 80047b8:	f000 fae6 	bl	8004d88 <_realloc_r>
 80047bc:	4606      	mov	r6, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d1e0      	bne.n	8004784 <__ssputs_r+0x5c>
 80047c2:	4650      	mov	r0, sl
 80047c4:	6921      	ldr	r1, [r4, #16]
 80047c6:	f7ff feb9 	bl	800453c <_free_r>
 80047ca:	230c      	movs	r3, #12
 80047cc:	f8ca 3000 	str.w	r3, [sl]
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	e7e9      	b.n	80047b2 <__ssputs_r+0x8a>
	...

080047e0 <_svfiprintf_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	4698      	mov	r8, r3
 80047e6:	898b      	ldrh	r3, [r1, #12]
 80047e8:	4607      	mov	r7, r0
 80047ea:	061b      	lsls	r3, r3, #24
 80047ec:	460d      	mov	r5, r1
 80047ee:	4614      	mov	r4, r2
 80047f0:	b09d      	sub	sp, #116	@ 0x74
 80047f2:	d510      	bpl.n	8004816 <_svfiprintf_r+0x36>
 80047f4:	690b      	ldr	r3, [r1, #16]
 80047f6:	b973      	cbnz	r3, 8004816 <_svfiprintf_r+0x36>
 80047f8:	2140      	movs	r1, #64	@ 0x40
 80047fa:	f7ff ff09 	bl	8004610 <_malloc_r>
 80047fe:	6028      	str	r0, [r5, #0]
 8004800:	6128      	str	r0, [r5, #16]
 8004802:	b930      	cbnz	r0, 8004812 <_svfiprintf_r+0x32>
 8004804:	230c      	movs	r3, #12
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	b01d      	add	sp, #116	@ 0x74
 800480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004812:	2340      	movs	r3, #64	@ 0x40
 8004814:	616b      	str	r3, [r5, #20]
 8004816:	2300      	movs	r3, #0
 8004818:	9309      	str	r3, [sp, #36]	@ 0x24
 800481a:	2320      	movs	r3, #32
 800481c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004820:	2330      	movs	r3, #48	@ 0x30
 8004822:	f04f 0901 	mov.w	r9, #1
 8004826:	f8cd 800c 	str.w	r8, [sp, #12]
 800482a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80049c4 <_svfiprintf_r+0x1e4>
 800482e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004832:	4623      	mov	r3, r4
 8004834:	469a      	mov	sl, r3
 8004836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800483a:	b10a      	cbz	r2, 8004840 <_svfiprintf_r+0x60>
 800483c:	2a25      	cmp	r2, #37	@ 0x25
 800483e:	d1f9      	bne.n	8004834 <_svfiprintf_r+0x54>
 8004840:	ebba 0b04 	subs.w	fp, sl, r4
 8004844:	d00b      	beq.n	800485e <_svfiprintf_r+0x7e>
 8004846:	465b      	mov	r3, fp
 8004848:	4622      	mov	r2, r4
 800484a:	4629      	mov	r1, r5
 800484c:	4638      	mov	r0, r7
 800484e:	f7ff ff6b 	bl	8004728 <__ssputs_r>
 8004852:	3001      	adds	r0, #1
 8004854:	f000 80a7 	beq.w	80049a6 <_svfiprintf_r+0x1c6>
 8004858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800485a:	445a      	add	r2, fp
 800485c:	9209      	str	r2, [sp, #36]	@ 0x24
 800485e:	f89a 3000 	ldrb.w	r3, [sl]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 809f 	beq.w	80049a6 <_svfiprintf_r+0x1c6>
 8004868:	2300      	movs	r3, #0
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004872:	f10a 0a01 	add.w	sl, sl, #1
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	9307      	str	r3, [sp, #28]
 800487a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800487e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004880:	4654      	mov	r4, sl
 8004882:	2205      	movs	r2, #5
 8004884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004888:	484e      	ldr	r0, [pc, #312]	@ (80049c4 <_svfiprintf_r+0x1e4>)
 800488a:	f000 fa61 	bl	8004d50 <memchr>
 800488e:	9a04      	ldr	r2, [sp, #16]
 8004890:	b9d8      	cbnz	r0, 80048ca <_svfiprintf_r+0xea>
 8004892:	06d0      	lsls	r0, r2, #27
 8004894:	bf44      	itt	mi
 8004896:	2320      	movmi	r3, #32
 8004898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800489c:	0711      	lsls	r1, r2, #28
 800489e:	bf44      	itt	mi
 80048a0:	232b      	movmi	r3, #43	@ 0x2b
 80048a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048a6:	f89a 3000 	ldrb.w	r3, [sl]
 80048aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ac:	d015      	beq.n	80048da <_svfiprintf_r+0xfa>
 80048ae:	4654      	mov	r4, sl
 80048b0:	2000      	movs	r0, #0
 80048b2:	f04f 0c0a 	mov.w	ip, #10
 80048b6:	9a07      	ldr	r2, [sp, #28]
 80048b8:	4621      	mov	r1, r4
 80048ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048be:	3b30      	subs	r3, #48	@ 0x30
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d94b      	bls.n	800495c <_svfiprintf_r+0x17c>
 80048c4:	b1b0      	cbz	r0, 80048f4 <_svfiprintf_r+0x114>
 80048c6:	9207      	str	r2, [sp, #28]
 80048c8:	e014      	b.n	80048f4 <_svfiprintf_r+0x114>
 80048ca:	eba0 0308 	sub.w	r3, r0, r8
 80048ce:	fa09 f303 	lsl.w	r3, r9, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	46a2      	mov	sl, r4
 80048d6:	9304      	str	r3, [sp, #16]
 80048d8:	e7d2      	b.n	8004880 <_svfiprintf_r+0xa0>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	1d19      	adds	r1, r3, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	9103      	str	r1, [sp, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfbb      	ittet	lt
 80048e6:	425b      	neglt	r3, r3
 80048e8:	f042 0202 	orrlt.w	r2, r2, #2
 80048ec:	9307      	strge	r3, [sp, #28]
 80048ee:	9307      	strlt	r3, [sp, #28]
 80048f0:	bfb8      	it	lt
 80048f2:	9204      	strlt	r2, [sp, #16]
 80048f4:	7823      	ldrb	r3, [r4, #0]
 80048f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80048f8:	d10a      	bne.n	8004910 <_svfiprintf_r+0x130>
 80048fa:	7863      	ldrb	r3, [r4, #1]
 80048fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fe:	d132      	bne.n	8004966 <_svfiprintf_r+0x186>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	3402      	adds	r4, #2
 8004904:	1d1a      	adds	r2, r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	9203      	str	r2, [sp, #12]
 800490a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800490e:	9305      	str	r3, [sp, #20]
 8004910:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80049c8 <_svfiprintf_r+0x1e8>
 8004914:	2203      	movs	r2, #3
 8004916:	4650      	mov	r0, sl
 8004918:	7821      	ldrb	r1, [r4, #0]
 800491a:	f000 fa19 	bl	8004d50 <memchr>
 800491e:	b138      	cbz	r0, 8004930 <_svfiprintf_r+0x150>
 8004920:	2240      	movs	r2, #64	@ 0x40
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	eba0 000a 	sub.w	r0, r0, sl
 8004928:	4082      	lsls	r2, r0
 800492a:	4313      	orrs	r3, r2
 800492c:	3401      	adds	r4, #1
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004934:	2206      	movs	r2, #6
 8004936:	4825      	ldr	r0, [pc, #148]	@ (80049cc <_svfiprintf_r+0x1ec>)
 8004938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800493c:	f000 fa08 	bl	8004d50 <memchr>
 8004940:	2800      	cmp	r0, #0
 8004942:	d036      	beq.n	80049b2 <_svfiprintf_r+0x1d2>
 8004944:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <_svfiprintf_r+0x1f0>)
 8004946:	bb1b      	cbnz	r3, 8004990 <_svfiprintf_r+0x1b0>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	3307      	adds	r3, #7
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	9303      	str	r3, [sp, #12]
 8004954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004956:	4433      	add	r3, r6
 8004958:	9309      	str	r3, [sp, #36]	@ 0x24
 800495a:	e76a      	b.n	8004832 <_svfiprintf_r+0x52>
 800495c:	460c      	mov	r4, r1
 800495e:	2001      	movs	r0, #1
 8004960:	fb0c 3202 	mla	r2, ip, r2, r3
 8004964:	e7a8      	b.n	80048b8 <_svfiprintf_r+0xd8>
 8004966:	2300      	movs	r3, #0
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4619      	mov	r1, r3
 800496e:	3401      	adds	r4, #1
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	4620      	mov	r0, r4
 8004974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004978:	3a30      	subs	r2, #48	@ 0x30
 800497a:	2a09      	cmp	r2, #9
 800497c:	d903      	bls.n	8004986 <_svfiprintf_r+0x1a6>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0c6      	beq.n	8004910 <_svfiprintf_r+0x130>
 8004982:	9105      	str	r1, [sp, #20]
 8004984:	e7c4      	b.n	8004910 <_svfiprintf_r+0x130>
 8004986:	4604      	mov	r4, r0
 8004988:	2301      	movs	r3, #1
 800498a:	fb0c 2101 	mla	r1, ip, r1, r2
 800498e:	e7f0      	b.n	8004972 <_svfiprintf_r+0x192>
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	462a      	mov	r2, r5
 8004996:	4638      	mov	r0, r7
 8004998:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <_svfiprintf_r+0x1f4>)
 800499a:	a904      	add	r1, sp, #16
 800499c:	f3af 8000 	nop.w
 80049a0:	1c42      	adds	r2, r0, #1
 80049a2:	4606      	mov	r6, r0
 80049a4:	d1d6      	bne.n	8004954 <_svfiprintf_r+0x174>
 80049a6:	89ab      	ldrh	r3, [r5, #12]
 80049a8:	065b      	lsls	r3, r3, #25
 80049aa:	f53f af2d 	bmi.w	8004808 <_svfiprintf_r+0x28>
 80049ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049b0:	e72c      	b.n	800480c <_svfiprintf_r+0x2c>
 80049b2:	ab03      	add	r3, sp, #12
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	462a      	mov	r2, r5
 80049b8:	4638      	mov	r0, r7
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <_svfiprintf_r+0x1f4>)
 80049bc:	a904      	add	r1, sp, #16
 80049be:	f000 f87d 	bl	8004abc <_printf_i>
 80049c2:	e7ed      	b.n	80049a0 <_svfiprintf_r+0x1c0>
 80049c4:	08005e0c 	.word	0x08005e0c
 80049c8:	08005e12 	.word	0x08005e12
 80049cc:	08005e16 	.word	0x08005e16
 80049d0:	00000000 	.word	0x00000000
 80049d4:	08004729 	.word	0x08004729

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4616      	mov	r6, r2
 80049de:	4698      	mov	r8, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	4607      	mov	r7, r0
 80049e6:	4293      	cmp	r3, r2
 80049e8:	bfb8      	it	lt
 80049ea:	4613      	movlt	r3, r2
 80049ec:	6033      	str	r3, [r6, #0]
 80049ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049f2:	460c      	mov	r4, r1
 80049f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049f8:	b10a      	cbz	r2, 80049fe <_printf_common+0x26>
 80049fa:	3301      	adds	r3, #1
 80049fc:	6033      	str	r3, [r6, #0]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	0699      	lsls	r1, r3, #26
 8004a02:	bf42      	ittt	mi
 8004a04:	6833      	ldrmi	r3, [r6, #0]
 8004a06:	3302      	addmi	r3, #2
 8004a08:	6033      	strmi	r3, [r6, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	f015 0506 	ands.w	r5, r5, #6
 8004a10:	d106      	bne.n	8004a20 <_printf_common+0x48>
 8004a12:	f104 0a19 	add.w	sl, r4, #25
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	6832      	ldr	r2, [r6, #0]
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dc2b      	bgt.n	8004a78 <_printf_common+0xa0>
 8004a20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	3b00      	subs	r3, #0
 8004a28:	bf18      	it	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	0692      	lsls	r2, r2, #26
 8004a2e:	d430      	bmi.n	8004a92 <_printf_common+0xba>
 8004a30:	4641      	mov	r1, r8
 8004a32:	4638      	mov	r0, r7
 8004a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a38:	47c8      	blx	r9
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d023      	beq.n	8004a86 <_printf_common+0xae>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	6922      	ldr	r2, [r4, #16]
 8004a42:	f003 0306 	and.w	r3, r3, #6
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	bf14      	ite	ne
 8004a4a:	2500      	movne	r5, #0
 8004a4c:	6833      	ldreq	r3, [r6, #0]
 8004a4e:	f04f 0600 	mov.w	r6, #0
 8004a52:	bf08      	it	eq
 8004a54:	68e5      	ldreq	r5, [r4, #12]
 8004a56:	f104 041a 	add.w	r4, r4, #26
 8004a5a:	bf08      	it	eq
 8004a5c:	1aed      	subeq	r5, r5, r3
 8004a5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a62:	bf08      	it	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bfc4      	itt	gt
 8004a6c:	1a9b      	subgt	r3, r3, r2
 8004a6e:	18ed      	addgt	r5, r5, r3
 8004a70:	42b5      	cmp	r5, r6
 8004a72:	d11a      	bne.n	8004aaa <_printf_common+0xd2>
 8004a74:	2000      	movs	r0, #0
 8004a76:	e008      	b.n	8004a8a <_printf_common+0xb2>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4652      	mov	r2, sl
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c8      	blx	r9
 8004a82:	3001      	adds	r0, #1
 8004a84:	d103      	bne.n	8004a8e <_printf_common+0xb6>
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8e:	3501      	adds	r5, #1
 8004a90:	e7c1      	b.n	8004a16 <_printf_common+0x3e>
 8004a92:	2030      	movs	r0, #48	@ 0x30
 8004a94:	18e1      	adds	r1, r4, r3
 8004a96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004aa0:	4422      	add	r2, r4
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004aa8:	e7c2      	b.n	8004a30 <_printf_common+0x58>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4622      	mov	r2, r4
 8004aae:	4641      	mov	r1, r8
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	47c8      	blx	r9
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d0e6      	beq.n	8004a86 <_printf_common+0xae>
 8004ab8:	3601      	adds	r6, #1
 8004aba:	e7d9      	b.n	8004a70 <_printf_common+0x98>

08004abc <_printf_i>:
 8004abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	7e0f      	ldrb	r7, [r1, #24]
 8004ac2:	4691      	mov	r9, r2
 8004ac4:	2f78      	cmp	r7, #120	@ 0x78
 8004ac6:	4680      	mov	r8, r0
 8004ac8:	460c      	mov	r4, r1
 8004aca:	469a      	mov	sl, r3
 8004acc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ace:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ad2:	d807      	bhi.n	8004ae4 <_printf_i+0x28>
 8004ad4:	2f62      	cmp	r7, #98	@ 0x62
 8004ad6:	d80a      	bhi.n	8004aee <_printf_i+0x32>
 8004ad8:	2f00      	cmp	r7, #0
 8004ada:	f000 80d3 	beq.w	8004c84 <_printf_i+0x1c8>
 8004ade:	2f58      	cmp	r7, #88	@ 0x58
 8004ae0:	f000 80ba 	beq.w	8004c58 <_printf_i+0x19c>
 8004ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ae8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004aec:	e03a      	b.n	8004b64 <_printf_i+0xa8>
 8004aee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004af2:	2b15      	cmp	r3, #21
 8004af4:	d8f6      	bhi.n	8004ae4 <_printf_i+0x28>
 8004af6:	a101      	add	r1, pc, #4	@ (adr r1, 8004afc <_printf_i+0x40>)
 8004af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004afc:	08004b55 	.word	0x08004b55
 8004b00:	08004b69 	.word	0x08004b69
 8004b04:	08004ae5 	.word	0x08004ae5
 8004b08:	08004ae5 	.word	0x08004ae5
 8004b0c:	08004ae5 	.word	0x08004ae5
 8004b10:	08004ae5 	.word	0x08004ae5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ae5 	.word	0x08004ae5
 8004b1c:	08004ae5 	.word	0x08004ae5
 8004b20:	08004ae5 	.word	0x08004ae5
 8004b24:	08004ae5 	.word	0x08004ae5
 8004b28:	08004c6b 	.word	0x08004c6b
 8004b2c:	08004b93 	.word	0x08004b93
 8004b30:	08004c25 	.word	0x08004c25
 8004b34:	08004ae5 	.word	0x08004ae5
 8004b38:	08004ae5 	.word	0x08004ae5
 8004b3c:	08004c8d 	.word	0x08004c8d
 8004b40:	08004ae5 	.word	0x08004ae5
 8004b44:	08004b93 	.word	0x08004b93
 8004b48:	08004ae5 	.word	0x08004ae5
 8004b4c:	08004ae5 	.word	0x08004ae5
 8004b50:	08004c2d 	.word	0x08004c2d
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6032      	str	r2, [r6, #0]
 8004b5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b64:	2301      	movs	r3, #1
 8004b66:	e09e      	b.n	8004ca6 <_printf_i+0x1ea>
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1d19      	adds	r1, r3, #4
 8004b6e:	6031      	str	r1, [r6, #0]
 8004b70:	0606      	lsls	r6, r0, #24
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0xbc>
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	e003      	b.n	8004b80 <_printf_i+0xc4>
 8004b78:	0645      	lsls	r5, r0, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0xb8>
 8004b7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	da03      	bge.n	8004b8c <_printf_i+0xd0>
 8004b84:	232d      	movs	r3, #45	@ 0x2d
 8004b86:	426d      	negs	r5, r5
 8004b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b8c:	230a      	movs	r3, #10
 8004b8e:	4859      	ldr	r0, [pc, #356]	@ (8004cf4 <_printf_i+0x238>)
 8004b90:	e011      	b.n	8004bb6 <_printf_i+0xfa>
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	6833      	ldr	r3, [r6, #0]
 8004b96:	0608      	lsls	r0, r1, #24
 8004b98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b9c:	d402      	bmi.n	8004ba4 <_printf_i+0xe8>
 8004b9e:	0649      	lsls	r1, r1, #25
 8004ba0:	bf48      	it	mi
 8004ba2:	b2ad      	uxthmi	r5, r5
 8004ba4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	bf14      	ite	ne
 8004baa:	230a      	movne	r3, #10
 8004bac:	2308      	moveq	r3, #8
 8004bae:	4851      	ldr	r0, [pc, #324]	@ (8004cf4 <_printf_i+0x238>)
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bb6:	6866      	ldr	r6, [r4, #4]
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	bfa8      	it	ge
 8004bbc:	6821      	ldrge	r1, [r4, #0]
 8004bbe:	60a6      	str	r6, [r4, #8]
 8004bc0:	bfa4      	itt	ge
 8004bc2:	f021 0104 	bicge.w	r1, r1, #4
 8004bc6:	6021      	strge	r1, [r4, #0]
 8004bc8:	b90d      	cbnz	r5, 8004bce <_printf_i+0x112>
 8004bca:	2e00      	cmp	r6, #0
 8004bcc:	d04b      	beq.n	8004c66 <_printf_i+0x1aa>
 8004bce:	4616      	mov	r6, r2
 8004bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8004bd8:	5dc7      	ldrb	r7, [r0, r7]
 8004bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bde:	462f      	mov	r7, r5
 8004be0:	42bb      	cmp	r3, r7
 8004be2:	460d      	mov	r5, r1
 8004be4:	d9f4      	bls.n	8004bd0 <_printf_i+0x114>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d10b      	bne.n	8004c02 <_printf_i+0x146>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	07df      	lsls	r7, r3, #31
 8004bee:	d508      	bpl.n	8004c02 <_printf_i+0x146>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	6861      	ldr	r1, [r4, #4]
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	bfde      	ittt	le
 8004bf8:	2330      	movle	r3, #48	@ 0x30
 8004bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c02:	1b92      	subs	r2, r2, r6
 8004c04:	6122      	str	r2, [r4, #16]
 8004c06:	464b      	mov	r3, r9
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f8cd a000 	str.w	sl, [sp]
 8004c10:	aa03      	add	r2, sp, #12
 8004c12:	f7ff fee1 	bl	80049d8 <_printf_common>
 8004c16:	3001      	adds	r0, #1
 8004c18:	d14a      	bne.n	8004cb0 <_printf_i+0x1f4>
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	b004      	add	sp, #16
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	f043 0320 	orr.w	r3, r3, #32
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	2778      	movs	r7, #120	@ 0x78
 8004c2e:	4832      	ldr	r0, [pc, #200]	@ (8004cf8 <_printf_i+0x23c>)
 8004c30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	6831      	ldr	r1, [r6, #0]
 8004c38:	061f      	lsls	r7, r3, #24
 8004c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c3e:	d402      	bmi.n	8004c46 <_printf_i+0x18a>
 8004c40:	065f      	lsls	r7, r3, #25
 8004c42:	bf48      	it	mi
 8004c44:	b2ad      	uxthmi	r5, r5
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	07d9      	lsls	r1, r3, #31
 8004c4a:	bf44      	itt	mi
 8004c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c50:	6023      	strmi	r3, [r4, #0]
 8004c52:	b11d      	cbz	r5, 8004c5c <_printf_i+0x1a0>
 8004c54:	2310      	movs	r3, #16
 8004c56:	e7ab      	b.n	8004bb0 <_printf_i+0xf4>
 8004c58:	4826      	ldr	r0, [pc, #152]	@ (8004cf4 <_printf_i+0x238>)
 8004c5a:	e7e9      	b.n	8004c30 <_printf_i+0x174>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	f023 0320 	bic.w	r3, r3, #32
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	e7f6      	b.n	8004c54 <_printf_i+0x198>
 8004c66:	4616      	mov	r6, r2
 8004c68:	e7bd      	b.n	8004be6 <_printf_i+0x12a>
 8004c6a:	6833      	ldr	r3, [r6, #0]
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1d18      	adds	r0, r3, #4
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	6030      	str	r0, [r6, #0]
 8004c74:	062e      	lsls	r6, r5, #24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	d501      	bpl.n	8004c7e <_printf_i+0x1c2>
 8004c7a:	6019      	str	r1, [r3, #0]
 8004c7c:	e002      	b.n	8004c84 <_printf_i+0x1c8>
 8004c7e:	0668      	lsls	r0, r5, #25
 8004c80:	d5fb      	bpl.n	8004c7a <_printf_i+0x1be>
 8004c82:	8019      	strh	r1, [r3, #0]
 8004c84:	2300      	movs	r3, #0
 8004c86:	4616      	mov	r6, r2
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	e7bc      	b.n	8004c06 <_printf_i+0x14a>
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	6032      	str	r2, [r6, #0]
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f859 	bl	8004d50 <memchr>
 8004c9e:	b108      	cbz	r0, 8004ca4 <_printf_i+0x1e8>
 8004ca0:	1b80      	subs	r0, r0, r6
 8004ca2:	6060      	str	r0, [r4, #4]
 8004ca4:	6863      	ldr	r3, [r4, #4]
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cae:	e7aa      	b.n	8004c06 <_printf_i+0x14a>
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	47d0      	blx	sl
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d0ad      	beq.n	8004c1a <_printf_i+0x15e>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	079b      	lsls	r3, r3, #30
 8004cc2:	d413      	bmi.n	8004cec <_printf_i+0x230>
 8004cc4:	68e0      	ldr	r0, [r4, #12]
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	4298      	cmp	r0, r3
 8004cca:	bfb8      	it	lt
 8004ccc:	4618      	movlt	r0, r3
 8004cce:	e7a6      	b.n	8004c1e <_printf_i+0x162>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	47d0      	blx	sl
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d09d      	beq.n	8004c1a <_printf_i+0x15e>
 8004cde:	3501      	adds	r5, #1
 8004ce0:	68e3      	ldr	r3, [r4, #12]
 8004ce2:	9903      	ldr	r1, [sp, #12]
 8004ce4:	1a5b      	subs	r3, r3, r1
 8004ce6:	42ab      	cmp	r3, r5
 8004ce8:	dcf2      	bgt.n	8004cd0 <_printf_i+0x214>
 8004cea:	e7eb      	b.n	8004cc4 <_printf_i+0x208>
 8004cec:	2500      	movs	r5, #0
 8004cee:	f104 0619 	add.w	r6, r4, #25
 8004cf2:	e7f5      	b.n	8004ce0 <_printf_i+0x224>
 8004cf4:	08005e1d 	.word	0x08005e1d
 8004cf8:	08005e2e 	.word	0x08005e2e

08004cfc <memmove>:
 8004cfc:	4288      	cmp	r0, r1
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	eb01 0402 	add.w	r4, r1, r2
 8004d04:	d902      	bls.n	8004d0c <memmove+0x10>
 8004d06:	4284      	cmp	r4, r0
 8004d08:	4623      	mov	r3, r4
 8004d0a:	d807      	bhi.n	8004d1c <memmove+0x20>
 8004d0c:	1e43      	subs	r3, r0, #1
 8004d0e:	42a1      	cmp	r1, r4
 8004d10:	d008      	beq.n	8004d24 <memmove+0x28>
 8004d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d1a:	e7f8      	b.n	8004d0e <memmove+0x12>
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	4402      	add	r2, r0
 8004d20:	428a      	cmp	r2, r1
 8004d22:	d100      	bne.n	8004d26 <memmove+0x2a>
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d2e:	e7f7      	b.n	8004d20 <memmove+0x24>

08004d30 <_sbrk_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	2300      	movs	r3, #0
 8004d34:	4d05      	ldr	r5, [pc, #20]	@ (8004d4c <_sbrk_r+0x1c>)
 8004d36:	4604      	mov	r4, r0
 8004d38:	4608      	mov	r0, r1
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	f7fc fbba 	bl	80014b4 <_sbrk>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_sbrk_r+0x1a>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_sbrk_r+0x1a>
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	2000058c 	.word	0x2000058c

08004d50 <memchr>:
 8004d50:	4603      	mov	r3, r0
 8004d52:	b510      	push	{r4, lr}
 8004d54:	b2c9      	uxtb	r1, r1
 8004d56:	4402      	add	r2, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	d101      	bne.n	8004d62 <memchr+0x12>
 8004d5e:	2000      	movs	r0, #0
 8004d60:	e003      	b.n	8004d6a <memchr+0x1a>
 8004d62:	7804      	ldrb	r4, [r0, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	428c      	cmp	r4, r1
 8004d68:	d1f6      	bne.n	8004d58 <memchr+0x8>
 8004d6a:	bd10      	pop	{r4, pc}

08004d6c <memcpy>:
 8004d6c:	440a      	add	r2, r1
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d74:	d100      	bne.n	8004d78 <memcpy+0xc>
 8004d76:	4770      	bx	lr
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7e:	4291      	cmp	r1, r2
 8004d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d84:	d1f9      	bne.n	8004d7a <memcpy+0xe>
 8004d86:	bd10      	pop	{r4, pc}

08004d88 <_realloc_r>:
 8004d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	4615      	mov	r5, r2
 8004d90:	460c      	mov	r4, r1
 8004d92:	b921      	cbnz	r1, 8004d9e <_realloc_r+0x16>
 8004d94:	4611      	mov	r1, r2
 8004d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9a:	f7ff bc39 	b.w	8004610 <_malloc_r>
 8004d9e:	b92a      	cbnz	r2, 8004dac <_realloc_r+0x24>
 8004da0:	f7ff fbcc 	bl	800453c <_free_r>
 8004da4:	2400      	movs	r4, #0
 8004da6:	4620      	mov	r0, r4
 8004da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dac:	f000 f81a 	bl	8004de4 <_malloc_usable_size_r>
 8004db0:	4285      	cmp	r5, r0
 8004db2:	4606      	mov	r6, r0
 8004db4:	d802      	bhi.n	8004dbc <_realloc_r+0x34>
 8004db6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004dba:	d8f4      	bhi.n	8004da6 <_realloc_r+0x1e>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f7ff fc26 	bl	8004610 <_malloc_r>
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d0ec      	beq.n	8004da4 <_realloc_r+0x1c>
 8004dca:	42b5      	cmp	r5, r6
 8004dcc:	462a      	mov	r2, r5
 8004dce:	4621      	mov	r1, r4
 8004dd0:	bf28      	it	cs
 8004dd2:	4632      	movcs	r2, r6
 8004dd4:	f7ff ffca 	bl	8004d6c <memcpy>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7ff fbae 	bl	800453c <_free_r>
 8004de0:	463c      	mov	r4, r7
 8004de2:	e7e0      	b.n	8004da6 <_realloc_r+0x1e>

08004de4 <_malloc_usable_size_r>:
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f18      	subs	r0, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfbc      	itt	lt
 8004dee:	580b      	ldrlt	r3, [r1, r0]
 8004df0:	18c0      	addlt	r0, r0, r3
 8004df2:	4770      	bx	lr

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
