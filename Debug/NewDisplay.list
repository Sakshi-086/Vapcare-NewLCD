
NewDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  000070a0  2**0
                  CONTENTS
  4 .ARM          00000008  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d8  080052d8  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d8  080052d8  000062d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052dc  080052dc  000062dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080052e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200000a0  08005380  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08005380  000075a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001129b  00000000  00000000  000070c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dac  00000000  00000000  00018364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001b110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  0001c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab4c  00000000  00000000  0001cff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018169  00000000  00000000  00037b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d39f  00000000  00000000  0004fcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed04d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d20  00000000  00000000  000ed090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f1db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800486c 	.word	0x0800486c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	0800486c 	.word	0x0800486c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b968 	b.w	8000474 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	fb07 1114 	mls	r1, r7, r4, r1
 80001f6:	fa1f f68c 	uxth.w	r6, ip
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8110 	bcs.w	8000436 <__udivmoddi4+0x27a>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810d 	bls.w	8000436 <__udivmoddi4+0x27a>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	fb00 f606 	mul.w	r6, r0, r6
 800022e:	fa1f f38e 	uxth.w	r3, lr
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fa 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f7 	bls.w	800043a <__udivmoddi4+0x27e>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	1b9b      	subs	r3, r3, r6
 8000254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80ee 	bcc.w	8000464 <__udivmoddi4+0x2a8>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x202>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	2101      	movs	r1, #1
 80002a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	fb07 f006 	mul.w	r0, r7, r6
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	fb00 f707 	mul.w	r7, r0, r7
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80ae 	bhi.w	800045e <__udivmoddi4+0x2a2>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa24 f607 	lsr.w	r6, r4, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbb6 f8f9 	udiv	r8, r6, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 6618 	mls	r6, r9, r8, r6
 800032e:	fa20 f307 	lsr.w	r3, r0, r7
 8000332:	408c      	lsls	r4, r1
 8000334:	fa00 fa01 	lsl.w	sl, r0, r1
 8000338:	fb08 f00e 	mul.w	r0, r8, lr
 800033c:	431c      	orrs	r4, r3
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000344:	4298      	cmp	r0, r3
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	eb1c 0303 	adds.w	r3, ip, r3
 8000350:	f108 36ff 	add.w	r6, r8, #4294967295
 8000354:	f080 8081 	bcs.w	800045a <__udivmoddi4+0x29e>
 8000358:	4298      	cmp	r0, r3
 800035a:	d97e      	bls.n	800045a <__udivmoddi4+0x29e>
 800035c:	f1a8 0802 	sub.w	r8, r8, #2
 8000360:	4463      	add	r3, ip
 8000362:	1a1e      	subs	r6, r3, r0
 8000364:	fbb6 f3f9 	udiv	r3, r6, r9
 8000368:	fb09 6613 	mls	r6, r9, r3, r6
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000376:	45a6      	cmp	lr, r4
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x1d0>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000382:	d266      	bcs.n	8000452 <__udivmoddi4+0x296>
 8000384:	45a6      	cmp	lr, r4
 8000386:	d964      	bls.n	8000452 <__udivmoddi4+0x296>
 8000388:	3b02      	subs	r3, #2
 800038a:	4464      	add	r4, ip
 800038c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000390:	fba0 8302 	umull	r8, r3, r0, r2
 8000394:	eba4 040e 	sub.w	r4, r4, lr
 8000398:	429c      	cmp	r4, r3
 800039a:	46c6      	mov	lr, r8
 800039c:	461e      	mov	r6, r3
 800039e:	d350      	bcc.n	8000442 <__udivmoddi4+0x286>
 80003a0:	d04d      	beq.n	800043e <__udivmoddi4+0x282>
 80003a2:	b155      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a4:	ebba 030e 	subs.w	r3, sl, lr
 80003a8:	eb64 0406 	sbc.w	r4, r4, r6
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	40cb      	lsrs	r3, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e751      	b.n	8000262 <__udivmoddi4+0xa6>
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa20 f303 	lsr.w	r3, r0, r3
 80003d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003d8:	fb08 1110 	mls	r1, r8, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x248>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29a>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29a>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	fbb3 f1f8 	udiv	r1, r3, r8
 800040a:	fb08 3311 	mls	r3, r8, r1, r3
 800040e:	b2a4      	uxth	r4, r4
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x272>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x292>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x292>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f2      	b.n	8000220 <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e708      	b.n	8000250 <__udivmoddi4+0x94>
 800043e:	45c2      	cmp	sl, r8
 8000440:	d2af      	bcs.n	80003a2 <__udivmoddi4+0x1e6>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 060c 	sbc.w	r6, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a9      	b.n	80003a2 <__udivmoddi4+0x1e6>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x272>
 8000452:	4603      	mov	r3, r0
 8000454:	e79a      	b.n	800038c <__udivmoddi4+0x1d0>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x248>
 800045a:	46b0      	mov	r8, r6
 800045c:	e781      	b.n	8000362 <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74f      	b.n	8000304 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e711      	b.n	8000290 <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000488:	4b25      	ldr	r3, [pc, #148]	@ (8000520 <MX_ADC_Init+0xa8>)
 800048a:	4a26      	ldr	r2, [pc, #152]	@ (8000524 <MX_ADC_Init+0xac>)
 800048c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048e:	4b24      	ldr	r3, [pc, #144]	@ (8000520 <MX_ADC_Init+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000494:	4b22      	ldr	r3, [pc, #136]	@ (8000520 <MX_ADC_Init+0xa8>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004b8:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004be:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004cc:	4b14      	ldr	r3, [pc, #80]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d4:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004da:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <MX_ADC_Init+0xa8>)
 80004ea:	f001 f953 	bl	8001794 <HAL_ADC_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80004f4:	f000 fbfc 	bl	8000cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	@ (8000520 <MX_ADC_Init+0xa8>)
 800050a:	f001 fa89 	bl	8001a20 <HAL_ADC_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000514:	f000 fbec 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000bc 	.word	0x200000bc
 8000524:	40012400 	.word	0x40012400

08000528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <HAL_ADC_MspInit+0xa4>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d13c      	bne.n	80005c4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800054a:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 800054c:	6a1b      	ldr	r3, [r3, #32]
 800054e:	4a20      	ldr	r2, [pc, #128]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000554:	6213      	str	r3, [r2, #32]
 8000556:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_ADC_MspInit+0xa8>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000592:	2301      	movs	r3, #1
 8000594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <HAL_ADC_MspInit+0xac>)
 80005a6:	f001 fc8b 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <HAL_ADC_MspInit+0xb0>)
 80005c0:	f001 fc7e 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40012400 	.word	0x40012400
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b087      	sub	sp, #28
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a25      	ldr	r2, [pc, #148]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b23      	ldr	r3, [pc, #140]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_GPIO_Init+0xa0>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000612:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a19      	ldr	r2, [pc, #100]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000618:	f043 0310 	orr.w	r3, r3, #16
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0310 	and.w	r3, r3, #16
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_GPIO_Init+0xa0>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a13      	ldr	r2, [pc, #76]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <MX_GPIO_Init+0xa0>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <MX_GPIO_Init+0xa0>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

}
 8000672:	bf00      	nop
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40023800 	.word	0x40023800

08000680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f001 fdbf 	bl	8002240 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fb12 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000110 	.word	0x20000110
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C2_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C2_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C2_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C2_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C2_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C2_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C2_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C2_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C2_Init+0x50>)
 800071a:	f001 fd91 	bl	8002240 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fae4 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000164 	.word	0x20000164
 8000730:	40005800 	.word	0x40005800
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a2e      	ldr	r2, [pc, #184]	@ (8000810 <HAL_I2C_MspInit+0xd8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d128      	bne.n	80007ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000772:	23c0      	movs	r3, #192	@ 0xc0
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000782:	2304      	movs	r3, #4
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	@ (8000818 <HAL_I2C_MspInit+0xe0>)
 800078e:	f001 fb97 	bl	8001ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800079c:	6253      	str	r3, [r2, #36]	@ 0x24
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007aa:	e02d      	b.n	8000808 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <HAL_I2C_MspInit+0xe4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d128      	bne.n	8000808 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d4:	2312      	movs	r3, #18
 80007d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e0:	2304      	movs	r3, #4
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <HAL_I2C_MspInit+0xe0>)
 80007ec:	f001 fb68 	bl	8001ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007fa:	6253      	str	r3, [r2, #36]	@ 0x24
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <HAL_I2C_MspInit+0xdc>)
 80007fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	@ 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40005400 	.word	0x40005400
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40005800 	.word	0x40005800

08000820 <KBD_Init>:
	KBD1_PORT,	KBD2_PORT,	KBD3_PORT,	KBD4_PORT,	KBD5_PORT,
	KBD6_PORT,	KBD7_PORT,	KBD8_PORT,	KBD9_PORT,	KBD10_PORT
};

void KBD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	uint8_t ui8Index;

	/* KBD GPIO Configuration --------------------------------------------------*/

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000826:	2300      	movs	r3, #0
 8000828:	75fb      	strb	r3, [r7, #23]
 800082a:	e017      	b.n	800085c <KBD_Init+0x3c>
	{
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <KBD_Init+0x94>)
 8000830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000834:	603b      	str	r3, [r7, #0]
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
		GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	4a1c      	ldr	r2, [pc, #112]	@ (80008b8 <KBD_Init+0x98>)
 8000846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084a:	461a      	mov	r2, r3
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4610      	mov	r0, r2
 8000852:	f001 fb35 	bl	8001ec0 <HAL_GPIO_Init>
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000856:	7dfb      	ldrb	r3, [r7, #23]
 8000858:	3301      	adds	r3, #1
 800085a:	75fb      	strb	r3, [r7, #23]
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	2b09      	cmp	r3, #9
 8000860:	d9e4      	bls.n	800082c <KBD_Init+0xc>
	}

	GPIO_InitStructure.Pin = AC_LED_PIN;
 8000862:	2304      	movs	r3, #4
 8000864:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <KBD_Init+0x9c>)
 8000878:	f001 fb22 	bl	8001ec0 <HAL_GPIO_Init>
	AC_LED_OFF;
 800087c:	2200      	movs	r2, #0
 800087e:	2104      	movs	r1, #4
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <KBD_Init+0x9c>)
 8000882:	f001 fcc4 	bl	800220e <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = BATT_LED_PIN;
 8000886:	2308      	movs	r3, #8
 8000888:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4808      	ldr	r0, [pc, #32]	@ (80008bc <KBD_Init+0x9c>)
 800089c:	f001 fb10 	bl	8001ec0 <HAL_GPIO_Init>
	BATT_LED_OFF;
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <KBD_Init+0x9c>)
 80008a6:	f001 fcb2 	bl	800220e <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000004 	.word	0x20000004
 80008b8:	20000018 	.word	0x20000018
 80008bc:	40020800 	.word	0x40020800

080008c0 <KBD_Get>:

uint16_t KBD_Get()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint16_t ui16KeyStatus = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	80fb      	strh	r3, [r7, #6]
	uint8_t ui8Index;

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	e01b      	b.n	8000908 <KBD_Get+0x48>
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], ui16KBDGpioPins[ui8Index]) == GPIO_PIN_RESET)
 80008d0:	797b      	ldrb	r3, [r7, #5]
 80008d2:	4a11      	ldr	r2, [pc, #68]	@ (8000918 <KBD_Get+0x58>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	4618      	mov	r0, r3
 80008da:	797b      	ldrb	r3, [r7, #5]
 80008dc:	4a0f      	ldr	r2, [pc, #60]	@ (800091c <KBD_Get+0x5c>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	4619      	mov	r1, r3
 80008e4:	f001 fc7c 	bl	80021e0 <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <KBD_Get+0x42>
		{
			ui16KeyStatus = ui16KeyStatus | ((uint16_t)0x01) << ui8Index;
 80008ee:	797b      	ldrb	r3, [r7, #5]
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	80fb      	strh	r3, [r7, #6]
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	3301      	adds	r3, #1
 8000906:	717b      	strb	r3, [r7, #5]
 8000908:	797b      	ldrb	r3, [r7, #5]
 800090a:	2b09      	cmp	r3, #9
 800090c:	d9e0      	bls.n	80008d0 <KBD_Get+0x10>
		}
	}

	return ui16KeyStatus;
 800090e:	88fb      	ldrh	r3, [r7, #6]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000018 	.word	0x20000018
 800091c:	20000004 	.word	0x20000004

08000920 <KBD_ButtonStatus>:

uint8_t KBD_ButtonStatus(uint8_t ui8ButtonNum)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	if(!ui8WriteLogBusyFlag ||
 800092a:	4b32      	ldr	r3, [pc, #200]	@ (80009f4 <KBD_ButtonStatus+0xd4>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d009      	beq.n	8000946 <KBD_ButtonStatus+0x26>
			(ui8WriteLogBusyFlag && ui8ButtonNum != BUTTON_START_PAUSE && ui8ButtonNum != BUTTON_SETTINGS)) /* During User Log write Key press is masked to prevent unintended navigation*/
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <KBD_ButtonStatus+0xd4>)
 8000934:	781b      	ldrb	r3, [r3, #0]
	if(!ui8WriteLogBusyFlag ||
 8000936:	2b00      	cmp	r3, #0
 8000938:	d056      	beq.n	80009e8 <KBD_ButtonStatus+0xc8>
			(ui8WriteLogBusyFlag && ui8ButtonNum != BUTTON_START_PAUSE && ui8ButtonNum != BUTTON_SETTINGS)) /* During User Log write Key press is masked to prevent unintended navigation*/
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b06      	cmp	r3, #6
 800093e:	d053      	beq.n	80009e8 <KBD_ButtonStatus+0xc8>
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b08      	cmp	r3, #8
 8000944:	d050      	beq.n	80009e8 <KBD_ButtonStatus+0xc8>
	{
		static uint32_t ui32PressConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
		static uint32_t ui32ReleaseConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
		static uint8_t ui8TriggerPressed[NUMBER_OF_BUTTONS] = {0};
		uint16_t ui16ButtonMask = 0x01;
 8000946:	2301      	movs	r3, #1
 8000948:	81fb      	strh	r3, [r7, #14]

		ui16ButtonMask = ui16ButtonMask << ui8ButtonNum;
 800094a:	89fa      	ldrh	r2, [r7, #14]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	81fb      	strh	r3, [r7, #14]
		if((KBD_Get() & ui16ButtonMask) == ui16ButtonMask)
 8000954:	f7ff ffb4 	bl	80008c0 <KBD_Get>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	4013      	ands	r3, r2
 8000960:	b29b      	uxth	r3, r3
 8000962:	89fa      	ldrh	r2, [r7, #14]
 8000964:	429a      	cmp	r2, r3
 8000966:	d11f      	bne.n	80009a8 <KBD_ButtonStatus+0x88>
		{
			ui32ReleaseConfidenceLevel[ui8ButtonNum] = 0;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <KBD_ButtonStatus+0xd8>)
 800096c:	2100      	movs	r1, #0
 800096e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			ui32PressConfidenceLevel[ui8ButtonNum]++;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <KBD_ButtonStatus+0xdc>)
 8000976:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800097a:	3201      	adds	r2, #1
 800097c:	491f      	ldr	r1, [pc, #124]	@ (80009fc <KBD_ButtonStatus+0xdc>)
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(ui32PressConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a1d      	ldr	r2, [pc, #116]	@ (80009fc <KBD_ButtonStatus+0xdc>)
 8000986:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <KBD_ButtonStatus+0xe0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d92a      	bls.n	80009e8 <KBD_ButtonStatus+0xc8>
			{
				if(!ui8TriggerPressed[ui8ButtonNum])
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <KBD_ButtonStatus+0xe4>)
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d125      	bne.n	80009e8 <KBD_ButtonStatus+0xc8>
				{
					ui8TriggerPressed[ui8ButtonNum] = 1;
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <KBD_ButtonStatus+0xe4>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	54d1      	strb	r1, [r2, r3]
					return BUTTON_PRESSED;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e020      	b.n	80009ea <KBD_ButtonStatus+0xca>
				}
			}
		}
		else
		{
			ui32ReleaseConfidenceLevel[ui8ButtonNum]++;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <KBD_ButtonStatus+0xd8>)
 80009ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b0:	3201      	adds	r2, #1
 80009b2:	4911      	ldr	r1, [pc, #68]	@ (80009f8 <KBD_ButtonStatus+0xd8>)
 80009b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ui32PressConfidenceLevel[ui8ButtonNum] = 0;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <KBD_ButtonStatus+0xdc>)
 80009bc:	2100      	movs	r1, #0
 80009be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			if(ui32ReleaseConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <KBD_ButtonStatus+0xd8>)
 80009c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <KBD_ButtonStatus+0xe0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d90a      	bls.n	80009e8 <KBD_ButtonStatus+0xc8>
			{
				if(ui8TriggerPressed[ui8ButtonNum])
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <KBD_ButtonStatus+0xe4>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d005      	beq.n	80009e8 <KBD_ButtonStatus+0xc8>
				{
					ui8TriggerPressed[ui8ButtonNum] = 0;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <KBD_ButtonStatus+0xe4>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	54d1      	strb	r1, [r2, r3]
					return BUTTON_CLICKED;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <KBD_ButtonStatus+0xca>
				}
			}
		}
	}
	return BUTTON_NOT_CLICKED;
 80009e8:	2302      	movs	r3, #2
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000451 	.word	0x20000451
 80009f8:	200001b8 	.word	0x200001b8
 80009fc:	200001e0 	.word	0x200001e0
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000208 	.word	0x20000208

08000a08 <get_label_name>:
	{CONFIRM_NEW_PATIENT_TEXT3_X, CONFIRM_NEW_PATIENT_TEXT3_Y, "CONFIRM_NEW_PATIENT_TEXT3_LABEL"},

};


const char* get_label_name(uint16_t x, uint16_t y) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	80fb      	strh	r3, [r7, #6]
 8000a14:	4613      	mov	r3, r2
 8000a16:	80bb      	strh	r3, [r7, #4]
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e017      	b.n	8000a4e <get_label_name+0x46>
        if (label_mapping[i].x == x && label_mapping[i].y == y) {
 8000a1e:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <get_label_name+0x58>)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000a26:	88fa      	ldrh	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d10d      	bne.n	8000a48 <get_label_name+0x40>
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <get_label_name+0x58>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	4413      	add	r3, r2
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	88ba      	ldrh	r2, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d105      	bne.n	8000a48 <get_label_name+0x40>
            return label_mapping[i].label_name;
 8000a3c:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <get_label_name+0x58>)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4413      	add	r3, r2
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	e006      	b.n	8000a56 <get_label_name+0x4e>
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b0a      	cmp	r3, #10
 8000a52:	d9e4      	bls.n	8000a1e <get_label_name+0x16>
        }
    }
    return NULL; // Return NULL if no label matches the coordinates
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	08005020 	.word	0x08005020

08000a64 <get_window_name_from_index>:
    {SETTINGS_EXTENDED_LOG_IMAGE_INDEX, "SETTINGS_EXTENDED_LOG_WIN"},
    {SAVE_SETTINGS_AND_BEGIN_SUCTION_IMAGE_INDEX, "SAVE_SETTINGS_AND_BEGIN_SUCTION_WIN"}
};


const char* get_window_name_from_index(uint16_t index) {
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	e00f      	b.n	8000a94 <get_window_name_from_index+0x30>
        if (index_mapping[i].index == index) {
 8000a74:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <get_window_name_from_index+0x44>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000a7c:	88fa      	ldrh	r2, [r7, #6]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d105      	bne.n	8000a8e <get_window_name_from_index+0x2a>
            return index_mapping[i].window_name;
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <get_window_name_from_index+0x44>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	4413      	add	r3, r2
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	e006      	b.n	8000a9c <get_window_name_from_index+0x38>
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a98:	d9ec      	bls.n	8000a74 <get_window_name_from_index+0x10>
        }
    }
    return NULL; // Return NULL if no matching window is found
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	08005078 	.word	0x08005078

08000aac <LCD_DisplayImage>:

    // Send the JSON command via UART
    HAL_UART_Transmit(&huart2, (uint8_t *)json_command, strlen(json_command), HAL_MAX_DELAY);
}

void LCD_DisplayImage(uint16_t ui16index) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0c4      	sub	sp, #272	@ 0x110
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ab8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000abc:	801a      	strh	r2, [r3, #0]
    const char *window_name = get_window_name_from_index(ui16index);
 8000abe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ac2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffcb 	bl	8000a64 <get_window_name_from_index>
 8000ace:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    if (window_name == NULL) {
 8000ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d017      	beq.n	8000b0a <LCD_DisplayImage+0x5e>
        return;
    }

    // Construct JSON command to open the window
    char json_command[256];
    snprintf(json_command, sizeof(json_command),
 8000ada:	f107 000c 	add.w	r0, r7, #12
 8000ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <LCD_DisplayImage+0x68>)
 8000ae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae8:	f003 f9fc 	bl	8003ee4 <sniprintf>
             "ST<{\"cmd_code\":\"open_win\",\"type\":\"window\",\"widget\":\"%s\"}>ET",
			 window_name);

    // Send JSON command to LCD
    HAL_UART_Transmit(&huart2, (uint8_t *)json_command, strlen(json_command), HAL_MAX_DELAY);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fb43 	bl	800017c <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f107 010c 	add.w	r1, r7, #12
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <LCD_DisplayImage+0x6c>)
 8000b04:	f003 f818 	bl	8003b38 <HAL_UART_Transmit>
 8000b08:	e000      	b.n	8000b0c <LCD_DisplayImage+0x60>
        return;
 8000b0a:	bf00      	nop
}
 8000b0c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	08004f88 	.word	0x08004f88
 8000b18:	200003c0 	.word	0x200003c0

08000b1c <LCD_DisplayIcon>:


void LCD_DisplayIcon(uint16_t ui16X, uint16_t ui16Y, uint16_t ui16Index) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a6      	sub	sp, #152	@ 0x98
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	807b      	strh	r3, [r7, #2]
    char json_command[128]; // Buffer to hold the JSON command
    const char *icon_name = get_label_name(ui16X, ui16Y);
 8000b2e:	88ba      	ldrh	r2, [r7, #4]
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff67 	bl	8000a08 <get_label_name>
 8000b3a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    // Check if icon is found for the given coordinates
    if (icon_name == NULL) {
 8000b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01d      	beq.n	8000b82 <LCD_DisplayIcon+0x66>
        // No icon found for these coordinates, handle error if needed
        return;
    }

    // Format the JSON command according to the new LCD protocol
    snprintf(json_command, sizeof(json_command),
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <LCD_DisplayIcon+0x34>
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <LCD_DisplayIcon+0x70>)
 8000b4e:	e000      	b.n	8000b52 <LCD_DisplayIcon+0x36>
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <LCD_DisplayIcon+0x74>)
 8000b52:	f107 000c 	add.w	r0, r7, #12
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LCD_DisplayIcon+0x78>)
 8000b5e:	2180      	movs	r1, #128	@ 0x80
 8000b60:	f003 f9c0 	bl	8003ee4 <sniprintf>
             "ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":%s}>ET",
             icon_name,(ui16Index == 1) ? "true" : "false");

    // Send the JSON command to the LCD using USART
    HAL_UART_Transmit(&huart2, (uint8_t *)json_command, strlen(json_command), HAL_MAX_DELAY);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fb07 	bl	800017c <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 010c 	add.w	r1, r7, #12
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <LCD_DisplayIcon+0x7c>)
 8000b7c:	f002 ffdc 	bl	8003b38 <HAL_UART_Transmit>
 8000b80:	e000      	b.n	8000b84 <LCD_DisplayIcon+0x68>
        return;
 8000b82:	bf00      	nop
}
 8000b84:	3790      	adds	r7, #144	@ 0x90
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08004fc4 	.word	0x08004fc4
 8000b90:	08004fcc 	.word	0x08004fcc
 8000b94:	08004fd4 	.word	0x08004fd4
 8000b98:	200003c0 	.word	0x200003c0

08000b9c <LCD_DisplayNewPatientSelection>:


void LCD_DisplayNewPatientSelection(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	LCD_DisplayImage(NEW_PATIENT_IMAGE_INDEX);
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f7ff ff83 	bl	8000aac <LCD_DisplayImage>
//	LCD_DisplayText(F_MODE, OPTION_TEXT_X, OPTION_TEXT_Y, "Settings", LCD_8X16_FONT_INDEX, WHITE, WHITE);
//	LCD_DisplayText(F_MODE, MANDATORY_SUCTION_TEXT_X, MANDATORY_SUCTION_TEXT_Y, "OnDemand", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <LCD_DisplayNewPatientSelectionMenu>:

void LCD_DisplayNewPatientSelectionMenu(uint8_t ui8Num)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
	if(ui8Num == 1)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d10a      	bne.n	8000bd0 <LCD_DisplayNewPatientSelectionMenu+0x26>
	{
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, CLEAR_BOX_NO_ICON_INDEX);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2189      	movs	r1, #137	@ 0x89
 8000bbe:	20b6      	movs	r0, #182	@ 0xb6
 8000bc0:	f7ff ffac 	bl	8000b1c <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, BOX_YES_ICON_INDEX);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	215e      	movs	r1, #94	@ 0x5e
 8000bc8:	20b6      	movs	r0, #182	@ 0xb6
 8000bca:	f7ff ffa7 	bl	8000b1c <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
	}

//	LCD_DisplayText(F_MODE, VERIFY_NEW_PATIENT_YES_X, VERIFY_NEW_PATIENT_YES_Y, "Yes", LCD_12X24_FONT_INDEX, BLACK, WHITE);
//	LCD_DisplayText(F_MODE, VERIFY_NEW_PATIENT_NO_X, VERIFY_NEW_PATIENT_NO_Y, "No", LCD_12X24_FONT_INDEX, BLACK, WHITE);
}
 8000bce:	e009      	b.n	8000be4 <LCD_DisplayNewPatientSelectionMenu+0x3a>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, CLEAR_BOX_YES_ICON_INDEX);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	215e      	movs	r1, #94	@ 0x5e
 8000bd4:	20b6      	movs	r0, #182	@ 0xb6
 8000bd6:	f7ff ffa1 	bl	8000b1c <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2189      	movs	r1, #137	@ 0x89
 8000bde:	20b6      	movs	r0, #182	@ 0xb6
 8000be0:	f7ff ff9c 	bl	8000b1c <LCD_DisplayIcon>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LCD_DisplayConfirmNewPatient>:

void LCD_DisplayConfirmNewPatient(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	LCD_DisplayImage(CONFIRM_NEW_PATIENT_IMAGE_INDEX);
 8000bf0:	200c      	movs	r0, #12
 8000bf2:	f7ff ff5b 	bl	8000aac <LCD_DisplayImage>
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, WHITE, WHITE);

//	LCD_DisplayText(F_MODE, CONFIRM_NEW_PATIENT_TEXT3_X, CONFIRM_NEW_PATIENT_TEXT3_Y, "Press [BACK] To Cancel", LCD_8X16_FONT_INDEX, BLACK, WHITE);

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <LCD_DisplayFlashErasingScreen>:

void LCD_DisplayFlashErasingScreen(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
	LCD_DisplayImage(ERASING_OLD_DATA_IMAGE_INDEX);
 8000bfe:	200d      	movs	r0, #13
 8000c00:	f7ff ff54 	bl	8000aac <LCD_DisplayImage>
//
//	LCD_DisplayText(F_MODE, OPTION_TEXT_X, OPTION_TEXT_Y, "Settings", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, MANDATORY_SUCTION_TEXT_X, MANDATORY_SUCTION_TEXT_Y, "OnDemand", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, START_TILE_TEXT_X, START_TILE_TEXT_Y, "Start", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fd31 	bl	8001672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f81e 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f7ff fce2 	bl	80005dc <MX_GPIO_Init>
  KBD_Init();
 8000c18:	f7ff fe02 	bl	8000820 <KBD_Init>
  MX_ADC_Init();
 8000c1c:	f7ff fc2c 	bl	8000478 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c20:	f7ff fd2e 	bl	8000680 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c24:	f7ff fd5a 	bl	80006dc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000c28:	f000 f868 	bl	8000cfc <MX_SPI1_Init>
  MX_TIM3_Init();
 8000c2c:	f000 f976 	bl	8000f1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c30:	f000 f9c2 	bl	8000fb8 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000c34:	f000 fa0e 	bl	8001054 <MX_TIM11_Init>
  MX_UART5_Init();
 8000c38:	f000 faea 	bl	8001210 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000c3c:	f000 fb12 	bl	8001264 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fb3a 	bl	80012b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fb62 	bl	800130c <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VAPCARE_VerifyNewPatientRoutine();
 8000c48:	f000 fc80 	bl	800154c <VAPCARE_VerifyNewPatientRoutine>
 8000c4c:	e7fc      	b.n	8000c48 <main+0x40>
	...

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	@ 0x48
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2234      	movs	r2, #52	@ 0x34
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f974 	bl	8003f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <SystemClock_Config+0x9c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <SystemClock_Config+0x9c>)
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c80:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c82:	2303      	movs	r3, #3
 8000c84:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ca0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fc0b 	bl	80024c8 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000cb8:	f000 f81a 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 ff27 	bl	8002b28 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ce0:	f000 f806 	bl	8000cf0 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3748      	adds	r7, #72	@ 0x48
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40007000 	.word	0x40007000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_SPI1_Init+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d48:	220a      	movs	r2, #10
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_SPI1_Init+0x64>)
 8000d4e:	f002 f9af 	bl	80030b0 <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d58:	f7ff ffca 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000214 	.word	0x20000214
 8000d64:	40013000 	.word	0x40013000

08000d68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a17      	ldr	r2, [pc, #92]	@ (8000de4 <HAL_SPI_MspInit+0x7c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d128      	bne.n	8000ddc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	4a16      	ldr	r2, [pc, #88]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d94:	6213      	str	r3, [r2, #32]
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_SPI_MspInit+0x80>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_SPI_MspInit+0x84>)
 8000dd8:	f001 f872 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <HAL_MspInit+0x58>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <HAL_MspInit+0x58>)
 8000dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e00:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6213      	str	r3, [r2, #32]
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2a:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_MspInit+0x58>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40023800 	.word	0x40023800

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 fc3c 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f003 f842 	bl	8003f5c <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20014000 	.word	0x20014000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	2000026c 	.word	0x2000026c
 8000f0c:	200005a0 	.word	0x200005a0

08000f10 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb4 <MX_TIM3_Init+0x98>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5e:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f60:	f002 f92f 	bl	80031c2 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f7ff fec1 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f7c:	f002 fa6a 	bl	8003454 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f7ff feb3 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <MX_TIM3_Init+0x94>)
 8000f98:	f002 fd20 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fa2:	f7ff fea5 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000270 	.word	0x20000270
 8000fb4:	40000400 	.word	0x40000400

08000fb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_TIM4_Init+0x94>)
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001050 <MX_TIM4_Init+0x98>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_TIM4_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_TIM4_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_TIM4_Init+0x94>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_TIM4_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_TIM4_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ffa:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_TIM4_Init+0x94>)
 8000ffc:	f002 f8e1 	bl	80031c2 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001006:	f7ff fe73 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	@ (800104c <MX_TIM4_Init+0x94>)
 8001018:	f002 fa1c 	bl	8003454 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001022:	f7ff fe65 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <MX_TIM4_Init+0x94>)
 8001034:	f002 fcd2 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800103e:	f7ff fe57 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200002b0 	.word	0x200002b0
 8001050:	40000800 	.word	0x40000800

08001054 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <MX_TIM11_Init+0xb8>)
 8001076:	4a26      	ldr	r2, [pc, #152]	@ (8001110 <MX_TIM11_Init+0xbc>)
 8001078:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <MX_TIM11_Init+0xb8>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <MX_TIM11_Init+0xb8>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <MX_TIM11_Init+0xb8>)
 8001088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <MX_TIM11_Init+0xb8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <MX_TIM11_Init+0xb8>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800109a:	481c      	ldr	r0, [pc, #112]	@ (800110c <MX_TIM11_Init+0xb8>)
 800109c:	f002 f891 	bl	80031c2 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM11_Init+0x56>
  {
    Error_Handler();
 80010a6:	f7ff fe23 	bl	8000cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	@ (800110c <MX_TIM11_Init+0xb8>)
 80010b8:	f002 f9cc 	bl	8003454 <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM11_Init+0x72>
  {
    Error_Handler();
 80010c2:	f7ff fe15 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <MX_TIM11_Init+0xb8>)
 80010c8:	f002 f8ba 	bl	8003240 <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 80010d2:	f7ff fe0d 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	@ 0x60
 80010d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_TIM11_Init+0xb8>)
 80010ee:	f002 f8ef 	bl	80032d0 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM11_Init+0xa8>
  {
    Error_Handler();
 80010f8:	f7ff fdfa 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_TIM11_Init+0xb8>)
 80010fe:	f000 f84f 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002f0 	.word	0x200002f0
 8001110:	40011000 	.word	0x40011000

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <HAL_TIM_Base_MspInit+0x7c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10c      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6253      	str	r3, [r2, #36]	@ 0x24
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800113e:	e022      	b.n	8001186 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <HAL_TIM_Base_MspInit+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10c      	bne.n	8001164 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6253      	str	r3, [r2, #36]	@ 0x24
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
}
 8001162:	e010      	b.n	8001186 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM11)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <HAL_TIM_Base_MspInit+0x88>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10b      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40000400 	.word	0x40000400
 8001194:	40023800 	.word	0x40023800
 8001198:	40000800 	.word	0x40000800
 800119c:	40011000 	.word	0x40011000

080011a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM11)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <HAL_TIM_MspPostInit+0x64>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d11c      	bne.n	80011fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB15     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_TIM_MspPostInit+0x6c>)
 80011f8:	f000 fe62 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40011000 	.word	0x40011000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <MX_UART5_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_UART5_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <MX_UART5_Init+0x4c>)
 800121c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001220:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <MX_UART5_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <MX_UART5_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <MX_UART5_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <MX_UART5_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_UART5_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <MX_UART5_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <MX_UART5_Init+0x4c>)
 8001248:	f002 fc26 	bl	8003a98 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001252:	f7ff fd4d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000330 	.word	0x20000330
 8001260:	40005000 	.word	0x40005000

08001264 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART1_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART1_UART_Init+0x4c>)
 800129c:	f002 fbfc 	bl	8003a98 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f7ff fd23 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000378 	.word	0x20000378
 80012b4:	40013800 	.word	0x40013800

080012b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_USART2_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f002 fbd2 	bl	8003a98 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f7ff fcf9 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200003c0 	.word	0x200003c0
 8001308:	40004400 	.word	0x40004400

0800130c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_USART3_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART3_UART_Init+0x4c>)
 8001344:	f002 fba8 	bl	8003a98 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f7ff fccf 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000408 	.word	0x20000408
 800135c:	40004800 	.word	0x40004800

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	@ 0x40
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6b      	ldr	r2, [pc, #428]	@ (800152c <HAL_UART_MspInit+0x1cc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d145      	bne.n	800140e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001382:	4b6b      	ldr	r3, [pc, #428]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	4a6a      	ldr	r2, [pc, #424]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001388:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800138c:	6253      	str	r3, [r2, #36]	@ 0x24
 800138e:	4b68      	ldr	r3, [pc, #416]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001398:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a64      	ldr	r2, [pc, #400]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b5c      	ldr	r3, [pc, #368]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013dc:	2308      	movs	r3, #8
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e4:	4619      	mov	r1, r3
 80013e6:	4853      	ldr	r0, [pc, #332]	@ (8001534 <HAL_UART_MspInit+0x1d4>)
 80013e8:	f000 fd6a 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ec:	2304      	movs	r3, #4
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013fc:	2308      	movs	r3, #8
 80013fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001404:	4619      	mov	r1, r3
 8001406:	484c      	ldr	r0, [pc, #304]	@ (8001538 <HAL_UART_MspInit+0x1d8>)
 8001408:	f000 fd5a 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800140c:	e08a      	b.n	8001524 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a4a      	ldr	r2, [pc, #296]	@ (800153c <HAL_UART_MspInit+0x1dc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d129      	bne.n	800146c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001418:	4b45      	ldr	r3, [pc, #276]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b3f      	ldr	r3, [pc, #252]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	4a3e      	ldr	r2, [pc, #248]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	61d3      	str	r3, [r2, #28]
 800143c:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001448:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145a:	2307      	movs	r3, #7
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001462:	4619      	mov	r1, r3
 8001464:	4836      	ldr	r0, [pc, #216]	@ (8001540 <HAL_UART_MspInit+0x1e0>)
 8001466:	f000 fd2b 	bl	8001ec0 <HAL_GPIO_Init>
}
 800146a:	e05b      	b.n	8001524 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a34      	ldr	r2, [pc, #208]	@ (8001544 <HAL_UART_MspInit+0x1e4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d128      	bne.n	80014c8 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001476:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	6253      	str	r3, [r2, #36]	@ 0x24
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014a6:	2360      	movs	r3, #96	@ 0x60
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b6:	2307      	movs	r3, #7
 80014b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014be:	4619      	mov	r1, r3
 80014c0:	481d      	ldr	r0, [pc, #116]	@ (8001538 <HAL_UART_MspInit+0x1d8>)
 80014c2:	f000 fcfd 	bl	8001ec0 <HAL_GPIO_Init>
}
 80014c6:	e02d      	b.n	8001524 <HAL_UART_MspInit+0x1c4>
  else if(uartHandle->Instance==USART3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_UART_MspInit+0x1e8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d128      	bne.n	8001524 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	6253      	str	r3, [r2, #36]	@ 0x24
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_UART_MspInit+0x1d0>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001514:	2307      	movs	r3, #7
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <HAL_UART_MspInit+0x1d8>)
 8001520:	f000 fcce 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3740      	adds	r7, #64	@ 0x40
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005000 	.word	0x40005000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40004400 	.word	0x40004400
 8001548:	40004800 	.word	0x40004800

0800154c <VAPCARE_VerifyNewPatientRoutine>:
int32_t i32TempLSCont;



void VAPCARE_VerifyNewPatientRoutine(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
//	uint8_t ui8Index;

	if(ui8DisplayDone == FALSE)
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <VAPCARE_VerifyNewPatientRoutine+0x80>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d108      	bne.n	800156a <VAPCARE_VerifyNewPatientRoutine+0x1e>
	{
		LCD_DisplayNewPatientSelection();
 8001558:	f7ff fb20 	bl	8000b9c <LCD_DisplayNewPatientSelection>
		LCD_DisplayNewPatientSelectionMenu(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fb24 	bl	8000baa <LCD_DisplayNewPatientSelectionMenu>
		ui8DisplayDone = TRUE;
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <VAPCARE_VerifyNewPatientRoutine+0x80>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
			}
			ui8DisplayDone = FALSE;
		}

	}
}
 8001568:	e02e      	b.n	80015c8 <VAPCARE_VerifyNewPatientRoutine+0x7c>
		if(KBD_ButtonStatus(BUTTON_UP) == BUTTON_CLICKED)
 800156a:	2002      	movs	r0, #2
 800156c:	f7ff f9d8 	bl	8000920 <KBD_ButtonStatus>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d109      	bne.n	800158a <VAPCARE_VerifyNewPatientRoutine+0x3e>
			ui8NewPatientStatus = TRUE;
 8001576:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <VAPCARE_VerifyNewPatientRoutine+0x84>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
			ui8NewTubeStatus = TRUE;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <VAPCARE_VerifyNewPatientRoutine+0x88>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
			LCD_DisplayNewPatientSelectionMenu(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fb11 	bl	8000baa <LCD_DisplayNewPatientSelectionMenu>
}
 8001588:	e01e      	b.n	80015c8 <VAPCARE_VerifyNewPatientRoutine+0x7c>
		else if(KBD_ButtonStatus(BUTTON_DOWN) == BUTTON_CLICKED)
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff f9c8 	bl	8000920 <KBD_ButtonStatus>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d109      	bne.n	80015aa <VAPCARE_VerifyNewPatientRoutine+0x5e>
			ui8NewPatientStatus = FALSE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <VAPCARE_VerifyNewPatientRoutine+0x84>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
			ui8NewTubeStatus = FALSE;
 800159c:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <VAPCARE_VerifyNewPatientRoutine+0x88>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
			LCD_DisplayNewPatientSelectionMenu(2);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f7ff fb01 	bl	8000baa <LCD_DisplayNewPatientSelectionMenu>
}
 80015a8:	e00e      	b.n	80015c8 <VAPCARE_VerifyNewPatientRoutine+0x7c>
		else if(KBD_ButtonStatus(BUTTON_OK) == BUTTON_CLICKED)
 80015aa:	2004      	movs	r0, #4
 80015ac:	f7ff f9b8 	bl	8000920 <KBD_ButtonStatus>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <VAPCARE_VerifyNewPatientRoutine+0x7c>
			if(ui8NewPatientStatus)
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <VAPCARE_VerifyNewPatientRoutine+0x84>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <VAPCARE_VerifyNewPatientRoutine+0x76>
				VAPCARE_ConfirmNewPatientRoutine();
 80015be:	f000 f80b 	bl	80015d8 <VAPCARE_ConfirmNewPatientRoutine>
			ui8DisplayDone = FALSE;
 80015c2:	4b02      	ldr	r3, [pc, #8]	@ (80015cc <VAPCARE_VerifyNewPatientRoutine+0x80>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000450 	.word	0x20000450
 80015d0:	20000044 	.word	0x20000044
 80015d4:	20000045 	.word	0x20000045

080015d8 <VAPCARE_ConfirmNewPatientRoutine>:

void VAPCARE_ConfirmNewPatientRoutine(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	if(ui8DisplayDone == FALSE)
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <VAPCARE_ConfirmNewPatientRoutine+0x4c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <VAPCARE_ConfirmNewPatientRoutine+0x20>
	{
		LCD_DisplayConfirmNewPatient();
 80015e4:	f7ff fb02 	bl	8000bec <LCD_DisplayConfirmNewPatient>
		ui8DisplayDone = TRUE;
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <VAPCARE_ConfirmNewPatientRoutine+0x4c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 80015ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015f2:	f000 f8ad 	bl	8001750 <HAL_Delay>
		{
			LCD_DisplayFlashErasingScreen();
		}

	}
}
 80015f6:	e013      	b.n	8001620 <VAPCARE_ConfirmNewPatientRoutine+0x48>
		if(KBD_ButtonStatus(BUTTON_BACK) == BUTTON_CLICKED)
 80015f8:	2005      	movs	r0, #5
 80015fa:	f7ff f991 	bl	8000920 <KBD_ButtonStatus>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <VAPCARE_ConfirmNewPatientRoutine+0x38>
			VAPCARE_VerifyNewPatientRoutine();
 8001604:	f7ff ffa2 	bl	800154c <VAPCARE_VerifyNewPatientRoutine>
			ui8DisplayDone = FALSE;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <VAPCARE_ConfirmNewPatientRoutine+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	e007      	b.n	8001620 <VAPCARE_ConfirmNewPatientRoutine+0x48>
		else if(KBD_ButtonStatus(BUTTON_OK) == BUTTON_CLICKED)
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff f985 	bl	8000920 <KBD_ButtonStatus>
 8001616:	4603      	mov	r3, r0
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <VAPCARE_ConfirmNewPatientRoutine+0x48>
			LCD_DisplayFlashErasingScreen();
 800161c:	f7ff faed 	bl	8000bfa <LCD_DisplayFlashErasingScreen>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000450 	.word	0x20000450

08001628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff fc72 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162e:	490c      	ldr	r1, [pc, #48]	@ (8001660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001644:	4c09      	ldr	r4, [pc, #36]	@ (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f002 fc89 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001656:	f7ff fad7 	bl	8000c08 <main>
  bx lr
 800165a:	4770      	bx	lr
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001664:	080052e0 	.word	0x080052e0
  ldr r2, =_sbss
 8001668:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800166c:	200005a0 	.word	0x200005a0

08001670 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_IRQHandler>

08001672 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 fbeb 	bl	8001e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f80e 	bl	80016a4 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e001      	b.n	8001698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001694:	f7ff fbac 	bl	8000df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001698:	79fb      	ldrb	r3, [r7, #7]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_InitTick+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d022      	beq.n	80016fe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_InitTick+0x6c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <HAL_InitTick+0x68>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fbea 	bl	8001ea6 <HAL_SYSTICK_Config>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d809      	bhi.n	80016f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016de:	2200      	movs	r2, #0
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f000 fbc2 	bl	8001e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_InitTick+0x70>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e007      	b.n	8001702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e004      	b.n	8001702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000004c 	.word	0x2000004c
 8001710:	20000040 	.word	0x20000040
 8001714:	20000048 	.word	0x20000048

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_IncTick+0x1c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_IncTick+0x20>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4413      	add	r3, r2
 8001726:	4a03      	ldr	r2, [pc, #12]	@ (8001734 <HAL_IncTick+0x1c>)
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000454 	.word	0x20000454
 8001738:	2000004c 	.word	0x2000004c

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b02      	ldr	r3, [pc, #8]	@ (800174c <HAL_GetTick+0x10>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000454 	.word	0x20000454

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff fff0 	bl	800173c <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d004      	beq.n	8001774 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_Delay+0x40>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001774:	bf00      	nop
 8001776:	f7ff ffe1 	bl	800173c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8f7      	bhi.n	8001776 <HAL_Delay+0x26>
  {
  }
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000004c 	.word	0x2000004c

08001794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e127      	b.n	8001a04 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001a0c <HAL_ADC_Init+0x278>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a8d      	ldr	r2, [pc, #564]	@ (8001a0c <HAL_ADC_Init+0x278>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6213      	str	r3, [r2, #32]
 80017dc:	4b8b      	ldr	r3, [pc, #556]	@ (8001a0c <HAL_ADC_Init+0x278>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fe9d 	bl	8000528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80ff 	bne.w	80019fa <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001800:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001804:	f023 0302 	bic.w	r3, r3, #2
 8001808:	f043 0202 	orr.w	r2, r3, #2
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001810:	4b7f      	ldr	r3, [pc, #508]	@ (8001a10 <HAL_ADC_Init+0x27c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	497c      	ldr	r1, [pc, #496]	@ (8001a10 <HAL_ADC_Init+0x27c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800182a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001832:	4619      	mov	r1, r3
 8001834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001838:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800184e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001854:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800185c:	4619      	mov	r1, r3
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001876:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800187a:	4313      	orrs	r3, r2
 800187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001882:	2b10      	cmp	r3, #16
 8001884:	d007      	beq.n	8001896 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800188e:	4313      	orrs	r3, r2
 8001890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001892:	4313      	orrs	r3, r2
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d04f      	beq.n	8001944 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018aa:	4313      	orrs	r3, r2
 80018ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018b6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6912      	ldr	r2, [r2, #16]
 80018bc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80018c0:	d003      	beq.n	80018ca <HAL_ADC_Init+0x136>
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6912      	ldr	r2, [r2, #16]
 80018c6:	2a01      	cmp	r2, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_ADC_Init+0x13c>
 80018ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_Init+0x13e>
 80018d0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80018d2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d6:	4313      	orrs	r3, r2
 80018d8:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d125      	bne.n	8001930 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d114      	bne.n	8001918 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80018f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	fa92 f2a2 	rbit	r2, r2
 8001900:	617a      	str	r2, [r7, #20]
  return result;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	4093      	lsls	r3, r2
 800190c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001912:	4313      	orrs	r3, r2
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
 8001916:	e00b      	b.n	8001930 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191c:	f043 0220 	orr.w	r2, r3, #32
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <HAL_ADC_Init+0x280>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001940:	430b      	orrs	r3, r1
 8001942:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_ADC_Init+0x284>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001954:	430b      	orrs	r3, r1
 8001956:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001960:	d003      	beq.n	800196a <HAL_ADC_Init+0x1d6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d119      	bne.n	800199e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001970:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	3b01      	subs	r3, #1
 800197a:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800197e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	fa92 f2a2 	rbit	r2, r2
 8001986:	60fa      	str	r2, [r7, #12]
  return result;
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	fa03 f202 	lsl.w	r2, r3, r2
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
 800199c:	e007      	b.n	80019ae <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80019ac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_ADC_Init+0x288>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d10b      	bne.n	80019d6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c8:	f023 0303 	bic.w	r3, r3, #3
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80019d4:	e014      	b.n	8001a00 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	f023 0312 	bic.w	r3, r3, #18
 80019de:	f043 0210 	orr.w	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80019f8:	e002      	b.n	8001a00 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3738      	adds	r7, #56	@ 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40012700 	.word	0x40012700
 8001a14:	fcfc16ff 	.word	0xfcfc16ff
 8001a18:	c0fff189 	.word	0xc0fff189
 8001a1c:	bf80fffe 	.word	0xbf80fffe

08001a20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x20>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e14f      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x2c0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d81c      	bhi.n	8001a8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b05      	subs	r3, #5
 8001a62:	221f      	movs	r2, #31
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b05      	subs	r3, #5
 8001a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a88:	e07e      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d81c      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b23      	subs	r3, #35	@ 0x23
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4019      	ands	r1, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b23      	subs	r3, #35	@ 0x23
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aca:	e05d      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d81c      	bhi.n	8001b0e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b41      	subs	r3, #65	@ 0x41
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4019      	ands	r1, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b41      	subs	r3, #65	@ 0x41
 8001b00:	fa00 f203 	lsl.w	r2, r0, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b0c:	e03c      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b18      	cmp	r3, #24
 8001b14:	d81c      	bhi.n	8001b50 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	3b5f      	subs	r3, #95	@ 0x5f
 8001b28:	221f      	movs	r2, #31
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4019      	ands	r1, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b5f      	subs	r3, #95	@ 0x5f
 8001b42:	fa00 f203 	lsl.w	r2, r0, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b4e:	e01b      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b7d      	subs	r3, #125	@ 0x7d
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b7d      	subs	r3, #125	@ 0x7d
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d81a      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6959      	ldr	r1, [r3, #20]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4019      	ands	r1, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6898      	ldr	r0, [r3, #8]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	e05d      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b13      	cmp	r3, #19
 8001bcc:	d81c      	bhi.n	8001c08 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b1e      	subs	r3, #30
 8001be0:	2207      	movs	r2, #7
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4019      	ands	r1, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6898      	ldr	r0, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
 8001c06:	e03c      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b1d      	cmp	r3, #29
 8001c0e:	d81c      	bhi.n	8001c4a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68d9      	ldr	r1, [r3, #12]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b3c      	subs	r3, #60	@ 0x3c
 8001c22:	2207      	movs	r2, #7
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4019      	ands	r1, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6898      	ldr	r0, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b3c      	subs	r3, #60	@ 0x3c
 8001c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	e01b      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b5a      	subs	r3, #90	@ 0x5a
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4019      	ands	r1, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6898      	ldr	r0, [r3, #8]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	3b5a      	subs	r3, #90	@ 0x5a
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d003      	beq.n	8001c92 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c8e:	2b11      	cmp	r3, #17
 8001c90:	d121      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_ADC_ConfigChannel+0x2cc>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11b      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_ADC_ConfigChannel+0x2cc>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_ADC_ConfigChannel+0x2cc>)
 8001ca4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ca8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d111      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <HAL_ADC_ConfigChannel+0x2d0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <HAL_ADC_ConfigChannel+0x2d4>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	0c9a      	lsrs	r2, r3, #18
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001cc8:	e002      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f9      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40012700 	.word	0x40012700
 8001cf0:	20000040 	.word	0x20000040
 8001cf4:	431bde83 	.word	0x431bde83

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	db0a      	blt.n	8001d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <__NVIC_SetPriority+0x4c>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d84:	e00a      	b.n	8001d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4908      	ldr	r1, [pc, #32]	@ (8001dac <__NVIC_SetPriority+0x50>)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	3b04      	subs	r3, #4
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	440b      	add	r3, r1
 8001d9a:	761a      	strb	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f1c3 0307 	rsb	r3, r3, #7
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	bf28      	it	cs
 8001dce:	2304      	movcs	r3, #4
 8001dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d902      	bls.n	8001de0 <NVIC_EncodePriority+0x30>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3b03      	subs	r3, #3
 8001dde:	e000      	b.n	8001de2 <NVIC_EncodePriority+0x32>
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	43d9      	mvns	r1, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	4313      	orrs	r3, r2
         );
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e24:	d301      	bcc.n	8001e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00f      	b.n	8001e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <SysTick_Config+0x40>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e32:	210f      	movs	r1, #15
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f7ff ff90 	bl	8001d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <SysTick_Config+0x40>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <SysTick_Config+0x40>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff49 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e80:	f7ff ff5e 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f7ff ff90 	bl	8001db0 <NVIC_EncodePriority>
 8001e90:	4602      	mov	r2, r0
 8001e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff5f 	bl	8001d5c <__NVIC_SetPriority>
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffb0 	bl	8001e14 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ed6:	e160      	b.n	800219a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8152 	beq.w	8002194 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d005      	beq.n	8001f08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d130      	bne.n	8001f6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 0201 	and.w	r2, r3, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d017      	beq.n	8001fa6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d123      	bne.n	8001ffa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0203 	and.w	r2, r3, #3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80ac 	beq.w	8002194 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203c:	4b5e      	ldr	r3, [pc, #376]	@ (80021b8 <HAL_GPIO_Init+0x2f8>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a5d      	ldr	r2, [pc, #372]	@ (80021b8 <HAL_GPIO_Init+0x2f8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	4b5b      	ldr	r3, [pc, #364]	@ (80021b8 <HAL_GPIO_Init+0x2f8>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002054:	4a59      	ldr	r2, [pc, #356]	@ (80021bc <HAL_GPIO_Init+0x2fc>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	220f      	movs	r2, #15
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <HAL_GPIO_Init+0x300>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d025      	beq.n	80020cc <HAL_GPIO_Init+0x20c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a50      	ldr	r2, [pc, #320]	@ (80021c4 <HAL_GPIO_Init+0x304>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d01f      	beq.n	80020c8 <HAL_GPIO_Init+0x208>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a4f      	ldr	r2, [pc, #316]	@ (80021c8 <HAL_GPIO_Init+0x308>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d019      	beq.n	80020c4 <HAL_GPIO_Init+0x204>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a4e      	ldr	r2, [pc, #312]	@ (80021cc <HAL_GPIO_Init+0x30c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_Init+0x200>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4d      	ldr	r2, [pc, #308]	@ (80021d0 <HAL_GPIO_Init+0x310>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_Init+0x1fc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4c      	ldr	r2, [pc, #304]	@ (80021d4 <HAL_GPIO_Init+0x314>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0x1f8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4b      	ldr	r2, [pc, #300]	@ (80021d8 <HAL_GPIO_Init+0x318>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_Init+0x1f4>
 80020b0:	2306      	movs	r3, #6
 80020b2:	e00c      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020b4:	2307      	movs	r3, #7
 80020b6:	e00a      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020b8:	2305      	movs	r3, #5
 80020ba:	e008      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020bc:	2304      	movs	r3, #4
 80020be:	e006      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e004      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <HAL_GPIO_Init+0x20e>
 80020cc:	2300      	movs	r3, #0
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	0092      	lsls	r2, r2, #2
 80020d6:	4093      	lsls	r3, r2
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020de:	4937      	ldr	r1, [pc, #220]	@ (80021bc <HAL_GPIO_Init+0x2fc>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ec:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002110:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002116:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800213a:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002140:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002164:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f ae97 	bne.w	8001ed8 <HAL_GPIO_Init+0x18>
  }
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	807b      	strh	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221e:	787b      	ldrb	r3, [r7, #1]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800222a:	e003      	b.n	8002234 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	041a      	lsls	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e12b      	b.n	80024aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fa66 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	@ 0x24
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a4:	f000 fe7c 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 80022a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a81      	ldr	r2, [pc, #516]	@ (80024b4 <HAL_I2C_Init+0x274>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d807      	bhi.n	80022c4 <HAL_I2C_Init+0x84>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <HAL_I2C_Init+0x278>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e006      	b.n	80022d2 <HAL_I2C_Init+0x92>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a7d      	ldr	r2, [pc, #500]	@ (80024bc <HAL_I2C_Init+0x27c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0e7      	b.n	80024aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a78      	ldr	r2, [pc, #480]	@ (80024c0 <HAL_I2C_Init+0x280>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a6a      	ldr	r2, [pc, #424]	@ (80024b4 <HAL_I2C_Init+0x274>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d802      	bhi.n	8002314 <HAL_I2C_Init+0xd4>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	e009      	b.n	8002328 <HAL_I2C_Init+0xe8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	4a69      	ldr	r2, [pc, #420]	@ (80024c4 <HAL_I2C_Init+0x284>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800233a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	495c      	ldr	r1, [pc, #368]	@ (80024b4 <HAL_I2C_Init+0x274>)
 8002344:	428b      	cmp	r3, r1
 8002346:	d819      	bhi.n	800237c <HAL_I2C_Init+0x13c>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e59      	subs	r1, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fbb1 f3f3 	udiv	r3, r1, r3
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800235c:	400b      	ands	r3, r1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_I2C_Init+0x138>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e59      	subs	r1, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002376:	e051      	b.n	800241c <HAL_I2C_Init+0x1dc>
 8002378:	2304      	movs	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x168>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x18e>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x196>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1dc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e31d      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024da:	4b94      	ldr	r3, [pc, #592]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e4:	4b91      	ldr	r3, [pc, #580]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ec:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d07b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d006      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250c:	d10b      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	4b87      	ldr	r3, [pc, #540]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x128>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d166      	bne.n	80025f0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e2f7      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b7f      	ldr	r3, [pc, #508]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e02d      	b.n	8002598 <HAL_RCC_OscConfig+0xd0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x96>
 8002544:	4b79      	ldr	r3, [pc, #484]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a78      	ldr	r2, [pc, #480]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a75      	ldr	r2, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0xd0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0xb8>
 8002566:	4b71      	ldr	r3, [pc, #452]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a70      	ldr	r2, [pc, #448]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b6e      	ldr	r3, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6d      	ldr	r2, [pc, #436]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0xd0>
 8002580:	4b6a      	ldr	r3, [pc, #424]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a69      	ldr	r2, [pc, #420]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b67      	ldr	r3, [pc, #412]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a66      	ldr	r2, [pc, #408]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff f8cc 	bl	800173c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff f8c8 	bl	800173c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	@ 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e2ad      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ba:	4b5c      	ldr	r3, [pc, #368]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff f8b8 	bl	800173c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff f8b4 	bl	800173c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	@ 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e299      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025e2:	4b52      	ldr	r3, [pc, #328]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d05a      	beq.n	80026b4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d119      	bne.n	800263e <HAL_RCC_OscConfig+0x176>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002610:	4b46      	ldr	r3, [pc, #280]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x160>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e276      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b40      	ldr	r3, [pc, #256]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	493d      	ldr	r1, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263c:	e03a      	b.n	80026b4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d020      	beq.n	8002688 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff f876 	bl	800173c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff f872 	bl	800173c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e257      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	4b31      	ldr	r3, [pc, #196]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	492a      	ldr	r1, [pc, #168]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e015      	b.n	80026b4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_RCC_OscConfig+0x268>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff f855 	bl	800173c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002696:	f7ff f851 	bl	800173c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e236      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a8:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b8 	beq.w	8002832 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d170      	bne.n	80027aa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c8:	4b18      	ldr	r3, [pc, #96]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_OscConfig+0x218>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e21a      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d921      	bls.n	8002734 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fc7b 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e208      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4906      	ldr	r1, [pc, #24]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002716:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	4901      	ldr	r1, [pc, #4]	@ (800272c <HAL_RCC_OscConfig+0x264>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
 800272a:	e020      	b.n	800276e <HAL_RCC_OscConfig+0x2a6>
 800272c:	40023800 	.word	0x40023800
 8002730:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002734:	4b99      	ldr	r3, [pc, #612]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4996      	ldr	r1, [pc, #600]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002746:	4b95      	ldr	r3, [pc, #596]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	4991      	ldr	r1, [pc, #580]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fc46 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1d3      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	3301      	adds	r3, #1
 8002776:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800277e:	4a87      	ldr	r2, [pc, #540]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	0912      	lsrs	r2, r2, #4
 8002784:	f002 020f 	and.w	r2, r2, #15
 8002788:	4985      	ldr	r1, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	5c8a      	ldrb	r2, [r1, r2]
 800278c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800278e:	4a85      	ldr	r2, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002792:	4b85      	ldr	r3, [pc, #532]	@ (80029a8 <HAL_RCC_OscConfig+0x4e0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff84 	bl	80016a4 <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d045      	beq.n	8002832 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	e1b5      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d029      	beq.n	8002806 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027b2:	4b7e      	ldr	r3, [pc, #504]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe ffc0 	bl	800173c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c0:	f7fe ffbc 	bl	800173c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1a1      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027d2:	4b72      	ldr	r3, [pc, #456]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027de:	4b6f      	ldr	r3, [pc, #444]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	496c      	ldr	r1, [pc, #432]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4967      	ldr	r1, [pc, #412]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e015      	b.n	8002832 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002806:	4b69      	ldr	r3, [pc, #420]	@ (80029ac <HAL_RCC_OscConfig+0x4e4>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe ff96 	bl	800173c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002814:	f7fe ff92 	bl	800173c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e177      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002826:	4b5d      	ldr	r3, [pc, #372]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d030      	beq.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d016      	beq.n	8002874 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b5a      	ldr	r3, [pc, #360]	@ (80029b0 <HAL_RCC_OscConfig+0x4e8>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7fe ff76 	bl	800173c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe ff72 	bl	800173c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e157      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002866:	4b4d      	ldr	r3, [pc, #308]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x38c>
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002874:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <HAL_RCC_OscConfig+0x4e8>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe ff5f 	bl	800173c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7fe ff5b 	bl	800173c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e140      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002894:	4b41      	ldr	r3, [pc, #260]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80b5 	beq.w	8002a18 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4b37      	ldr	r3, [pc, #220]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	4a36      	ldr	r2, [pc, #216]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80028c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80028ca:	4b34      	ldr	r3, [pc, #208]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d6:	2301      	movs	r3, #1
 80028d8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d118      	bne.n	8002918 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e6:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a32      	ldr	r2, [pc, #200]	@ (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 80028ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f2:	f7fe ff23 	bl	800173c <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7fe ff1f 	bl	800173c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	@ 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e104      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_RCC_OscConfig+0x466>
 8002920:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6353      	str	r3, [r2, #52]	@ 0x34
 800292c:	e02d      	b.n	800298a <HAL_RCC_OscConfig+0x4c2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x488>
 8002936:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	4a18      	ldr	r2, [pc, #96]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 800293c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002940:	6353      	str	r3, [r2, #52]	@ 0x34
 8002942:	4b16      	ldr	r3, [pc, #88]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	4a15      	ldr	r2, [pc, #84]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002948:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800294c:	6353      	str	r3, [r2, #52]	@ 0x34
 800294e:	e01c      	b.n	800298a <HAL_RCC_OscConfig+0x4c2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d10c      	bne.n	8002972 <HAL_RCC_OscConfig+0x4aa>
 8002958:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 800295a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295c:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002962:	6353      	str	r3, [r2, #52]	@ 0x34
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002970:	e00b      	b.n	800298a <HAL_RCC_OscConfig+0x4c2>
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800297c:	6353      	str	r3, [r2, #52]	@ 0x34
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	4a06      	ldr	r2, [pc, #24]	@ (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002988:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe fed3 	bl	800173c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002998:	e019      	b.n	80029ce <HAL_RCC_OscConfig+0x506>
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	08005284 	.word	0x08005284
 80029a4:	20000040 	.word	0x20000040
 80029a8:	20000048 	.word	0x20000048
 80029ac:	42470020 	.word	0x42470020
 80029b0:	42470680 	.word	0x42470680
 80029b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fec0 	bl	800173c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0a3      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ce:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4f0>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe feae 	bl	800173c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe feaa 	bl	800173c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e08d      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029fa:	4b49      	ldr	r3, [pc, #292]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 80029fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b44      	ldr	r3, [pc, #272]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	4a43      	ldr	r2, [pc, #268]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d079      	beq.n	8002b14 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d056      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d13b      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <HAL_RCC_OscConfig+0x65c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe82 	bl	800173c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fe7e 	bl	800173c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e063      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4e:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	430b      	orrs	r3, r1
 8002a72:	492b      	ldr	r1, [pc, #172]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <HAL_RCC_OscConfig+0x65c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fe5d 	bl	800173c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fe59 	bl	800173c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e03e      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x5be>
 8002aa4:	e036      	b.n	8002b14 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x65c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fe46 	bl	800173c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fe42 	bl	800173c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e027      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x5ec>
 8002ad2:	e01f      	b.n	8002b14 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e01a      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <HAL_RCC_OscConfig+0x658>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470060 	.word	0x42470060

08002b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e11a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d919      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x34>
 8002b50:	4b8a      	ldr	r3, [pc, #552]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a89      	ldr	r2, [pc, #548]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b87      	ldr	r3, [pc, #540]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 0201 	bic.w	r2, r3, #1
 8002b64:	4985      	ldr	r1, [pc, #532]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6c:	4b83      	ldr	r3, [pc, #524]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0f9      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	497a      	ldr	r1, [pc, #488]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808e 	beq.w	8002cc6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb2:	4b73      	ldr	r3, [pc, #460]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d121      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0d7      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bca:	4b6d      	ldr	r3, [pc, #436]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0cb      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0bf      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e0b7      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b5f      	ldr	r3, [pc, #380]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	495c      	ldr	r1, [pc, #368]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fd92 	bl	800173c <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fd8a 	bl	800173c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e09b      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c3a:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d1ee      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xfc>
 8002c46:	e03e      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe fd73 	bl	800173c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e084      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b45      	ldr	r3, [pc, #276]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d1ee      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x12a>
 8002c74:	e027      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d11d      	bne.n	8002cba <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7fe fd5c 	bl	800173c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e06d      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x158>
 8002ca2:	e010      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fd4a 	bl	800173c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e05b      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d219      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x1be>
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a27      	ldr	r2, [pc, #156]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	4923      	ldr	r1, [pc, #140]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_RCC_ClockConfig+0x254>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e034      	b.n	8002d72 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4917      	ldr	r1, [pc, #92]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d32:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490f      	ldr	r1, [pc, #60]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f823 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <HAL_RCC_ClockConfig+0x258>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490b      	ldr	r1, [pc, #44]	@ (8002d84 <HAL_RCC_ClockConfig+0x25c>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x260>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_RCC_ClockConfig+0x264>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fc9c 	bl	80016a4 <HAL_InitTick>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d70:	7afb      	ldrb	r3, [r7, #11]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005284 	.word	0x08005284
 8002d88:	20000040 	.word	0x20000040
 8002d8c:	20000048 	.word	0x20000048

08002d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b092      	sub	sp, #72	@ 0x48
 8002d96:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d98:	4b79      	ldr	r3, [pc, #484]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	f200 80d5 	bhi.w	8002f58 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x28>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x2e>
 8002db6:	e0cf      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b72      	ldr	r3, [pc, #456]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002dba:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002dbc:	e0da      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b71      	ldr	r3, [pc, #452]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002dc0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002dc2:	e0d7      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	4b6e      	ldr	r3, [pc, #440]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd4:	0d9b      	lsrs	r3, r3, #22
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dde:	4b68      	ldr	r3, [pc, #416]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d05d      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	4611      	mov	r1, r2
 8002df2:	4604      	mov	r4, r0
 8002df4:	460d      	mov	r5, r1
 8002df6:	4622      	mov	r2, r4
 8002df8:	462b      	mov	r3, r5
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	0159      	lsls	r1, r3, #5
 8002e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e08:	0150      	lsls	r0, r2, #5
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4621      	mov	r1, r4
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	6139      	str	r1, [r7, #16]
 8002e14:	4629      	mov	r1, r5
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e28:	4659      	mov	r1, fp
 8002e2a:	018b      	lsls	r3, r1, #6
 8002e2c:	4651      	mov	r1, sl
 8002e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e32:	4651      	mov	r1, sl
 8002e34:	018a      	lsls	r2, r1, #6
 8002e36:	46d4      	mov	ip, sl
 8002e38:	ebb2 080c 	subs.w	r8, r2, ip
 8002e3c:	4659      	mov	r1, fp
 8002e3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb18 0303 	adds.w	r3, r8, r3
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	462b      	mov	r3, r5
 8002e64:	eb49 0303 	adc.w	r3, r9, r3
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e76:	4629      	mov	r1, r5
 8002e78:	028b      	lsls	r3, r1, #10
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4604      	mov	r4, r0
 8002e80:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002e84:	4601      	mov	r1, r0
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e98:	f7fd f978 	bl	800018c <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea4:	e055      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eb2:	4642      	mov	r2, r8
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec4:	0150      	lsls	r0, r2, #5
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	46c4      	mov	ip, r8
 8002ecc:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	468c      	mov	ip, r1
 8002ed6:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eea:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eee:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef2:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	00eb      	lsls	r3, r5, #3
 8002f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f04:	00e2      	lsls	r2, r4, #3
 8002f06:	4614      	mov	r4, r2
 8002f08:	461d      	mov	r5, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	18e3      	adds	r3, r4, r3
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	460b      	mov	r3, r1
 8002f12:	eb45 0303 	adc.w	r3, r5, r3
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f24:	4629      	mov	r1, r5
 8002f26:	028b      	lsls	r3, r1, #10
 8002f28:	4620      	mov	r0, r4
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f32:	4601      	mov	r1, r0
 8002f34:	028a      	lsls	r2, r1, #10
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	61fa      	str	r2, [r7, #28]
 8002f42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f46:	f7fd f921 	bl	800018c <__aeabi_uldivmod>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8002f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f54:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f56:	e00d      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	0b5b      	lsrs	r3, r3, #13
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	3301      	adds	r3, #1
 8002f68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3748      	adds	r7, #72	@ 0x48
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	08005278 	.word	0x08005278

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b02      	ldr	r3, [pc, #8]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000040 	.word	0x20000040

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fa4:	f7ff fff2 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08005294 	.word	0x08005294

08002fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fcc:	f7ff ffde 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	08005294 	.word	0x08005294

08002ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ffc:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d12c      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003008:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003014:	4b24      	ldr	r3, [pc, #144]	@ (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e016      	b.n	800304e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302a:	6253      	str	r3, [r2, #36]	@ 0x24
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003040:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003054:	d105      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800305c:	d101      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800305e:	2301      	movs	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 0201 	bic.w	r2, r3, #1
 800307c:	490b      	ldr	r1, [pc, #44]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07b      	b.n	80031ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030d2:	d009      	beq.n	80030e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
 80030da:	e005      	b.n	80030e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fe30 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	ea42 0103 	orr.w	r1, r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	f003 0104 	and.w	r1, r3, #4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0210 	and.w	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e031      	b.n	8003238 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd ff93 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 f9ef 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e031      	b.n	80032b6 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f829 	bl	80032be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f000 f9b0 	bl	80035e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e0ae      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f200 809f 	bhi.w	800343c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003339 	.word	0x08003339
 8003308:	0800343d 	.word	0x0800343d
 800330c:	0800343d 	.word	0x0800343d
 8003310:	0800343d 	.word	0x0800343d
 8003314:	08003379 	.word	0x08003379
 8003318:	0800343d 	.word	0x0800343d
 800331c:	0800343d 	.word	0x0800343d
 8003320:	0800343d 	.word	0x0800343d
 8003324:	080033bb 	.word	0x080033bb
 8003328:	0800343d 	.word	0x0800343d
 800332c:	0800343d 	.word	0x0800343d
 8003330:	0800343d 	.word	0x0800343d
 8003334:	080033fb 	.word	0x080033fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f9c0 	bl	80036c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0208 	orr.w	r2, r2, #8
 8003352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6999      	ldr	r1, [r3, #24]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	619a      	str	r2, [r3, #24]
      break;
 8003376:	e064      	b.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f9dc 	bl	800373c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6999      	ldr	r1, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	021a      	lsls	r2, r3, #8
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]
      break;
 80033b8:	e043      	b.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f9f9 	bl	80037b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0208 	orr.w	r2, r2, #8
 80033d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0204 	bic.w	r2, r2, #4
 80033e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69d9      	ldr	r1, [r3, #28]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	61da      	str	r2, [r3, #28]
      break;
 80033f8:	e023      	b.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa16 	bl	8003832 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69d9      	ldr	r1, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	021a      	lsls	r2, r3, #8
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	61da      	str	r2, [r3, #28]
      break;
 800343a:	e002      	b.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	75fb      	strb	r3, [r7, #23]
      break;
 8003440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIM_ConfigClockSource+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e0b4      	b.n	80035da <HAL_TIM_ConfigClockSource+0x186>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800348e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a8:	d03e      	beq.n	8003528 <HAL_TIM_ConfigClockSource+0xd4>
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ae:	f200 8087 	bhi.w	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b6:	f000 8086 	beq.w	80035c6 <HAL_TIM_ConfigClockSource+0x172>
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034be:	d87f      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b70      	cmp	r3, #112	@ 0x70
 80034c2:	d01a      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0xa6>
 80034c4:	2b70      	cmp	r3, #112	@ 0x70
 80034c6:	d87b      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b60      	cmp	r3, #96	@ 0x60
 80034ca:	d050      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x11a>
 80034cc:	2b60      	cmp	r3, #96	@ 0x60
 80034ce:	d877      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b50      	cmp	r3, #80	@ 0x50
 80034d2:	d03c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0xfa>
 80034d4:	2b50      	cmp	r3, #80	@ 0x50
 80034d6:	d873      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b40      	cmp	r3, #64	@ 0x40
 80034da:	d058      	beq.n	800358e <HAL_TIM_ConfigClockSource+0x13a>
 80034dc:	2b40      	cmp	r3, #64	@ 0x40
 80034de:	d86f      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b30      	cmp	r3, #48	@ 0x30
 80034e2:	d064      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b30      	cmp	r3, #48	@ 0x30
 80034e6:	d86b      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d060      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d867      	bhi.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d05c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x15a>
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d05a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0x15a>
 80034f8:	e062      	b.n	80035c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800350a:	f000 fa47 	bl	800399c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800351c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	609a      	str	r2, [r3, #8]
      break;
 8003526:	e04f      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003538:	f000 fa30 	bl	800399c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800354a:	609a      	str	r2, [r3, #8]
      break;
 800354c:	e03c      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	f000 f9a7 	bl	80038ae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2150      	movs	r1, #80	@ 0x50
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f9fe 	bl	8003968 <TIM_ITRx_SetConfig>
      break;
 800356c:	e02c      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800357a:	461a      	mov	r2, r3
 800357c:	f000 f9c5 	bl	800390a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2160      	movs	r1, #96	@ 0x60
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f9ee 	bl	8003968 <TIM_ITRx_SetConfig>
      break;
 800358c:	e01c      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800359a:	461a      	mov	r2, r3
 800359c:	f000 f987 	bl	80038ae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2140      	movs	r1, #64	@ 0x40
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f9de 	bl	8003968 <TIM_ITRx_SetConfig>
      break;
 80035ac:	e00c      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f000 f9d5 	bl	8003968 <TIM_ITRx_SetConfig>
      break;
 80035be:	e003      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      break;
 80035c4:	e000      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fa:	d00f      	beq.n	800361c <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <TIM_Base_SetConfig+0xc8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2a      	ldr	r2, [pc, #168]	@ (80036b0 <TIM_Base_SetConfig+0xcc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a29      	ldr	r2, [pc, #164]	@ (80036b4 <TIM_Base_SetConfig+0xd0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0x38>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a28      	ldr	r2, [pc, #160]	@ (80036b8 <TIM_Base_SetConfig+0xd4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d017      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1c      	ldr	r2, [pc, #112]	@ (80036ac <TIM_Base_SetConfig+0xc8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1b      	ldr	r2, [pc, #108]	@ (80036b0 <TIM_Base_SetConfig+0xcc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <TIM_Base_SetConfig+0xd0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a19      	ldr	r2, [pc, #100]	@ (80036b8 <TIM_Base_SetConfig+0xd4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <TIM_Base_SetConfig+0xd8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x82>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a17      	ldr	r2, [pc, #92]	@ (80036c0 <TIM_Base_SetConfig+0xdc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	615a      	str	r2, [r3, #20]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40010800 	.word	0x40010800
 80036bc:	40010c00 	.word	0x40010c00
 80036c0:	40011000 	.word	0x40011000

080036c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 0201 	bic.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 0302 	bic.w	r3, r3, #2
 800370c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 0210 	bic.w	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0320 	bic.w	r3, r3, #32
 8003786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003860:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003868:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	031b      	lsls	r3, r3, #12
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b087      	sub	sp, #28
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 0201 	bic.w	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 030a 	bic.w	r3, r3, #10
 80038ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 0210 	bic.w	r2, r3, #16
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	031b      	lsls	r3, r3, #12
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003946:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	f043 0307 	orr.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	609a      	str	r2, [r3, #8]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	431a      	orrs	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	609a      	str	r2, [r3, #8]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e046      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40010800 	.word	0x40010800

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e042      	b.n	8003b30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd fc4e 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	@ 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f91d 	bl	8003d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	@ 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d16d      	bne.n	8003c34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Transmit+0x2c>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e066      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2221      	movs	r2, #33	@ 0x21
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fde1 	bl	800173c <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b90:	d108      	bne.n	8003ba4 <HAL_UART_Transmit+0x6c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e003      	b.n	8003bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bac:	e02a      	b.n	8003c04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	@ 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f840 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e036      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1cf      	bne.n	8003bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	@ 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f810 	bl	8003c3e <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e006      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b090      	sub	sp, #64	@ 0x40
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4e:	e050      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d04c      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5e:	f7fd fd6d 	bl	800173c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d241      	bcs.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	330c      	adds	r3, #12
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c8e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e5      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cc2:	623a      	str	r2, [r7, #32]
 8003cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d09f      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3740      	adds	r7, #64	@ 0x40
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003d5c:	f023 030c 	bic.w	r3, r3, #12
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a55      	ldr	r2, [pc, #340]	@ (8003edc <UART_SetConfig+0x1c0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d103      	bne.n	8003d92 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d8a:	f7ff f91d 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	e002      	b.n	8003d98 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7ff f905 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8003d96:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da0:	d14c      	bne.n	8003e3c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009a      	lsls	r2, r3, #2
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	4a49      	ldr	r2, [pc, #292]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	0119      	lsls	r1, r3, #4
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd8:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003dda:	fba3 0302 	umull	r0, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2064      	movs	r0, #100	@ 0x64
 8003de2:	fb00 f303 	mul.w	r3, r0, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	3332      	adds	r3, #50	@ 0x32
 8003dec:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003dfa:	4419      	add	r1, r3
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009a      	lsls	r2, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e12:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003e14:	fba3 0302 	umull	r0, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2064      	movs	r0, #100	@ 0x64
 8003e1c:	fb00 f303 	mul.w	r3, r0, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	3332      	adds	r3, #50	@ 0x32
 8003e26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 0207 	and.w	r2, r3, #7
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	440a      	add	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e3a:	e04a      	b.n	8003ed2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009a      	lsls	r2, r3, #2
 8003e46:	441a      	add	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	0119      	lsls	r1, r3, #4
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	441a      	add	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e72:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003e74:	fba3 0302 	umull	r0, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2064      	movs	r0, #100	@ 0x64
 8003e7c:	fb00 f303 	mul.w	r3, r0, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	3332      	adds	r3, #50	@ 0x32
 8003e86:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e92:	4419      	add	r1, r3
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009a      	lsls	r2, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003eac:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2064      	movs	r0, #100	@ 0x64
 8003eb4:	fb00 f303 	mul.w	r3, r0, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	@ 0x32
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <UART_SetConfig+0x1c4>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	440a      	add	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <sniprintf>:
 8003ee4:	b40c      	push	{r2, r3}
 8003ee6:	b530      	push	{r4, r5, lr}
 8003ee8:	4b17      	ldr	r3, [pc, #92]	@ (8003f48 <sniprintf+0x64>)
 8003eea:	1e0c      	subs	r4, r1, #0
 8003eec:	681d      	ldr	r5, [r3, #0]
 8003eee:	b09d      	sub	sp, #116	@ 0x74
 8003ef0:	da08      	bge.n	8003f04 <sniprintf+0x20>
 8003ef2:	238b      	movs	r3, #139	@ 0x8b
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	b01d      	add	sp, #116	@ 0x74
 8003efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f00:	b002      	add	sp, #8
 8003f02:	4770      	bx	lr
 8003f04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f0c:	bf0c      	ite	eq
 8003f0e:	4623      	moveq	r3, r4
 8003f10:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	9307      	str	r3, [sp, #28]
 8003f18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f1c:	9002      	str	r0, [sp, #8]
 8003f1e:	9006      	str	r0, [sp, #24]
 8003f20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f24:	4628      	mov	r0, r5
 8003f26:	ab21      	add	r3, sp, #132	@ 0x84
 8003f28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f2a:	a902      	add	r1, sp, #8
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	f000 f993 	bl	8004258 <_svfiprintf_r>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	bfbc      	itt	lt
 8003f36:	238b      	movlt	r3, #139	@ 0x8b
 8003f38:	602b      	strlt	r3, [r5, #0]
 8003f3a:	2c00      	cmp	r4, #0
 8003f3c:	d0dd      	beq.n	8003efa <sniprintf+0x16>
 8003f3e:	2200      	movs	r2, #0
 8003f40:	9b02      	ldr	r3, [sp, #8]
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e7d9      	b.n	8003efa <sniprintf+0x16>
 8003f46:	bf00      	nop
 8003f48:	20000050 	.word	0x20000050

08003f4c <memset>:
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4402      	add	r2, r0
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d100      	bne.n	8003f56 <memset+0xa>
 8003f54:	4770      	bx	lr
 8003f56:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5a:	e7f9      	b.n	8003f50 <memset+0x4>

08003f5c <__errno>:
 8003f5c:	4b01      	ldr	r3, [pc, #4]	@ (8003f64 <__errno+0x8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000050 	.word	0x20000050

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	4d0c      	ldr	r5, [pc, #48]	@ (8003fa0 <__libc_init_array+0x38>)
 8003f6e:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa4 <__libc_init_array+0x3c>)
 8003f70:	1b64      	subs	r4, r4, r5
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	f000 fc78 	bl	800486c <_init>
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	4d0a      	ldr	r5, [pc, #40]	@ (8003fa8 <__libc_init_array+0x40>)
 8003f80:	4c0a      	ldr	r4, [pc, #40]	@ (8003fac <__libc_init_array+0x44>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	42a6      	cmp	r6, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f90:	4798      	blx	r3
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9a:	4798      	blx	r3
 8003f9c:	3601      	adds	r6, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	080052d8 	.word	0x080052d8
 8003fa4:	080052d8 	.word	0x080052d8
 8003fa8:	080052d8 	.word	0x080052d8
 8003fac:	080052dc 	.word	0x080052dc

08003fb0 <__retarget_lock_acquire_recursive>:
 8003fb0:	4770      	bx	lr

08003fb2 <__retarget_lock_release_recursive>:
 8003fb2:	4770      	bx	lr

08003fb4 <_free_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d040      	beq.n	800403e <_free_r+0x8a>
 8003fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc0:	1f0c      	subs	r4, r1, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bfb8      	it	lt
 8003fc6:	18e4      	addlt	r4, r4, r3
 8003fc8:	f000 f8de 	bl	8004188 <__malloc_lock>
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <_free_r+0x8c>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	b933      	cbnz	r3, 8003fe0 <_free_r+0x2c>
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6014      	str	r4, [r2, #0]
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fdc:	f000 b8da 	b.w	8004194 <__malloc_unlock>
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	d908      	bls.n	8003ff6 <_free_r+0x42>
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	1821      	adds	r1, r4, r0
 8003fe8:	428b      	cmp	r3, r1
 8003fea:	bf01      	itttt	eq
 8003fec:	6819      	ldreq	r1, [r3, #0]
 8003fee:	685b      	ldreq	r3, [r3, #4]
 8003ff0:	1809      	addeq	r1, r1, r0
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	e7ed      	b.n	8003fd2 <_free_r+0x1e>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b10b      	cbz	r3, 8004000 <_free_r+0x4c>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d9fa      	bls.n	8003ff6 <_free_r+0x42>
 8004000:	6811      	ldr	r1, [r2, #0]
 8004002:	1850      	adds	r0, r2, r1
 8004004:	42a0      	cmp	r0, r4
 8004006:	d10b      	bne.n	8004020 <_free_r+0x6c>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	4401      	add	r1, r0
 800400c:	1850      	adds	r0, r2, r1
 800400e:	4283      	cmp	r3, r0
 8004010:	6011      	str	r1, [r2, #0]
 8004012:	d1e0      	bne.n	8003fd6 <_free_r+0x22>
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4408      	add	r0, r1
 800401a:	6010      	str	r0, [r2, #0]
 800401c:	6053      	str	r3, [r2, #4]
 800401e:	e7da      	b.n	8003fd6 <_free_r+0x22>
 8004020:	d902      	bls.n	8004028 <_free_r+0x74>
 8004022:	230c      	movs	r3, #12
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	e7d6      	b.n	8003fd6 <_free_r+0x22>
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	1821      	adds	r1, r4, r0
 800402c:	428b      	cmp	r3, r1
 800402e:	bf01      	itttt	eq
 8004030:	6819      	ldreq	r1, [r3, #0]
 8004032:	685b      	ldreq	r3, [r3, #4]
 8004034:	1809      	addeq	r1, r1, r0
 8004036:	6021      	streq	r1, [r4, #0]
 8004038:	6063      	str	r3, [r4, #4]
 800403a:	6054      	str	r4, [r2, #4]
 800403c:	e7cb      	b.n	8003fd6 <_free_r+0x22>
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	2000059c 	.word	0x2000059c

08004044 <sbrk_aligned>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4e0f      	ldr	r6, [pc, #60]	@ (8004084 <sbrk_aligned+0x40>)
 8004048:	460c      	mov	r4, r1
 800404a:	6831      	ldr	r1, [r6, #0]
 800404c:	4605      	mov	r5, r0
 800404e:	b911      	cbnz	r1, 8004056 <sbrk_aligned+0x12>
 8004050:	f000 fbaa 	bl	80047a8 <_sbrk_r>
 8004054:	6030      	str	r0, [r6, #0]
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 fba5 	bl	80047a8 <_sbrk_r>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d103      	bne.n	800406a <sbrk_aligned+0x26>
 8004062:	f04f 34ff 	mov.w	r4, #4294967295
 8004066:	4620      	mov	r0, r4
 8004068:	bd70      	pop	{r4, r5, r6, pc}
 800406a:	1cc4      	adds	r4, r0, #3
 800406c:	f024 0403 	bic.w	r4, r4, #3
 8004070:	42a0      	cmp	r0, r4
 8004072:	d0f8      	beq.n	8004066 <sbrk_aligned+0x22>
 8004074:	1a21      	subs	r1, r4, r0
 8004076:	4628      	mov	r0, r5
 8004078:	f000 fb96 	bl	80047a8 <_sbrk_r>
 800407c:	3001      	adds	r0, #1
 800407e:	d1f2      	bne.n	8004066 <sbrk_aligned+0x22>
 8004080:	e7ef      	b.n	8004062 <sbrk_aligned+0x1e>
 8004082:	bf00      	nop
 8004084:	20000598 	.word	0x20000598

08004088 <_malloc_r>:
 8004088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800408c:	1ccd      	adds	r5, r1, #3
 800408e:	f025 0503 	bic.w	r5, r5, #3
 8004092:	3508      	adds	r5, #8
 8004094:	2d0c      	cmp	r5, #12
 8004096:	bf38      	it	cc
 8004098:	250c      	movcc	r5, #12
 800409a:	2d00      	cmp	r5, #0
 800409c:	4606      	mov	r6, r0
 800409e:	db01      	blt.n	80040a4 <_malloc_r+0x1c>
 80040a0:	42a9      	cmp	r1, r5
 80040a2:	d904      	bls.n	80040ae <_malloc_r+0x26>
 80040a4:	230c      	movs	r3, #12
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	2000      	movs	r0, #0
 80040aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004184 <_malloc_r+0xfc>
 80040b2:	f000 f869 	bl	8004188 <__malloc_lock>
 80040b6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ba:	461c      	mov	r4, r3
 80040bc:	bb44      	cbnz	r4, 8004110 <_malloc_r+0x88>
 80040be:	4629      	mov	r1, r5
 80040c0:	4630      	mov	r0, r6
 80040c2:	f7ff ffbf 	bl	8004044 <sbrk_aligned>
 80040c6:	1c43      	adds	r3, r0, #1
 80040c8:	4604      	mov	r4, r0
 80040ca:	d158      	bne.n	800417e <_malloc_r+0xf6>
 80040cc:	f8d8 4000 	ldr.w	r4, [r8]
 80040d0:	4627      	mov	r7, r4
 80040d2:	2f00      	cmp	r7, #0
 80040d4:	d143      	bne.n	800415e <_malloc_r+0xd6>
 80040d6:	2c00      	cmp	r4, #0
 80040d8:	d04b      	beq.n	8004172 <_malloc_r+0xea>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	4639      	mov	r1, r7
 80040de:	4630      	mov	r0, r6
 80040e0:	eb04 0903 	add.w	r9, r4, r3
 80040e4:	f000 fb60 	bl	80047a8 <_sbrk_r>
 80040e8:	4581      	cmp	r9, r0
 80040ea:	d142      	bne.n	8004172 <_malloc_r+0xea>
 80040ec:	6821      	ldr	r1, [r4, #0]
 80040ee:	4630      	mov	r0, r6
 80040f0:	1a6d      	subs	r5, r5, r1
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7ff ffa6 	bl	8004044 <sbrk_aligned>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d03a      	beq.n	8004172 <_malloc_r+0xea>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	442b      	add	r3, r5
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	f8d8 3000 	ldr.w	r3, [r8]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	bb62      	cbnz	r2, 8004164 <_malloc_r+0xdc>
 800410a:	f8c8 7000 	str.w	r7, [r8]
 800410e:	e00f      	b.n	8004130 <_malloc_r+0xa8>
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	1b52      	subs	r2, r2, r5
 8004114:	d420      	bmi.n	8004158 <_malloc_r+0xd0>
 8004116:	2a0b      	cmp	r2, #11
 8004118:	d917      	bls.n	800414a <_malloc_r+0xc2>
 800411a:	1961      	adds	r1, r4, r5
 800411c:	42a3      	cmp	r3, r4
 800411e:	6025      	str	r5, [r4, #0]
 8004120:	bf18      	it	ne
 8004122:	6059      	strne	r1, [r3, #4]
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	bf08      	it	eq
 8004128:	f8c8 1000 	streq.w	r1, [r8]
 800412c:	5162      	str	r2, [r4, r5]
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f82f 	bl	8004194 <__malloc_unlock>
 8004136:	f104 000b 	add.w	r0, r4, #11
 800413a:	1d23      	adds	r3, r4, #4
 800413c:	f020 0007 	bic.w	r0, r0, #7
 8004140:	1ac2      	subs	r2, r0, r3
 8004142:	bf1c      	itt	ne
 8004144:	1a1b      	subne	r3, r3, r0
 8004146:	50a3      	strne	r3, [r4, r2]
 8004148:	e7af      	b.n	80040aa <_malloc_r+0x22>
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	42a3      	cmp	r3, r4
 800414e:	bf0c      	ite	eq
 8004150:	f8c8 2000 	streq.w	r2, [r8]
 8004154:	605a      	strne	r2, [r3, #4]
 8004156:	e7eb      	b.n	8004130 <_malloc_r+0xa8>
 8004158:	4623      	mov	r3, r4
 800415a:	6864      	ldr	r4, [r4, #4]
 800415c:	e7ae      	b.n	80040bc <_malloc_r+0x34>
 800415e:	463c      	mov	r4, r7
 8004160:	687f      	ldr	r7, [r7, #4]
 8004162:	e7b6      	b.n	80040d2 <_malloc_r+0x4a>
 8004164:	461a      	mov	r2, r3
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	42a3      	cmp	r3, r4
 800416a:	d1fb      	bne.n	8004164 <_malloc_r+0xdc>
 800416c:	2300      	movs	r3, #0
 800416e:	6053      	str	r3, [r2, #4]
 8004170:	e7de      	b.n	8004130 <_malloc_r+0xa8>
 8004172:	230c      	movs	r3, #12
 8004174:	4630      	mov	r0, r6
 8004176:	6033      	str	r3, [r6, #0]
 8004178:	f000 f80c 	bl	8004194 <__malloc_unlock>
 800417c:	e794      	b.n	80040a8 <_malloc_r+0x20>
 800417e:	6005      	str	r5, [r0, #0]
 8004180:	e7d6      	b.n	8004130 <_malloc_r+0xa8>
 8004182:	bf00      	nop
 8004184:	2000059c 	.word	0x2000059c

08004188 <__malloc_lock>:
 8004188:	4801      	ldr	r0, [pc, #4]	@ (8004190 <__malloc_lock+0x8>)
 800418a:	f7ff bf11 	b.w	8003fb0 <__retarget_lock_acquire_recursive>
 800418e:	bf00      	nop
 8004190:	20000594 	.word	0x20000594

08004194 <__malloc_unlock>:
 8004194:	4801      	ldr	r0, [pc, #4]	@ (800419c <__malloc_unlock+0x8>)
 8004196:	f7ff bf0c 	b.w	8003fb2 <__retarget_lock_release_recursive>
 800419a:	bf00      	nop
 800419c:	20000594 	.word	0x20000594

080041a0 <__ssputs_r>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	461f      	mov	r7, r3
 80041a6:	688e      	ldr	r6, [r1, #8]
 80041a8:	4682      	mov	sl, r0
 80041aa:	42be      	cmp	r6, r7
 80041ac:	460c      	mov	r4, r1
 80041ae:	4690      	mov	r8, r2
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	d82d      	bhi.n	8004210 <__ssputs_r+0x70>
 80041b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041bc:	d026      	beq.n	800420c <__ssputs_r+0x6c>
 80041be:	6965      	ldr	r5, [r4, #20]
 80041c0:	6909      	ldr	r1, [r1, #16]
 80041c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c6:	eba3 0901 	sub.w	r9, r3, r1
 80041ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ce:	1c7b      	adds	r3, r7, #1
 80041d0:	444b      	add	r3, r9
 80041d2:	106d      	asrs	r5, r5, #1
 80041d4:	429d      	cmp	r5, r3
 80041d6:	bf38      	it	cc
 80041d8:	461d      	movcc	r5, r3
 80041da:	0553      	lsls	r3, r2, #21
 80041dc:	d527      	bpl.n	800422e <__ssputs_r+0x8e>
 80041de:	4629      	mov	r1, r5
 80041e0:	f7ff ff52 	bl	8004088 <_malloc_r>
 80041e4:	4606      	mov	r6, r0
 80041e6:	b360      	cbz	r0, 8004242 <__ssputs_r+0xa2>
 80041e8:	464a      	mov	r2, r9
 80041ea:	6921      	ldr	r1, [r4, #16]
 80041ec:	f000 fafa 	bl	80047e4 <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	444e      	add	r6, r9
 8004200:	6026      	str	r6, [r4, #0]
 8004202:	463e      	mov	r6, r7
 8004204:	6165      	str	r5, [r4, #20]
 8004206:	eba5 0509 	sub.w	r5, r5, r9
 800420a:	60a5      	str	r5, [r4, #8]
 800420c:	42be      	cmp	r6, r7
 800420e:	d900      	bls.n	8004212 <__ssputs_r+0x72>
 8004210:	463e      	mov	r6, r7
 8004212:	4632      	mov	r2, r6
 8004214:	4641      	mov	r1, r8
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	f000 faac 	bl	8004774 <memmove>
 800421c:	2000      	movs	r0, #0
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	1b9b      	subs	r3, r3, r6
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	4433      	add	r3, r6
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422e:	462a      	mov	r2, r5
 8004230:	f000 fae6 	bl	8004800 <_realloc_r>
 8004234:	4606      	mov	r6, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	d1e0      	bne.n	80041fc <__ssputs_r+0x5c>
 800423a:	4650      	mov	r0, sl
 800423c:	6921      	ldr	r1, [r4, #16]
 800423e:	f7ff feb9 	bl	8003fb4 <_free_r>
 8004242:	230c      	movs	r3, #12
 8004244:	f8ca 3000 	str.w	r3, [sl]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	e7e9      	b.n	800422a <__ssputs_r+0x8a>
	...

08004258 <_svfiprintf_r>:
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	4698      	mov	r8, r3
 800425e:	898b      	ldrh	r3, [r1, #12]
 8004260:	4607      	mov	r7, r0
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	460d      	mov	r5, r1
 8004266:	4614      	mov	r4, r2
 8004268:	b09d      	sub	sp, #116	@ 0x74
 800426a:	d510      	bpl.n	800428e <_svfiprintf_r+0x36>
 800426c:	690b      	ldr	r3, [r1, #16]
 800426e:	b973      	cbnz	r3, 800428e <_svfiprintf_r+0x36>
 8004270:	2140      	movs	r1, #64	@ 0x40
 8004272:	f7ff ff09 	bl	8004088 <_malloc_r>
 8004276:	6028      	str	r0, [r5, #0]
 8004278:	6128      	str	r0, [r5, #16]
 800427a:	b930      	cbnz	r0, 800428a <_svfiprintf_r+0x32>
 800427c:	230c      	movs	r3, #12
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	b01d      	add	sp, #116	@ 0x74
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	2340      	movs	r3, #64	@ 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	@ 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004298:	2330      	movs	r3, #48	@ 0x30
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800443c <_svfiprintf_r+0x1e4>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x60>
 80042b4:	2a25      	cmp	r2, #37	@ 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x54>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7e>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6b 	bl	80041a0 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80a7 	beq.w	800441e <_svfiprintf_r+0x1c6>
 80042d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 809f 	beq.w	800441e <_svfiprintf_r+0x1c6>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	484e      	ldr	r0, [pc, #312]	@ (800443c <_svfiprintf_r+0x1e4>)
 8004302:	f000 fa61 	bl	80047c8 <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xea>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	@ 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	@ 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xfa>
 8004326:	4654      	mov	r4, sl
 8004328:	2000      	movs	r0, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	@ 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94b      	bls.n	80043d4 <_svfiprintf_r+0x17c>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x114>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x114>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	46a2      	mov	sl, r4
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0xa0>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004370:	d10a      	bne.n	8004388 <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	@ 0x2a
 8004376:	d132      	bne.n	80043de <_svfiprintf_r+0x186>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	3402      	adds	r4, #2
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9203      	str	r2, [sp, #12]
 8004382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004386:	9305      	str	r3, [sp, #20]
 8004388:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004440 <_svfiprintf_r+0x1e8>
 800438c:	2203      	movs	r2, #3
 800438e:	4650      	mov	r0, sl
 8004390:	7821      	ldrb	r1, [r4, #0]
 8004392:	f000 fa19 	bl	80047c8 <memchr>
 8004396:	b138      	cbz	r0, 80043a8 <_svfiprintf_r+0x150>
 8004398:	2240      	movs	r2, #64	@ 0x40
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	eba0 000a 	sub.w	r0, r0, sl
 80043a0:	4082      	lsls	r2, r0
 80043a2:	4313      	orrs	r3, r2
 80043a4:	3401      	adds	r4, #1
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ac:	2206      	movs	r2, #6
 80043ae:	4825      	ldr	r0, [pc, #148]	@ (8004444 <_svfiprintf_r+0x1ec>)
 80043b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043b4:	f000 fa08 	bl	80047c8 <memchr>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d036      	beq.n	800442a <_svfiprintf_r+0x1d2>
 80043bc:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <_svfiprintf_r+0x1f0>)
 80043be:	bb1b      	cbnz	r3, 8004408 <_svfiprintf_r+0x1b0>
 80043c0:	9b03      	ldr	r3, [sp, #12]
 80043c2:	3307      	adds	r3, #7
 80043c4:	f023 0307 	bic.w	r3, r3, #7
 80043c8:	3308      	adds	r3, #8
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ce:	4433      	add	r3, r6
 80043d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d2:	e76a      	b.n	80042aa <_svfiprintf_r+0x52>
 80043d4:	460c      	mov	r4, r1
 80043d6:	2001      	movs	r0, #1
 80043d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043dc:	e7a8      	b.n	8004330 <_svfiprintf_r+0xd8>
 80043de:	2300      	movs	r3, #0
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4619      	mov	r1, r3
 80043e6:	3401      	adds	r4, #1
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	4620      	mov	r0, r4
 80043ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f0:	3a30      	subs	r2, #48	@ 0x30
 80043f2:	2a09      	cmp	r2, #9
 80043f4:	d903      	bls.n	80043fe <_svfiprintf_r+0x1a6>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c6      	beq.n	8004388 <_svfiprintf_r+0x130>
 80043fa:	9105      	str	r1, [sp, #20]
 80043fc:	e7c4      	b.n	8004388 <_svfiprintf_r+0x130>
 80043fe:	4604      	mov	r4, r0
 8004400:	2301      	movs	r3, #1
 8004402:	fb0c 2101 	mla	r1, ip, r1, r2
 8004406:	e7f0      	b.n	80043ea <_svfiprintf_r+0x192>
 8004408:	ab03      	add	r3, sp, #12
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	462a      	mov	r2, r5
 800440e:	4638      	mov	r0, r7
 8004410:	4b0e      	ldr	r3, [pc, #56]	@ (800444c <_svfiprintf_r+0x1f4>)
 8004412:	a904      	add	r1, sp, #16
 8004414:	f3af 8000 	nop.w
 8004418:	1c42      	adds	r2, r0, #1
 800441a:	4606      	mov	r6, r0
 800441c:	d1d6      	bne.n	80043cc <_svfiprintf_r+0x174>
 800441e:	89ab      	ldrh	r3, [r5, #12]
 8004420:	065b      	lsls	r3, r3, #25
 8004422:	f53f af2d 	bmi.w	8004280 <_svfiprintf_r+0x28>
 8004426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004428:	e72c      	b.n	8004284 <_svfiprintf_r+0x2c>
 800442a:	ab03      	add	r3, sp, #12
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	462a      	mov	r2, r5
 8004430:	4638      	mov	r0, r7
 8004432:	4b06      	ldr	r3, [pc, #24]	@ (800444c <_svfiprintf_r+0x1f4>)
 8004434:	a904      	add	r1, sp, #16
 8004436:	f000 f87d 	bl	8004534 <_printf_i>
 800443a:	e7ed      	b.n	8004418 <_svfiprintf_r+0x1c0>
 800443c:	0800529c 	.word	0x0800529c
 8004440:	080052a2 	.word	0x080052a2
 8004444:	080052a6 	.word	0x080052a6
 8004448:	00000000 	.word	0x00000000
 800444c:	080041a1 	.word	0x080041a1

08004450 <_printf_common>:
 8004450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	4616      	mov	r6, r2
 8004456:	4698      	mov	r8, r3
 8004458:	688a      	ldr	r2, [r1, #8]
 800445a:	690b      	ldr	r3, [r1, #16]
 800445c:	4607      	mov	r7, r0
 800445e:	4293      	cmp	r3, r2
 8004460:	bfb8      	it	lt
 8004462:	4613      	movlt	r3, r2
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800446a:	460c      	mov	r4, r1
 800446c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004470:	b10a      	cbz	r2, 8004476 <_printf_common+0x26>
 8004472:	3301      	adds	r3, #1
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	0699      	lsls	r1, r3, #26
 800447a:	bf42      	ittt	mi
 800447c:	6833      	ldrmi	r3, [r6, #0]
 800447e:	3302      	addmi	r3, #2
 8004480:	6033      	strmi	r3, [r6, #0]
 8004482:	6825      	ldr	r5, [r4, #0]
 8004484:	f015 0506 	ands.w	r5, r5, #6
 8004488:	d106      	bne.n	8004498 <_printf_common+0x48>
 800448a:	f104 0a19 	add.w	sl, r4, #25
 800448e:	68e3      	ldr	r3, [r4, #12]
 8004490:	6832      	ldr	r2, [r6, #0]
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	42ab      	cmp	r3, r5
 8004496:	dc2b      	bgt.n	80044f0 <_printf_common+0xa0>
 8004498:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	3b00      	subs	r3, #0
 80044a0:	bf18      	it	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	0692      	lsls	r2, r2, #26
 80044a6:	d430      	bmi.n	800450a <_printf_common+0xba>
 80044a8:	4641      	mov	r1, r8
 80044aa:	4638      	mov	r0, r7
 80044ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044b0:	47c8      	blx	r9
 80044b2:	3001      	adds	r0, #1
 80044b4:	d023      	beq.n	80044fe <_printf_common+0xae>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	f003 0306 	and.w	r3, r3, #6
 80044be:	2b04      	cmp	r3, #4
 80044c0:	bf14      	ite	ne
 80044c2:	2500      	movne	r5, #0
 80044c4:	6833      	ldreq	r3, [r6, #0]
 80044c6:	f04f 0600 	mov.w	r6, #0
 80044ca:	bf08      	it	eq
 80044cc:	68e5      	ldreq	r5, [r4, #12]
 80044ce:	f104 041a 	add.w	r4, r4, #26
 80044d2:	bf08      	it	eq
 80044d4:	1aed      	subeq	r5, r5, r3
 80044d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80044da:	bf08      	it	eq
 80044dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfc4      	itt	gt
 80044e4:	1a9b      	subgt	r3, r3, r2
 80044e6:	18ed      	addgt	r5, r5, r3
 80044e8:	42b5      	cmp	r5, r6
 80044ea:	d11a      	bne.n	8004522 <_printf_common+0xd2>
 80044ec:	2000      	movs	r0, #0
 80044ee:	e008      	b.n	8004502 <_printf_common+0xb2>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4652      	mov	r2, sl
 80044f4:	4641      	mov	r1, r8
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c8      	blx	r9
 80044fa:	3001      	adds	r0, #1
 80044fc:	d103      	bne.n	8004506 <_printf_common+0xb6>
 80044fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004506:	3501      	adds	r5, #1
 8004508:	e7c1      	b.n	800448e <_printf_common+0x3e>
 800450a:	2030      	movs	r0, #48	@ 0x30
 800450c:	18e1      	adds	r1, r4, r3
 800450e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004518:	4422      	add	r2, r4
 800451a:	3302      	adds	r3, #2
 800451c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004520:	e7c2      	b.n	80044a8 <_printf_common+0x58>
 8004522:	2301      	movs	r3, #1
 8004524:	4622      	mov	r2, r4
 8004526:	4641      	mov	r1, r8
 8004528:	4638      	mov	r0, r7
 800452a:	47c8      	blx	r9
 800452c:	3001      	adds	r0, #1
 800452e:	d0e6      	beq.n	80044fe <_printf_common+0xae>
 8004530:	3601      	adds	r6, #1
 8004532:	e7d9      	b.n	80044e8 <_printf_common+0x98>

08004534 <_printf_i>:
 8004534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	7e0f      	ldrb	r7, [r1, #24]
 800453a:	4691      	mov	r9, r2
 800453c:	2f78      	cmp	r7, #120	@ 0x78
 800453e:	4680      	mov	r8, r0
 8004540:	460c      	mov	r4, r1
 8004542:	469a      	mov	sl, r3
 8004544:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800454a:	d807      	bhi.n	800455c <_printf_i+0x28>
 800454c:	2f62      	cmp	r7, #98	@ 0x62
 800454e:	d80a      	bhi.n	8004566 <_printf_i+0x32>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f000 80d3 	beq.w	80046fc <_printf_i+0x1c8>
 8004556:	2f58      	cmp	r7, #88	@ 0x58
 8004558:	f000 80ba 	beq.w	80046d0 <_printf_i+0x19c>
 800455c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004564:	e03a      	b.n	80045dc <_printf_i+0xa8>
 8004566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800456a:	2b15      	cmp	r3, #21
 800456c:	d8f6      	bhi.n	800455c <_printf_i+0x28>
 800456e:	a101      	add	r1, pc, #4	@ (adr r1, 8004574 <_printf_i+0x40>)
 8004570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045e1 	.word	0x080045e1
 800457c:	0800455d 	.word	0x0800455d
 8004580:	0800455d 	.word	0x0800455d
 8004584:	0800455d 	.word	0x0800455d
 8004588:	0800455d 	.word	0x0800455d
 800458c:	080045e1 	.word	0x080045e1
 8004590:	0800455d 	.word	0x0800455d
 8004594:	0800455d 	.word	0x0800455d
 8004598:	0800455d 	.word	0x0800455d
 800459c:	0800455d 	.word	0x0800455d
 80045a0:	080046e3 	.word	0x080046e3
 80045a4:	0800460b 	.word	0x0800460b
 80045a8:	0800469d 	.word	0x0800469d
 80045ac:	0800455d 	.word	0x0800455d
 80045b0:	0800455d 	.word	0x0800455d
 80045b4:	08004705 	.word	0x08004705
 80045b8:	0800455d 	.word	0x0800455d
 80045bc:	0800460b 	.word	0x0800460b
 80045c0:	0800455d 	.word	0x0800455d
 80045c4:	0800455d 	.word	0x0800455d
 80045c8:	080046a5 	.word	0x080046a5
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6032      	str	r2, [r6, #0]
 80045d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e09e      	b.n	800471e <_printf_i+0x1ea>
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	6031      	str	r1, [r6, #0]
 80045e8:	0606      	lsls	r6, r0, #24
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0xbc>
 80045ec:	681d      	ldr	r5, [r3, #0]
 80045ee:	e003      	b.n	80045f8 <_printf_i+0xc4>
 80045f0:	0645      	lsls	r5, r0, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0xb8>
 80045f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	da03      	bge.n	8004604 <_printf_i+0xd0>
 80045fc:	232d      	movs	r3, #45	@ 0x2d
 80045fe:	426d      	negs	r5, r5
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004604:	230a      	movs	r3, #10
 8004606:	4859      	ldr	r0, [pc, #356]	@ (800476c <_printf_i+0x238>)
 8004608:	e011      	b.n	800462e <_printf_i+0xfa>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	6833      	ldr	r3, [r6, #0]
 800460e:	0608      	lsls	r0, r1, #24
 8004610:	f853 5b04 	ldr.w	r5, [r3], #4
 8004614:	d402      	bmi.n	800461c <_printf_i+0xe8>
 8004616:	0649      	lsls	r1, r1, #25
 8004618:	bf48      	it	mi
 800461a:	b2ad      	uxthmi	r5, r5
 800461c:	2f6f      	cmp	r7, #111	@ 0x6f
 800461e:	6033      	str	r3, [r6, #0]
 8004620:	bf14      	ite	ne
 8004622:	230a      	movne	r3, #10
 8004624:	2308      	moveq	r3, #8
 8004626:	4851      	ldr	r0, [pc, #324]	@ (800476c <_printf_i+0x238>)
 8004628:	2100      	movs	r1, #0
 800462a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800462e:	6866      	ldr	r6, [r4, #4]
 8004630:	2e00      	cmp	r6, #0
 8004632:	bfa8      	it	ge
 8004634:	6821      	ldrge	r1, [r4, #0]
 8004636:	60a6      	str	r6, [r4, #8]
 8004638:	bfa4      	itt	ge
 800463a:	f021 0104 	bicge.w	r1, r1, #4
 800463e:	6021      	strge	r1, [r4, #0]
 8004640:	b90d      	cbnz	r5, 8004646 <_printf_i+0x112>
 8004642:	2e00      	cmp	r6, #0
 8004644:	d04b      	beq.n	80046de <_printf_i+0x1aa>
 8004646:	4616      	mov	r6, r2
 8004648:	fbb5 f1f3 	udiv	r1, r5, r3
 800464c:	fb03 5711 	mls	r7, r3, r1, r5
 8004650:	5dc7      	ldrb	r7, [r0, r7]
 8004652:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004656:	462f      	mov	r7, r5
 8004658:	42bb      	cmp	r3, r7
 800465a:	460d      	mov	r5, r1
 800465c:	d9f4      	bls.n	8004648 <_printf_i+0x114>
 800465e:	2b08      	cmp	r3, #8
 8004660:	d10b      	bne.n	800467a <_printf_i+0x146>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	07df      	lsls	r7, r3, #31
 8004666:	d508      	bpl.n	800467a <_printf_i+0x146>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	6861      	ldr	r1, [r4, #4]
 800466c:	4299      	cmp	r1, r3
 800466e:	bfde      	ittt	le
 8004670:	2330      	movle	r3, #48	@ 0x30
 8004672:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004676:	f106 36ff 	addle.w	r6, r6, #4294967295
 800467a:	1b92      	subs	r2, r2, r6
 800467c:	6122      	str	r2, [r4, #16]
 800467e:	464b      	mov	r3, r9
 8004680:	4621      	mov	r1, r4
 8004682:	4640      	mov	r0, r8
 8004684:	f8cd a000 	str.w	sl, [sp]
 8004688:	aa03      	add	r2, sp, #12
 800468a:	f7ff fee1 	bl	8004450 <_printf_common>
 800468e:	3001      	adds	r0, #1
 8004690:	d14a      	bne.n	8004728 <_printf_i+0x1f4>
 8004692:	f04f 30ff 	mov.w	r0, #4294967295
 8004696:	b004      	add	sp, #16
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	2778      	movs	r7, #120	@ 0x78
 80046a6:	4832      	ldr	r0, [pc, #200]	@ (8004770 <_printf_i+0x23c>)
 80046a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	6831      	ldr	r1, [r6, #0]
 80046b0:	061f      	lsls	r7, r3, #24
 80046b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80046b6:	d402      	bmi.n	80046be <_printf_i+0x18a>
 80046b8:	065f      	lsls	r7, r3, #25
 80046ba:	bf48      	it	mi
 80046bc:	b2ad      	uxthmi	r5, r5
 80046be:	6031      	str	r1, [r6, #0]
 80046c0:	07d9      	lsls	r1, r3, #31
 80046c2:	bf44      	itt	mi
 80046c4:	f043 0320 	orrmi.w	r3, r3, #32
 80046c8:	6023      	strmi	r3, [r4, #0]
 80046ca:	b11d      	cbz	r5, 80046d4 <_printf_i+0x1a0>
 80046cc:	2310      	movs	r3, #16
 80046ce:	e7ab      	b.n	8004628 <_printf_i+0xf4>
 80046d0:	4826      	ldr	r0, [pc, #152]	@ (800476c <_printf_i+0x238>)
 80046d2:	e7e9      	b.n	80046a8 <_printf_i+0x174>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	f023 0320 	bic.w	r3, r3, #32
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	e7f6      	b.n	80046cc <_printf_i+0x198>
 80046de:	4616      	mov	r6, r2
 80046e0:	e7bd      	b.n	800465e <_printf_i+0x12a>
 80046e2:	6833      	ldr	r3, [r6, #0]
 80046e4:	6825      	ldr	r5, [r4, #0]
 80046e6:	1d18      	adds	r0, r3, #4
 80046e8:	6961      	ldr	r1, [r4, #20]
 80046ea:	6030      	str	r0, [r6, #0]
 80046ec:	062e      	lsls	r6, r5, #24
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	d501      	bpl.n	80046f6 <_printf_i+0x1c2>
 80046f2:	6019      	str	r1, [r3, #0]
 80046f4:	e002      	b.n	80046fc <_printf_i+0x1c8>
 80046f6:	0668      	lsls	r0, r5, #25
 80046f8:	d5fb      	bpl.n	80046f2 <_printf_i+0x1be>
 80046fa:	8019      	strh	r1, [r3, #0]
 80046fc:	2300      	movs	r3, #0
 80046fe:	4616      	mov	r6, r2
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	e7bc      	b.n	800467e <_printf_i+0x14a>
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	1d1a      	adds	r2, r3, #4
 800470a:	6032      	str	r2, [r6, #0]
 800470c:	681e      	ldr	r6, [r3, #0]
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	4630      	mov	r0, r6
 8004712:	f000 f859 	bl	80047c8 <memchr>
 8004716:	b108      	cbz	r0, 800471c <_printf_i+0x1e8>
 8004718:	1b80      	subs	r0, r0, r6
 800471a:	6060      	str	r0, [r4, #4]
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	2300      	movs	r3, #0
 8004722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004726:	e7aa      	b.n	800467e <_printf_i+0x14a>
 8004728:	4632      	mov	r2, r6
 800472a:	4649      	mov	r1, r9
 800472c:	4640      	mov	r0, r8
 800472e:	6923      	ldr	r3, [r4, #16]
 8004730:	47d0      	blx	sl
 8004732:	3001      	adds	r0, #1
 8004734:	d0ad      	beq.n	8004692 <_printf_i+0x15e>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	079b      	lsls	r3, r3, #30
 800473a:	d413      	bmi.n	8004764 <_printf_i+0x230>
 800473c:	68e0      	ldr	r0, [r4, #12]
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	4298      	cmp	r0, r3
 8004742:	bfb8      	it	lt
 8004744:	4618      	movlt	r0, r3
 8004746:	e7a6      	b.n	8004696 <_printf_i+0x162>
 8004748:	2301      	movs	r3, #1
 800474a:	4632      	mov	r2, r6
 800474c:	4649      	mov	r1, r9
 800474e:	4640      	mov	r0, r8
 8004750:	47d0      	blx	sl
 8004752:	3001      	adds	r0, #1
 8004754:	d09d      	beq.n	8004692 <_printf_i+0x15e>
 8004756:	3501      	adds	r5, #1
 8004758:	68e3      	ldr	r3, [r4, #12]
 800475a:	9903      	ldr	r1, [sp, #12]
 800475c:	1a5b      	subs	r3, r3, r1
 800475e:	42ab      	cmp	r3, r5
 8004760:	dcf2      	bgt.n	8004748 <_printf_i+0x214>
 8004762:	e7eb      	b.n	800473c <_printf_i+0x208>
 8004764:	2500      	movs	r5, #0
 8004766:	f104 0619 	add.w	r6, r4, #25
 800476a:	e7f5      	b.n	8004758 <_printf_i+0x224>
 800476c:	080052ad 	.word	0x080052ad
 8004770:	080052be 	.word	0x080052be

08004774 <memmove>:
 8004774:	4288      	cmp	r0, r1
 8004776:	b510      	push	{r4, lr}
 8004778:	eb01 0402 	add.w	r4, r1, r2
 800477c:	d902      	bls.n	8004784 <memmove+0x10>
 800477e:	4284      	cmp	r4, r0
 8004780:	4623      	mov	r3, r4
 8004782:	d807      	bhi.n	8004794 <memmove+0x20>
 8004784:	1e43      	subs	r3, r0, #1
 8004786:	42a1      	cmp	r1, r4
 8004788:	d008      	beq.n	800479c <memmove+0x28>
 800478a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800478e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004792:	e7f8      	b.n	8004786 <memmove+0x12>
 8004794:	4601      	mov	r1, r0
 8004796:	4402      	add	r2, r0
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <memmove+0x2a>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047a6:	e7f7      	b.n	8004798 <memmove+0x24>

080047a8 <_sbrk_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	2300      	movs	r3, #0
 80047ac:	4d05      	ldr	r5, [pc, #20]	@ (80047c4 <_sbrk_r+0x1c>)
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc fb76 	bl	8000ea4 <_sbrk>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_sbrk_r+0x1a>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_sbrk_r+0x1a>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000590 	.word	0x20000590

080047c8 <memchr>:
 80047c8:	4603      	mov	r3, r0
 80047ca:	b510      	push	{r4, lr}
 80047cc:	b2c9      	uxtb	r1, r1
 80047ce:	4402      	add	r2, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	d101      	bne.n	80047da <memchr+0x12>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e003      	b.n	80047e2 <memchr+0x1a>
 80047da:	7804      	ldrb	r4, [r0, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	428c      	cmp	r4, r1
 80047e0:	d1f6      	bne.n	80047d0 <memchr+0x8>
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <memcpy>:
 80047e4:	440a      	add	r2, r1
 80047e6:	4291      	cmp	r1, r2
 80047e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ec:	d100      	bne.n	80047f0 <memcpy+0xc>
 80047ee:	4770      	bx	lr
 80047f0:	b510      	push	{r4, lr}
 80047f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f6:	4291      	cmp	r1, r2
 80047f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047fc:	d1f9      	bne.n	80047f2 <memcpy+0xe>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <_realloc_r>:
 8004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	4680      	mov	r8, r0
 8004806:	4615      	mov	r5, r2
 8004808:	460c      	mov	r4, r1
 800480a:	b921      	cbnz	r1, 8004816 <_realloc_r+0x16>
 800480c:	4611      	mov	r1, r2
 800480e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004812:	f7ff bc39 	b.w	8004088 <_malloc_r>
 8004816:	b92a      	cbnz	r2, 8004824 <_realloc_r+0x24>
 8004818:	f7ff fbcc 	bl	8003fb4 <_free_r>
 800481c:	2400      	movs	r4, #0
 800481e:	4620      	mov	r0, r4
 8004820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004824:	f000 f81a 	bl	800485c <_malloc_usable_size_r>
 8004828:	4285      	cmp	r5, r0
 800482a:	4606      	mov	r6, r0
 800482c:	d802      	bhi.n	8004834 <_realloc_r+0x34>
 800482e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004832:	d8f4      	bhi.n	800481e <_realloc_r+0x1e>
 8004834:	4629      	mov	r1, r5
 8004836:	4640      	mov	r0, r8
 8004838:	f7ff fc26 	bl	8004088 <_malloc_r>
 800483c:	4607      	mov	r7, r0
 800483e:	2800      	cmp	r0, #0
 8004840:	d0ec      	beq.n	800481c <_realloc_r+0x1c>
 8004842:	42b5      	cmp	r5, r6
 8004844:	462a      	mov	r2, r5
 8004846:	4621      	mov	r1, r4
 8004848:	bf28      	it	cs
 800484a:	4632      	movcs	r2, r6
 800484c:	f7ff ffca 	bl	80047e4 <memcpy>
 8004850:	4621      	mov	r1, r4
 8004852:	4640      	mov	r0, r8
 8004854:	f7ff fbae 	bl	8003fb4 <_free_r>
 8004858:	463c      	mov	r4, r7
 800485a:	e7e0      	b.n	800481e <_realloc_r+0x1e>

0800485c <_malloc_usable_size_r>:
 800485c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004860:	1f18      	subs	r0, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	bfbc      	itt	lt
 8004866:	580b      	ldrlt	r3, [r1, r0]
 8004868:	18c0      	addlt	r0, r0, r3
 800486a:	4770      	bx	lr

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
