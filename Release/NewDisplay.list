
NewDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003150  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e14  0800328c  0800328c  0000428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  000060a0  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000050a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  000060a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000050a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040ac  080040ac  000050ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080040b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200000a0  08004150  000060a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08004150  0000659c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017559  00000000  00000000  000060c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003741  00000000  00000000  0001d622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009f19  00000000  00000000  00020d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  0002ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ef  00000000  00000000  0002bcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175c3  00000000  00000000  0002cddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000528e  00000000  00000000  0004439e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004962c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  00049670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08003274 	.word	0x08003274

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	08003274 	.word	0x08003274

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b968 	b.w	8000474 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	fb07 1114 	mls	r1, r7, r4, r1
 80001f6:	fa1f f68c 	uxth.w	r6, ip
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8110 	bcs.w	8000436 <__udivmoddi4+0x27a>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810d 	bls.w	8000436 <__udivmoddi4+0x27a>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	fb00 f606 	mul.w	r6, r0, r6
 800022e:	fa1f f38e 	uxth.w	r3, lr
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fa 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f7 	bls.w	800043a <__udivmoddi4+0x27e>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	1b9b      	subs	r3, r3, r6
 8000254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80ee 	bcc.w	8000464 <__udivmoddi4+0x2a8>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x202>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	2101      	movs	r1, #1
 80002a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	fb07 f006 	mul.w	r0, r7, r6
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	fb00 f707 	mul.w	r7, r0, r7
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80ae 	bhi.w	800045e <__udivmoddi4+0x2a2>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa24 f607 	lsr.w	r6, r4, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbb6 f8f9 	udiv	r8, r6, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 6618 	mls	r6, r9, r8, r6
 800032e:	fa20 f307 	lsr.w	r3, r0, r7
 8000332:	408c      	lsls	r4, r1
 8000334:	fa00 fa01 	lsl.w	sl, r0, r1
 8000338:	fb08 f00e 	mul.w	r0, r8, lr
 800033c:	431c      	orrs	r4, r3
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000344:	4298      	cmp	r0, r3
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	eb1c 0303 	adds.w	r3, ip, r3
 8000350:	f108 36ff 	add.w	r6, r8, #4294967295
 8000354:	f080 8081 	bcs.w	800045a <__udivmoddi4+0x29e>
 8000358:	4298      	cmp	r0, r3
 800035a:	d97e      	bls.n	800045a <__udivmoddi4+0x29e>
 800035c:	f1a8 0802 	sub.w	r8, r8, #2
 8000360:	4463      	add	r3, ip
 8000362:	1a1e      	subs	r6, r3, r0
 8000364:	fbb6 f3f9 	udiv	r3, r6, r9
 8000368:	fb09 6613 	mls	r6, r9, r3, r6
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000376:	45a6      	cmp	lr, r4
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x1d0>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000382:	d266      	bcs.n	8000452 <__udivmoddi4+0x296>
 8000384:	45a6      	cmp	lr, r4
 8000386:	d964      	bls.n	8000452 <__udivmoddi4+0x296>
 8000388:	3b02      	subs	r3, #2
 800038a:	4464      	add	r4, ip
 800038c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000390:	fba0 8302 	umull	r8, r3, r0, r2
 8000394:	eba4 040e 	sub.w	r4, r4, lr
 8000398:	429c      	cmp	r4, r3
 800039a:	46c6      	mov	lr, r8
 800039c:	461e      	mov	r6, r3
 800039e:	d350      	bcc.n	8000442 <__udivmoddi4+0x286>
 80003a0:	d04d      	beq.n	800043e <__udivmoddi4+0x282>
 80003a2:	b155      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a4:	ebba 030e 	subs.w	r3, sl, lr
 80003a8:	eb64 0406 	sbc.w	r4, r4, r6
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	40cb      	lsrs	r3, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e751      	b.n	8000262 <__udivmoddi4+0xa6>
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa20 f303 	lsr.w	r3, r0, r3
 80003d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003d8:	fb08 1110 	mls	r1, r8, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x248>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29a>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29a>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	fbb3 f1f8 	udiv	r1, r3, r8
 800040a:	fb08 3311 	mls	r3, r8, r1, r3
 800040e:	b2a4      	uxth	r4, r4
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x272>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x292>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x292>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f2      	b.n	8000220 <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e708      	b.n	8000250 <__udivmoddi4+0x94>
 800043e:	45c2      	cmp	sl, r8
 8000440:	d2af      	bcs.n	80003a2 <__udivmoddi4+0x1e6>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 060c 	sbc.w	r6, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a9      	b.n	80003a2 <__udivmoddi4+0x1e6>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x272>
 8000452:	4603      	mov	r3, r0
 8000454:	e79a      	b.n	800038c <__udivmoddi4+0x1d0>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x248>
 800045a:	46b0      	mov	r8, r6
 800045c:	e781      	b.n	8000362 <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74f      	b.n	8000304 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e711      	b.n	8000290 <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000478:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	2400      	movs	r4, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800047c:	4815      	ldr	r0, [pc, #84]	@ (80004d4 <MX_ADC_Init+0x5c>)
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_ADC_Init+0x60>)
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
 8000480:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000482:	e9c0 3400 	strd	r3, r4, [r0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000486:	2310      	movs	r3, #16
{
 8000488:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000492:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000496:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049a:	e9c0 340d 	strd	r3, r4, [r0, #52]	@ 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	9403      	str	r4, [sp, #12]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004a0:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a2:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80004a6:	6285      	str	r5, [r0, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	f880 402c 	strb.w	r4, [r0, #44]	@ 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ac:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b0:	f000 ffe4 	bl	800147c <HAL_ADC_Init>
 80004b4:	b108      	cbz	r0, 80004ba <MX_ADC_Init+0x42>
  {
    Error_Handler();
 80004b6:	f000 fc83 	bl	8000dc0 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ba:	4806      	ldr	r0, [pc, #24]	@ (80004d4 <MX_ADC_Init+0x5c>)
 80004bc:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004be:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80004c2:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c4:	f001 f8a0 	bl	8001608 <HAL_ADC_ConfigChannel>
 80004c8:	b108      	cbz	r0, 80004ce <MX_ADC_Init+0x56>
  {
    Error_Handler();
 80004ca:	f000 fc79 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004ce:	b005      	add	sp, #20
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop
 80004d4:	200000bc 	.word	0x200000bc
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
 80004e0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	2214      	movs	r2, #20
 80004e4:	2100      	movs	r1, #0
 80004e6:	a803      	add	r0, sp, #12
 80004e8:	f002 fa20 	bl	800292c <memset>
  if(adcHandle->Instance==ADC1)
 80004ec:	6822      	ldr	r2, [r4, #0]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <HAL_ADC_MspInit+0x7c>)
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d12e      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f4:	f503 338a 	add.w	r3, r3, #70656	@ 0x11400
 80004f8:	6a1a      	ldr	r2, [r3, #32]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fa:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000500:	621a      	str	r2, [r3, #32]
 8000502:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	4815      	ldr	r0, [pc, #84]	@ (800055c <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000506:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	69da      	ldr	r2, [r3, #28]
 800051a:	f002 0201 	and.w	r2, r2, #1
 800051e:	9201      	str	r2, [sp, #4]
 8000520:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	f042 0210 	orr.w	r2, r2, #16
 8000528:	61da      	str	r2, [r3, #28]
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2301      	movs	r3, #1
 8000536:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f001 f965 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800053e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000542:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800054a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054e:	f001 f95b 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	b008      	add	sp, #32
 8000554:	bd10      	pop	{r4, pc}
 8000556:	bf00      	nop
 8000558:	40012400 	.word	0x40012400
 800055c:	40020000 	.word	0x40020000
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0x74>)
{
 8000566:	b086      	sub	sp, #24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	f042 0220 	orr.w	r2, r2, #32
 800056e:	61da      	str	r2, [r3, #28]
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	f002 0220 	and.w	r2, r2, #32
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	61da      	str	r2, [r3, #28]
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	f002 0201 	and.w	r2, r2, #1
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058c:	69da      	ldr	r2, [r3, #28]
 800058e:	f042 0210 	orr.w	r2, r2, #16
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	f002 0210 	and.w	r2, r2, #16
 800059a:	9202      	str	r2, [sp, #8]
 800059c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	69da      	ldr	r2, [r3, #28]
 80005a0:	f042 0202 	orr.w	r2, r2, #2
 80005a4:	61da      	str	r2, [r3, #28]
 80005a6:	69da      	ldr	r2, [r3, #28]
 80005a8:	f002 0202 	and.w	r2, r2, #2
 80005ac:	9203      	str	r2, [sp, #12]
 80005ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	f042 0208 	orr.w	r2, r2, #8
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	f002 0208 	and.w	r2, r2, #8
 80005be:	9204      	str	r2, [sp, #16]
 80005c0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	61da      	str	r2, [r3, #28]
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	9305      	str	r3, [sp, #20]
 80005d2:	9b05      	ldr	r3, [sp, #20]

}
 80005d4:	b006      	add	sp, #24
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800

080005dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <MX_I2C1_Init+0x34>)
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_I2C1_Init+0x38>)
 80005e4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	f001 f9e2 	bl	80019c4 <HAL_I2C_Init>
 8000600:	b118      	cbz	r0, 800060a <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000606:	f000 bbdb 	b.w	8000dc0 <Error_Handler>
}
 800060a:	bd08      	pop	{r3, pc}
 800060c:	20000164 	.word	0x20000164
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000618:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <MX_I2C2_Init+0x34>)
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C2_Init+0x38>)
 8000620:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800062a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	f001 f9c4 	bl	80019c4 <HAL_I2C_Init>
 800063c:	b118      	cbz	r0, 8000646 <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800063e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000642:	f000 bbbd 	b.w	8000dc0 <Error_Handler>
}
 8000646:	bd08      	pop	{r3, pc}
 8000648:	20000110 	.word	0x20000110
 800064c:	40005800 	.word	0x40005800
 8000650:	000186a0 	.word	0x000186a0

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2214      	movs	r2, #20
{
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
 800065a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	eb0d 0002 	add.w	r0, sp, r2
 8000660:	2100      	movs	r1, #0
 8000662:	f002 f963 	bl	800292c <memset>
  if(i2cHandle->Instance==I2C1)
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <HAL_I2C_MspInit+0xa8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d121      	bne.n	80006b2 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4c24      	ldr	r4, [pc, #144]	@ (8000700 <HAL_I2C_MspInit+0xac>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000670:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000674:	f04f 0c03 	mov.w	ip, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	61e3      	str	r3, [r4, #28]
 800067e:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000690:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	481c      	ldr	r0, [pc, #112]	@ (8000704 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000694:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f001 f8b6 	bl	8001808 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800069e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80006a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006ae:	b00a      	add	sp, #40	@ 0x28
 80006b0:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <HAL_I2C_MspInit+0xb4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d1fa      	bne.n	80006ae <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4c11      	ldr	r4, [pc, #68]	@ (8000700 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ba:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006c0:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	61e3      	str	r3, [r4, #28]
 80006c8:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	9303      	str	r3, [sp, #12]
 80006d2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006da:	2304      	movs	r3, #4
 80006dc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	a905      	add	r1, sp, #20
 80006e2:	f001 f891 	bl	8001808 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006f4:	9304      	str	r3, [sp, #16]
 80006f6:	9b04      	ldr	r3, [sp, #16]
}
 80006f8:	e7d9      	b.n	80006ae <HAL_I2C_MspInit+0x5a>
 80006fa:	bf00      	nop
 80006fc:	40005400 	.word	0x40005400
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40005800 	.word	0x40005800

0800070c <KBD_Init>:
	KBD1_PORT,	KBD2_PORT,	KBD3_PORT,	KBD4_PORT,	KBD5_PORT,
	KBD6_PORT,	KBD7_PORT,	KBD8_PORT,	KBD9_PORT,	KBD10_PORT
};

void KBD_Init(void)
{
 800070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	uint8_t ui8Index;

	/* KBD GPIO Configuration --------------------------------------------------*/

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000710:	2400      	movs	r4, #0
	{
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
		GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000712:	2503      	movs	r5, #3
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000714:	4627      	mov	r7, r4
 8000716:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8000780 <KBD_Init+0x74>
 800071a:	4e1a      	ldr	r6, [pc, #104]	@ (8000784 <KBD_Init+0x78>)
{
 800071c:	b086      	sub	sp, #24
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
 800071e:	f838 3b02 	ldrh.w	r3, [r8], #2
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000722:	3401      	adds	r4, #1
		GPIO_InitStructure.Pull = GPIO_NOPULL;
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000724:	f856 0b04 	ldr.w	r0, [r6], #4
 8000728:	a901      	add	r1, sp, #4
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 800072a:	b2e4      	uxtb	r4, r4
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800072c:	e9cd 3701 	strd	r3, r7, [sp, #4]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000730:	e9cd 7503 	strd	r7, r5, [sp, #12]
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000734:	f001 f868 	bl	8001808 <HAL_GPIO_Init>
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000738:	2c0a      	cmp	r4, #10
 800073a:	d1f0      	bne.n	800071e <KBD_Init+0x12>
	}

	GPIO_InitStructure.Pin = AC_LED_PIN;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2604      	movs	r6, #4
 800073e:	2401      	movs	r4, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 8000740:	eb0d 0106 	add.w	r1, sp, r6
 8000744:	4810      	ldr	r0, [pc, #64]	@ (8000788 <KBD_Init+0x7c>)
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	e9cd 6401 	strd	r6, r4, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800074a:	e9cd 4503 	strd	r4, r5, [sp, #12]
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 800074e:	f001 f85b 	bl	8001808 <HAL_GPIO_Init>
	AC_LED_OFF;
 8000752:	4631      	mov	r1, r6

	GPIO_InitStructure.Pin = BATT_LED_PIN;
 8000754:	2608      	movs	r6, #8
	AC_LED_OFF;
 8000756:	2200      	movs	r2, #0
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <KBD_Init+0x7c>)
 800075a:	f001 f92d 	bl	80019b8 <HAL_GPIO_WritePin>
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 800075e:	a901      	add	r1, sp, #4
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <KBD_Init+0x7c>)
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	e9cd 6401 	strd	r6, r4, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000766:	e9cd 4503 	strd	r4, r5, [sp, #12]
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 800076a:	f001 f84d 	bl	8001808 <HAL_GPIO_Init>
	BATT_LED_OFF;
 800076e:	2200      	movs	r2, #0
 8000770:	4631      	mov	r1, r6
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <KBD_Init+0x7c>)
 8000774:	f001 f920 	bl	80019b8 <HAL_GPIO_WritePin>
}
 8000778:	b006      	add	sp, #24
 800077a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028
 8000784:	20000000 	.word	0x20000000
 8000788:	40020800 	.word	0x40020800

0800078c <KBD_Get>:

uint16_t KBD_Get()
{
 800078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000790:	2500      	movs	r5, #0

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
	{
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], ui16KBDGpioPins[ui8Index]) == GPIO_PIN_RESET)
		{
			ui16KeyStatus = ui16KeyStatus | ((uint16_t)0x01) << ui8Index;
 8000792:	f04f 0801 	mov.w	r8, #1
	uint16_t ui16KeyStatus = 0;
 8000796:	462c      	mov	r4, r5
 8000798:	4e09      	ldr	r6, [pc, #36]	@ (80007c0 <KBD_Get+0x34>)
 800079a:	4f0a      	ldr	r7, [pc, #40]	@ (80007c4 <KBD_Get+0x38>)
		if(HAL_GPIO_ReadPin((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], ui16KBDGpioPins[ui8Index]) == GPIO_PIN_RESET)
 800079c:	f837 1b02 	ldrh.w	r1, [r7], #2
 80007a0:	f856 0b04 	ldr.w	r0, [r6], #4
 80007a4:	f001 f902 	bl	80019ac <HAL_GPIO_ReadPin>
 80007a8:	b918      	cbnz	r0, 80007b2 <KBD_Get+0x26>
			ui16KeyStatus = ui16KeyStatus | ((uint16_t)0x01) << ui8Index;
 80007aa:	fa08 f305 	lsl.w	r3, r8, r5
 80007ae:	431c      	orrs	r4, r3
 80007b0:	b2a4      	uxth	r4, r4
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 80007b2:	3501      	adds	r5, #1
 80007b4:	2d0a      	cmp	r5, #10
 80007b6:	d1f1      	bne.n	800079c <KBD_Get+0x10>
		}
	}

	return ui16KeyStatus;
}
 80007b8:	4620      	mov	r0, r4
 80007ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000028 	.word	0x20000028

080007c8 <KBD_ButtonStatus>:

uint8_t KBD_ButtonStatus(uint8_t ui8ButtonNum)
{
 80007c8:	b570      	push	{r4, r5, r6, lr}
    static uint32_t ui32PressConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
    static uint32_t ui32ReleaseConfidenceLevel[NUMBER_OF_BUTTONS] = {0};
    static uint8_t ui8TriggerPressed[NUMBER_OF_BUTTONS] = {0};
    uint16_t ui16ButtonMask = 0x01;

    ui16ButtonMask = ui16ButtonMask << ui8ButtonNum;
 80007ca:	2601      	movs	r6, #1
{
 80007cc:	4604      	mov	r4, r0
    ui16ButtonMask = ui16ButtonMask << ui8ButtonNum;
 80007ce:	fa06 f500 	lsl.w	r5, r6, r0

    if ((KBD_Get() & ui16ButtonMask) == ui16ButtonMask)  // Button is pressed
 80007d2:	f7ff ffdb 	bl	800078c <KBD_Get>
    ui16ButtonMask = ui16ButtonMask << ui8ButtonNum;
 80007d6:	b2ad      	uxth	r5, r5
    if ((KBD_Get() & ui16ButtonMask) == ui16ButtonMask)  // Button is pressed
 80007d8:	4385      	bics	r5, r0
 80007da:	4914      	ldr	r1, [pc, #80]	@ (800082c <KBD_ButtonStatus+0x64>)
 80007dc:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <KBD_ButtonStatus+0x68>)
 80007de:	4815      	ldr	r0, [pc, #84]	@ (8000834 <KBD_ButtonStatus+0x6c>)
 80007e0:	d112      	bne.n	8000808 <KBD_ButtonStatus+0x40>
    {
        ui32ReleaseConfidenceLevel[ui8ButtonNum] = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
        ui32PressConfidenceLevel[ui8ButtonNum]++;
 80007e8:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80007ec:	4433      	add	r3, r6
 80007ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

        if (ui32PressConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 80007f2:	6802      	ldr	r2, [r0, #0]
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d801      	bhi.n	80007fc <KBD_ButtonStatus+0x34>
                return BUTTON_CLICKED;
            }
        }
    }

    return BUTTON_NOT_CLICKED;
 80007f8:	2002      	movs	r0, #2
}
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
            if (!ui8TriggerPressed[ui8ButtonNum])
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <KBD_ButtonStatus+0x70>)
 80007fe:	5d18      	ldrb	r0, [r3, r4]
 8000800:	2800      	cmp	r0, #0
 8000802:	d1f9      	bne.n	80007f8 <KBD_ButtonStatus+0x30>
                ui8TriggerPressed[ui8ButtonNum] = 1;
 8000804:	551e      	strb	r6, [r3, r4]
                return BUTTON_PRESSED;
 8000806:	e7f8      	b.n	80007fa <KBD_ButtonStatus+0x32>
        ui32ReleaseConfidenceLevel[ui8ButtonNum]++;
 8000808:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 800080c:	3301      	adds	r3, #1
 800080e:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
        ui32PressConfidenceLevel[ui8ButtonNum] = 0;
 8000812:	2100      	movs	r1, #0
 8000814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
        if (ui32ReleaseConfidenceLevel[ui8ButtonNum] > ui32ButtonDebounce)
 8000818:	6802      	ldr	r2, [r0, #0]
 800081a:	4293      	cmp	r3, r2
 800081c:	d9ec      	bls.n	80007f8 <KBD_ButtonStatus+0x30>
            if (ui8TriggerPressed[ui8ButtonNum])
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <KBD_ButtonStatus+0x70>)
 8000820:	5d1a      	ldrb	r2, [r3, r4]
 8000822:	2a00      	cmp	r2, #0
 8000824:	d0e8      	beq.n	80007f8 <KBD_ButtonStatus+0x30>
                return BUTTON_CLICKED;
 8000826:	4630      	mov	r0, r6
                ui8TriggerPressed[ui8ButtonNum] = 0;
 8000828:	5519      	strb	r1, [r3, r4]
                return BUTTON_CLICKED;
 800082a:	e7e6      	b.n	80007fa <KBD_ButtonStatus+0x32>
 800082c:	200001ec 	.word	0x200001ec
 8000830:	200001c4 	.word	0x200001c4
 8000834:	2000003c 	.word	0x2000003c
 8000838:	200001b8 	.word	0x200001b8

0800083c <LCD_Initialization>:
uint8_t ui8PrevRow = ROW1;

void LCD_Initialization(void)
{
//	HAL_Delay(2000);
}
 800083c:	4770      	bx	lr
	...

08000840 <get_label_name>:
	{PORT_SETTINGS_CONFIRM_TEXT_R5C5_X, PORT_SETTINGS_CONFIRM_TEXT_R5C5_Y, "PORT_SETTINGS_CONFIRM_TEXT_R5C5_LABEL"},

};

const char* get_label_name(uint16_t x, uint16_t y) {
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <get_label_name+0x2c>)
const char* get_label_name(uint16_t x, uint16_t y) {
 8000842:	b530      	push	{r4, r5, lr}
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 8000844:	2200      	movs	r2, #0
 8000846:	461c      	mov	r4, r3
        if (label_mapping[i].x == x && label_mapping[i].y == y) {
 8000848:	881d      	ldrh	r5, [r3, #0]
 800084a:	4285      	cmp	r5, r0
 800084c:	d106      	bne.n	800085c <get_label_name+0x1c>
 800084e:	885d      	ldrh	r5, [r3, #2]
 8000850:	428d      	cmp	r5, r1
 8000852:	d103      	bne.n	800085c <get_label_name+0x1c>
            return label_mapping[i].label_name;
 8000854:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8000858:	6860      	ldr	r0, [r4, #4]
        }
    }
    return NULL; // Return NULL if no label matches the coordinates
}
 800085a:	bd30      	pop	{r4, r5, pc}
    for (int i = 0; i < sizeof(label_mapping) / sizeof(label_mapping[0]); i++) {
 800085c:	3201      	adds	r2, #1
 800085e:	2a43      	cmp	r2, #67	@ 0x43
 8000860:	f103 0308 	add.w	r3, r3, #8
 8000864:	d1f0      	bne.n	8000848 <get_label_name+0x8>
    return NULL; // Return NULL if no label matches the coordinates
 8000866:	2000      	movs	r0, #0
 8000868:	e7f7      	b.n	800085a <get_label_name+0x1a>
 800086a:	bf00      	nop
 800086c:	08003e34 	.word	0x08003e34

08000870 <set_text>:

// Function to send set text command to a widget
void set_text(const char* widget_type, const char* widget_name, const char* text) {
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	460d      	mov	r5, r1
    // Construct JSON command
    char json_command[256] = {0};
 8000874:	2100      	movs	r1, #0
void set_text(const char* widget_type, const char* widget_name, const char* text) {
 8000876:	4604      	mov	r4, r0
 8000878:	4616      	mov	r6, r2
 800087a:	b0c8      	sub	sp, #288	@ 0x120
    char json_command[256] = {0};
 800087c:	22fc      	movs	r2, #252	@ 0xfc
 800087e:	a809      	add	r0, sp, #36	@ 0x24
 8000880:	9108      	str	r1, [sp, #32]
 8000882:	f002 f853 	bl	800292c <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s%s%s",
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <set_text+0x58>)
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <set_text+0x5c>)
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <set_text+0x60>)
 8000894:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <set_text+0x64>)
 800089a:	9606      	str	r6, [sp, #24]
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <set_text+0x68>)
 80008a0:	a808      	add	r0, sp, #32
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <set_text+0x6c>)
 80008a6:	f002 f80d 	bl	80028c4 <sniprintf>
             CMD_PREFIX, CMD_CODE_SET_TEXT, CMD_SUFFIX_TYPE, widget_type,
             CMD_SUFFIX_WIDGET, widget_name, CMD_SUFFIX_TEXT, text);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 80008aa:	a808      	add	r0, sp, #32
 80008ac:	f7ff fc66 	bl	800017c <strlen>
 80008b0:	490b      	ldr	r1, [pc, #44]	@ (80008e0 <set_text+0x70>)
 80008b2:	f1c0 02ff 	rsb	r2, r0, #255	@ 0xff
 80008b6:	a808      	add	r0, sp, #32
 80008b8:	f002 f840 	bl	800293c <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 80008bc:	a808      	add	r0, sp, #32
 80008be:	f000 fd4d 	bl	800135c <USART_SendCommand>
}
 80008c2:	b048      	add	sp, #288	@ 0x120
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	bf00      	nop
 80008c8:	080032d6 	.word	0x080032d6
 80008cc:	080032e1 	.word	0x080032e1
 80008d0:	080032c5 	.word	0x080032c5
 80008d4:	080032ee 	.word	0x080032ee
 80008d8:	080032f9 	.word	0x080032f9
 80008dc:	080032b4 	.word	0x080032b4
 80008e0:	0800338e 	.word	0x0800338e

080008e4 <set_visible>:
    // Call set_value to update the widget's value
    set_text("label", label_name, value_str);
}

// Function to set the visibility of a widget (icon)
void set_visible(const char* widget_name, uint8_t visible) {
 80008e4:	b530      	push	{r4, r5, lr}
 80008e6:	460d      	mov	r5, r1
    char json_command[256] = {0};
 80008e8:	2100      	movs	r1, #0
void set_visible(const char* widget_name, uint8_t visible) {
 80008ea:	b0c3      	sub	sp, #268	@ 0x10c
 80008ec:	4604      	mov	r4, r0
    char json_command[256] = {0};
 80008ee:	22fc      	movs	r2, #252	@ 0xfc
 80008f0:	a803      	add	r0, sp, #12
 80008f2:	9102      	str	r1, [sp, #8]
 80008f4:	f002 f81a 	bl	800292c <memset>

    // Construct the JSON command for set_visible
    snprintf(json_command, sizeof(json_command),
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <set_visible+0x38>)
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <set_visible+0x3c>)
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	2d01      	cmp	r5, #1
 8000902:	bf08      	it	eq
 8000904:	4613      	moveq	r3, r2
 8000906:	a802      	add	r0, sp, #8
 8000908:	4a06      	ldr	r2, [pc, #24]	@ (8000924 <set_visible+0x40>)
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	4623      	mov	r3, r4
 800090e:	f001 ffd9 	bl	80028c4 <sniprintf>
             "ST<{\"cmd_code\":\"set_visible\",\"type\":\"widget\",\"widget\":\"%s\",\"visible\":%s}>ET",
             widget_name, (visible == 1) ? "true" : "false");

    // Send the JSON command using USART
    USART_SendCommand(json_command);
 8000912:	a802      	add	r0, sp, #8
 8000914:	f000 fd22 	bl	800135c <USART_SendCommand>
}
 8000918:	b043      	add	sp, #268	@ 0x10c
 800091a:	bd30      	pop	{r4, r5, pc}
 800091c:	08003308 	.word	0x08003308
 8000920:	0800330d 	.word	0x0800330d
 8000924:	08003313 	.word	0x08003313

08000928 <LCD_DisplayIcon>:




void LCD_DisplayIcon(uint16_t ui16X, uint16_t ui16Y, uint16_t ui16Index) {
 8000928:	b510      	push	{r4, lr}
 800092a:	4614      	mov	r4, r2
	//Get label name from coordinates
    const char *icon_name = get_label_name(ui16X, ui16Y);
 800092c:	f7ff ff88 	bl	8000840 <get_label_name>

    // Check if the icon name is found for the given coordinates
    if (icon_name == NULL) {
 8000930:	b920      	cbnz	r0, 800093c <LCD_DisplayIcon+0x14>
        return;
    }

    // Call set_visible function to update visibility
    set_visible(icon_name,ui16Index);
}
 8000932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USART_SendCommand("ST<{\"cmd_code\":\"error\",\"message\":\"No Icon Found\"}>ET");
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <LCD_DisplayIcon+0x20>)
 8000938:	f000 bd10 	b.w	800135c <USART_SendCommand>
    set_visible(icon_name,ui16Index);
 800093c:	b2e1      	uxtb	r1, r4
}
 800093e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    set_visible(icon_name,ui16Index);
 8000942:	f7ff bfcf 	b.w	80008e4 <set_visible>
 8000946:	bf00      	nop
 8000948:	0800335f 	.word	0x0800335f

0800094c <get_window_name_from_index>:

};


const char* get_window_name_from_index(uint16_t index) {
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 800094c:	2300      	movs	r3, #0
const char* get_window_name_from_index(uint16_t index) {
 800094e:	b510      	push	{r4, lr}
        if (index_mapping[i].index == index) {
 8000950:	4a06      	ldr	r2, [pc, #24]	@ (800096c <get_window_name_from_index+0x20>)
 8000952:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
 8000956:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800095a:	4284      	cmp	r4, r0
 800095c:	d101      	bne.n	8000962 <get_window_name_from_index+0x16>
            return index_mapping[i].window_name;
 800095e:	6848      	ldr	r0, [r1, #4]
        }
    }
    return NULL; // Return NULL if no matching window is found
}
 8000960:	bd10      	pop	{r4, pc}
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000962:	3301      	adds	r3, #1
 8000964:	2b1e      	cmp	r3, #30
 8000966:	d1f4      	bne.n	8000952 <get_window_name_from_index+0x6>
    return NULL; // Return NULL if no matching window is found
 8000968:	2000      	movs	r0, #0
 800096a:	e7f9      	b.n	8000960 <get_window_name_from_index+0x14>
 800096c:	08003d44 	.word	0x08003d44

08000970 <open_win>:

// Function to send open window command for a specific widget
void open_win(const char* widget) {
    // Construct JSON command
    char json_command[256] = {0};
 8000970:	2100      	movs	r1, #0
void open_win(const char* widget) {
 8000972:	b510      	push	{r4, lr}
 8000974:	4604      	mov	r4, r0
 8000976:	b0c6      	sub	sp, #280	@ 0x118
    char json_command[256] = {0};
 8000978:	22fc      	movs	r2, #252	@ 0xfc
 800097a:	a807      	add	r0, sp, #28
 800097c:	9106      	str	r1, [sp, #24]
 800097e:	f001 ffd5 	bl	800292c <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s",
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <open_win+0x50>)
 8000984:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000988:	9303      	str	r3, [sp, #12]
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <open_win+0x54>)
 800098c:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <open_win+0x58>)
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <open_win+0x5c>)
 8000992:	9404      	str	r4, [sp, #16]
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <open_win+0x60>)
 8000998:	a806      	add	r0, sp, #24
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <open_win+0x64>)
 800099e:	f001 ff91 	bl	80028c4 <sniprintf>
             CMD_PREFIX, CMD_CODE_OPEN_WINDOW, CMD_SUFFIX_TYPE, WIDGET_TYPE_WINDOW,
             CMD_SUFFIX_WIDGET, widget);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 80009a2:	a806      	add	r0, sp, #24
 80009a4:	f7ff fbea 	bl	800017c <strlen>
 80009a8:	490b      	ldr	r1, [pc, #44]	@ (80009d8 <open_win+0x68>)
 80009aa:	f1c0 02ff 	rsb	r2, r0, #255	@ 0xff
 80009ae:	a806      	add	r0, sp, #24
 80009b0:	f001 ffc4 	bl	800293c <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 80009b4:	a806      	add	r0, sp, #24
 80009b6:	f000 fcd1 	bl	800135c <USART_SendCommand>
}
 80009ba:	b046      	add	sp, #280	@ 0x118
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	bf00      	nop
 80009c0:	080032e1 	.word	0x080032e1
 80009c4:	08003394 	.word	0x08003394
 80009c8:	080032c9 	.word	0x080032c9
 80009cc:	080032ee 	.word	0x080032ee
 80009d0:	0800339b 	.word	0x0800339b
 80009d4:	080032b4 	.word	0x080032b4
 80009d8:	0800338e 	.word	0x0800338e

080009dc <set_image>:

void set_image(const char* widget_name, const char* image_name) {
 80009dc:	b530      	push	{r4, r5, lr}
 80009de:	4604      	mov	r4, r0
 80009e0:	460d      	mov	r5, r1
    char json_command[256] = {0}; // Buffer for the JSON command
 80009e2:	2100      	movs	r1, #0
void set_image(const char* widget_name, const char* image_name) {
 80009e4:	b0c3      	sub	sp, #268	@ 0x10c
    char json_command[256] = {0}; // Buffer for the JSON command
 80009e6:	22fc      	movs	r2, #252	@ 0xfc
 80009e8:	a803      	add	r0, sp, #12
 80009ea:	9102      	str	r1, [sp, #8]
 80009ec:	f001 ff9e 	bl	800292c <memset>

    // Construct the JSON command for setting the image
    snprintf(json_command, sizeof(json_command),
 80009f0:	4623      	mov	r3, r4
 80009f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f6:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <set_image+0x30>)
 80009f8:	9500      	str	r5, [sp, #0]
 80009fa:	a802      	add	r0, sp, #8
 80009fc:	f001 ff62 	bl	80028c4 <sniprintf>
             "ST<{\"cmd_code\":\"set_image\",\"type\":\"image\",\"widget\":\"%s\",\"image\":\"%s\"}>ET",
             widget_name, image_name);

    // Send the JSON command using USART
    USART_SendCommand(json_command);
 8000a00:	a802      	add	r0, sp, #8
 8000a02:	f000 fcab 	bl	800135c <USART_SendCommand>
}
 8000a06:	b043      	add	sp, #268	@ 0x10c
 8000a08:	bd30      	pop	{r4, r5, pc}
 8000a0a:	bf00      	nop
 8000a0c:	080033a4 	.word	0x080033a4

08000a10 <LCD_DisplayImage>:

void LCD_DisplayImage(uint16_t ui16index) {
 8000a10:	b508      	push	{r3, lr}
    // Get window name from index
    const char *window_name = get_window_name_from_index(ui16index);
 8000a12:	f7ff ff9b 	bl	800094c <get_window_name_from_index>

    if (window_name == NULL) {
 8000a16:	b920      	cbnz	r0, 8000a22 <LCD_DisplayImage+0x12>
        return;
    }

    // Open the window using open_win
    open_win(window_name);
}
 8000a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        USART_SendCommand("ST<{\"cmd_code\":\"error\",\"message\":\"Invalid Index\"}>ET");
 8000a1c:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <LCD_DisplayImage+0x1c>)
 8000a1e:	f000 bc9d 	b.w	800135c <USART_SendCommand>
}
 8000a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    open_win(window_name);
 8000a26:	f7ff bfa3 	b.w	8000970 <open_win>
 8000a2a:	bf00      	nop
 8000a2c:	080033ed 	.word	0x080033ed

08000a30 <LCD_DisplayNewPatientSelection>:

}

void LCD_DisplayNewPatientSelection(void)
{
	LCD_DisplayImage(NEW_PATIENT_IMAGE_INDEX);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff bfed 	b.w	8000a10 <LCD_DisplayImage>

08000a36 <LCD_DisplayNewPatientSelectionMenu>:
}

void LCD_DisplayNewPatientSelectionMenu(uint8_t ui8Num)
{
	if(ui8Num == 1)
 8000a36:	2801      	cmp	r0, #1
{
 8000a38:	b510      	push	{r4, lr}
	{
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, CLEAR_BOX_NO_ICON_INDEX);
 8000a3a:	f04f 0200 	mov.w	r2, #0
{
 8000a3e:	4604      	mov	r4, r0
	if(ui8Num == 1)
 8000a40:	d10a      	bne.n	8000a58 <LCD_DisplayNewPatientSelectionMenu+0x22>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, CLEAR_BOX_NO_ICON_INDEX);
 8000a42:	2189      	movs	r1, #137	@ 0x89
 8000a44:	20b5      	movs	r0, #181	@ 0xb5
 8000a46:	f7ff ff6f 	bl	8000928 <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, BOX_YES_ICON_INDEX);
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	215e      	movs	r1, #94	@ 0x5e
 8000a4e:	20b6      	movs	r0, #182	@ 0xb6
	{
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, CLEAR_BOX_YES_ICON_INDEX);
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
	}

}
 8000a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
 8000a54:	f7ff bf68 	b.w	8000928 <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_YES_ICON_X, VERIFY_NEW_PATIENT_BOX_YES_ICON_Y, CLEAR_BOX_YES_ICON_INDEX);
 8000a58:	215e      	movs	r1, #94	@ 0x5e
 8000a5a:	20b6      	movs	r0, #182	@ 0xb6
 8000a5c:	f7ff ff64 	bl	8000928 <LCD_DisplayIcon>
		LCD_DisplayIcon(VERIFY_NEW_PATIENT_BOX_NO_ICON_X, VERIFY_NEW_PATIENT_BOX_NO_ICON_Y, BOX_NO_ICON_INDEX);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2189      	movs	r1, #137	@ 0x89
 8000a64:	20b5      	movs	r0, #181	@ 0xb5
 8000a66:	e7f3      	b.n	8000a50 <LCD_DisplayNewPatientSelectionMenu+0x1a>

08000a68 <LCD_DisplayConfirmNewPatient>:

void LCD_DisplayConfirmNewPatient(void)
{
	LCD_DisplayImage(CONFIRM_NEW_PATIENT_IMAGE_INDEX);
 8000a68:	2002      	movs	r0, #2
 8000a6a:	f7ff bfd1 	b.w	8000a10 <LCD_DisplayImage>

08000a6e <LCD_DisplayFlashErasingScreen>:
}

void LCD_DisplayFlashErasingScreen(void)
{
	LCD_DisplayImage(ERASING_OLD_DATA_IMAGE_INDEX);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f7ff bfce 	b.w	8000a10 <LCD_DisplayImage>

08000a74 <LCD_DisplayClampTubesMain>:
}

void LCD_DisplayClampTubesMain(void)
{
	LCD_DisplayImage(CLAMP_TUBES_IMAGE_INDEX_1);
 8000a74:	2004      	movs	r0, #4
 8000a76:	f7ff bfcb 	b.w	8000a10 <LCD_DisplayImage>

08000a7a <LCD_DisplayClampTubesPause>:
}

void LCD_DisplayClampTubesPause(void)
{
	LCD_DisplayImage(CLAMP_TUBES_IMAGE_INDEX_2);
 8000a7a:	2005      	movs	r0, #5
 8000a7c:	f7ff bfc8 	b.w	8000a10 <LCD_DisplayImage>

08000a80 <LCD_DisplayUnclampTubes>:
}

void LCD_DisplayUnclampTubes(void)
{
 8000a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a84:	b08b      	sub	sp, #44	@ 0x2c
	LCD_DisplayImage(UNCLAMP_TUBES_IMAGE_INDEX);
	const char* image_label_name = "image1";
	const char* percenatge_label_name = "label18";
	const char* images[] = {"loading2", "loading4", "loading6", "loading8", "loading10"};
 8000a86:	466d      	mov	r5, sp
 8000a88:	4c15      	ldr	r4, [pc, #84]	@ (8000ae0 <LCD_DisplayUnclampTubes+0x60>)
	LCD_DisplayImage(UNCLAMP_TUBES_IMAGE_INDEX);
 8000a8a:	2025      	movs	r0, #37	@ 0x25
 8000a8c:	f7ff ffc0 	bl	8000a10 <LCD_DisplayImage>
	const char* images[] = {"loading2", "loading4", "loading6", "loading8", "loading10"};
 8000a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a94:	f854 3b04 	ldr.w	r3, [r4], #4
 8000a98:	466e      	mov	r6, sp
 8000a9a:	602b      	str	r3, [r5, #0]
	const char* text[]= {"20 %","40%","60%","80%","100%"};
 8000a9c:	ad05      	add	r5, sp, #20
 8000a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aa2:	6823      	ldr	r3, [r4, #0]
	int num_images = sizeof(images) / sizeof(images[0]);
	for (int i = 0; i < num_images; ++i)
 8000aa4:	2400      	movs	r4, #0
	{
		set_image(image_label_name, images[i]);
 8000aa6:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 8000ae4 <LCD_DisplayUnclampTubes+0x64>
		set_text("label", percenatge_label_name, text[i]);
 8000aaa:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 8000ae8 <LCD_DisplayUnclampTubes+0x68>
 8000aae:	4f0f      	ldr	r7, [pc, #60]	@ (8000aec <LCD_DisplayUnclampTubes+0x6c>)
	const char* text[]= {"20 %","40%","60%","80%","100%"};
 8000ab0:	602b      	str	r3, [r5, #0]
	for (int i = 0; i < num_images; ++i)
 8000ab2:	ad05      	add	r5, sp, #20
		set_image(image_label_name, images[i]);
 8000ab4:	4648      	mov	r0, r9
 8000ab6:	f856 1b04 	ldr.w	r1, [r6], #4
 8000aba:	f7ff ff8f 	bl	80009dc <set_image>
		set_text("label", percenatge_label_name, text[i]);
 8000abe:	4641      	mov	r1, r8
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f855 2b04 	ldr.w	r2, [r5], #4
 8000ac6:	f7ff fed3 	bl	8000870 <set_text>
	for (int i = 0; i < num_images; ++i)
 8000aca:	3401      	adds	r4, #1
	    HAL_Delay(1000); //
 8000acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad0:	f000 fcc2 	bl	8001458 <HAL_Delay>
	for (int i = 0; i < num_images; ++i)
 8000ad4:	2c05      	cmp	r4, #5
 8000ad6:	d1ed      	bne.n	8000ab4 <LCD_DisplayUnclampTubes+0x34>
	}
}
 8000ad8:	b00b      	add	sp, #44	@ 0x2c
 8000ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800328c 	.word	0x0800328c
 8000ae4:	08003422 	.word	0x08003422
 8000ae8:	08003429 	.word	0x08003429
 8000aec:	08003302 	.word	0x08003302

08000af0 <LCD_ConfirmParameterAndBeginSuctionScreen>:

void LCD_ConfirmParameterAndBeginSuctionScreen(void)
{
	LCD_DisplayImage(SAVE_SETTINGS_AND_BEGIN_SUCTION_IMAGE_INDEX);
 8000af0:	203a      	movs	r0, #58	@ 0x3a
 8000af2:	f7ff bf8d 	b.w	8000a10 <LCD_DisplayImage>

08000af6 <LCD_DisplayNewMainSettingsPage1>:

/* New Settings Implementation */
/* CHECK LATER */
void LCD_DisplayNewMainSettingsPage1(void)
{
	LCD_DisplayImage(SETTINGS_SCREEN_1_IMAGE_INDEX);
 8000af6:	2032      	movs	r0, #50	@ 0x32
 8000af8:	f7ff bf8a 	b.w	8000a10 <LCD_DisplayImage>

08000afc <LCD_DisplayPharyngealPortSuction>:
//}
//

void LCD_DisplayPharyngealPortSuction(void)
{
	LCD_DisplayImage(ORO_SUCTION_IMAGE_INDEX);
 8000afc:	202a      	movs	r0, #42	@ 0x2a
 8000afe:	f7ff bf87 	b.w	8000a10 <LCD_DisplayImage>

08000b02 <LCD_DisplayBeginSuction>:
//	LCD_DisplayText(F_MODE, BACK_TEXT_X, BACK_TEXT_Y, "Back", LCD_8X16_FONT_INDEX, LIGHTGREY, WHITE);
}

void LCD_DisplayBeginSuction(void)
{
	LCD_DisplayImage(BEGIN_SUCTION_IMAGE_INDEX);
 8000b02:	2028      	movs	r0, #40	@ 0x28
 8000b04:	f7ff bf84 	b.w	8000a10 <LCD_DisplayImage>

08000b08 <LCD_DisplayPauseScreen>:
//	LCD_DisplayText(F_MODE, START_SUCTION_TEXT_2_X, START_SUCTION_TEXT_2_Y, "Press [START] To Begin Suction", LCD_8X16_FONT_INDEX, BLACK, WHITE);
}

void LCD_DisplayPauseScreen(void)
{
	LCD_DisplayImage(PAUSE_SCREEN_IMAGE_INDEX);
 8000b08:	202f      	movs	r0, #47	@ 0x2f
 8000b0a:	f7ff bf81 	b.w	8000a10 <LCD_DisplayImage>
	...

08000b10 <SystemClock_Config>:
  * @retval None
  */

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b10:	221c      	movs	r2, #28
{
 8000b12:	b530      	push	{r4, r5, lr}
 8000b14:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	2100      	movs	r1, #0
 8000b18:	eb0d 0002 	add.w	r0, sp, r2
 8000b1c:	f001 ff06 	bl	800292c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	2214      	movs	r2, #20
 8000b22:	2100      	movs	r1, #0
 8000b24:	4668      	mov	r0, sp
 8000b26:	f001 ff01 	bl	800292c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <SystemClock_Config+0x78>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b30:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b3c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b46:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4e:	2401      	movs	r4, #1
 8000b50:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b52:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b56:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f001 f819 	bl	8001b94 <HAL_RCC_OscConfig>
 8000b62:	b108      	cbz	r0, 8000b68 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6a:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b70:	4621      	mov	r1, r4
 8000b72:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	e9cd 3500 	strd	r3, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b78:	f001 fa52 	bl	8002020 <HAL_RCC_ClockConfig>
 8000b7c:	b108      	cbz	r0, 8000b82 <SystemClock_Config+0x72>
 8000b7e:	b672      	cpsid	i
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <SystemClock_Config+0x70>
}
 8000b82:	b013      	add	sp, #76	@ 0x4c
 8000b84:	bd30      	pop	{r4, r5, pc}
 8000b86:	bf00      	nop
 8000b88:	40007000 	.word	0x40007000

08000b8c <main>:
{
 8000b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        LCD_DisplayNewPatientSelection();
 8000b90:	2500      	movs	r5, #0
  HAL_Init();
 8000b92:	f000 fc3f 	bl	8001414 <HAL_Init>
  SystemClock_Config();
 8000b96:	f7ff ffbb 	bl	8000b10 <SystemClock_Config>
  MX_GPIO_Init();
 8000b9a:	f7ff fce3 	bl	8000564 <MX_GPIO_Init>
  KBD_Init();
 8000b9e:	f7ff fdb5 	bl	800070c <KBD_Init>
  LCD_Initialization();
 8000ba2:	f7ff fe4b 	bl	800083c <LCD_Initialization>
  MX_ADC_Init();
 8000ba6:	f7ff fc67 	bl	8000478 <MX_ADC_Init>
  MX_I2C1_Init();
 8000baa:	f7ff fd17 	bl	80005dc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000bae:	f7ff fd33 	bl	8000618 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000bb2:	f000 f907 	bl	8000dc4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000bb6:	f000 f9a9 	bl	8000f0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bba:	f000 f9db 	bl	8000f74 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000bbe:	f000 fa6b 	bl	8001098 <MX_TIM11_Init>
  MX_UART5_Init();
 8000bc2:	f000 faad 	bl	8001120 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000bc6:	f000 fac7 	bl	8001158 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bca:	f000 fae1 	bl	8001190 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bce:	f000 fafb 	bl	80011c8 <MX_USART3_UART_Init>
  HAL_Delay(5000); //Fixed Delay
 8000bd2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000bd6:	f000 fc3f 	bl	8001458 <HAL_Delay>
        LCD_DisplayNewPatientSelection();
 8000bda:	462e      	mov	r6, r5
 8000bdc:	f7ff ff28 	bl	8000a30 <LCD_DisplayNewPatientSelection>
              if (KBD_ButtonStatus(BUTTON_UP) == BUTTON_CLICKED)
 8000be0:	f04f 0802 	mov.w	r8, #2
            	  if(currentOption == 1)
 8000be4:	4f75      	ldr	r7, [pc, #468]	@ (8000dbc <main+0x230>)
      switch (currentScreen)
 8000be6:	2e0d      	cmp	r6, #13
 8000be8:	f200 80d8 	bhi.w	8000d9c <main+0x210>
 8000bec:	e8df f006 	tbb	[pc, r6]
 8000bf0:	2bd61ed8 	.word	0x2bd61ed8
 8000bf4:	4f44d636 	.word	0x4f44d636
 8000bf8:	d6d6568a 	.word	0xd6d6568a
 8000bfc:	61d6      	.short	0x61d6
              else if (KBD_ButtonStatus(BUTTON_DOWN) == BUTTON_CLICKED)
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f7ff fde2 	bl	80007c8 <KBD_ButtonStatus>
 8000c04:	2801      	cmp	r0, #1
 8000c06:	d103      	bne.n	8000c10 <main+0x84>
                  LCD_DisplayNewPatientSelectionMenu(2);  // Highlight Option 2
 8000c08:	2002      	movs	r0, #2
            	  currentOption = 2;
 8000c0a:	f8c7 8000 	str.w	r8, [r7]
                  LCD_DisplayNewPatientSelectionMenu(2);  // Highlight Option 2
 8000c0e:	e0ce      	b.n	8000dae <main+0x222>
              else if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8000c10:	2004      	movs	r0, #4
 8000c12:	f7ff fdd9 	bl	80007c8 <KBD_ButtonStatus>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d161      	bne.n	8000cde <main+0x152>
            	  if(currentOption == 1)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d155      	bne.n	8000ccc <main+0x140>
            		  LCD_DisplayConfirmNewPatient();
 8000c20:	f7ff ff22 	bl	8000a68 <LCD_DisplayConfirmNewPatient>
            		  HAL_Delay(300);
 8000c24:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c28:	f000 fc16 	bl	8001458 <HAL_Delay>
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff fdcb 	bl	80007c8 <KBD_ButtonStatus>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d176      	bne.n	8000d24 <main+0x198>
                  LCD_DisplayFlashErasingScreen();
 8000c36:	f7ff ff1a 	bl	8000a6e <LCD_DisplayFlashErasingScreen>
                  HAL_Delay(2000);
 8000c3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c3e:	f000 fc0b 	bl	8001458 <HAL_Delay>
                  LCD_DisplayClampTubesMain();
 8000c42:	f7ff ff17 	bl	8000a74 <LCD_DisplayClampTubesMain>
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8000c46:	2004      	movs	r0, #4
 8000c48:	f7ff fdbe 	bl	80007c8 <KBD_ButtonStatus>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d170      	bne.n	8000d32 <main+0x1a6>
                  LCD_DisplayClampTubesPause();
 8000c50:	f7ff ff13 	bl	8000a7a <LCD_DisplayClampTubesPause>
                  HAL_Delay(300);
 8000c54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c58:	f000 fbfe 	bl	8001458 <HAL_Delay>
              if (KBD_ButtonStatus(BUTTON_OK) == BUTTON_PRESSED)
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff fdb3 	bl	80007c8 <KBD_ButtonStatus>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d16b      	bne.n	8000d3e <main+0x1b2>
                  LCD_DisplayUnclampTubes();
 8000c66:	f7ff ff0b 	bl	8000a80 <LCD_DisplayUnclampTubes>
                  HAL_Delay(1000);  // 3-second delay
 8000c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6e:	f000 fbf3 	bl	8001458 <HAL_Delay>
                  previousScreen=currentScreen;
 8000c72:	2506      	movs	r5, #6
                  LCD_ConfirmParameterAndBeginSuctionScreen();
 8000c74:	f7ff ff3c 	bl	8000af0 <LCD_ConfirmParameterAndBeginSuctionScreen>
              if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f7ff fda5 	bl	80007c8 <KBD_ButtonStatus>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d163      	bne.n	8000d4a <main+0x1be>
                  LCD_DisplayBeginSuction();
 8000c82:	f7ff ff3e 	bl	8000b02 <LCD_DisplayBeginSuction>
                  HAL_Delay(300);
 8000c86:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c8a:	f000 fbe5 	bl	8001458 <HAL_Delay>
              if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8000c8e:	2006      	movs	r0, #6
 8000c90:	f7ff fd9a 	bl	80007c8 <KBD_ButtonStatus>
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d15e      	bne.n	8000d56 <main+0x1ca>
                  LCD_DisplayPharyngealPortSuction();  // Navigate to Pharyngeal Port Suction
 8000c98:	f7ff ff30 	bl	8000afc <LCD_DisplayPharyngealPortSuction>
        	  if (KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f7ff fd93 	bl	80007c8 <KBD_ButtonStatus>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d15d      	bne.n	8000d62 <main+0x1d6>
        		  LCD_DisplayPauseScreen();
 8000ca6:	f7ff ff2f 	bl	8000b08 <LCD_DisplayPauseScreen>
        		  HAL_Delay(300);
 8000caa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cae:	f000 fbd3 	bl	8001458 <HAL_Delay>
                  previousScreen=currentScreen;
 8000cb2:	260d      	movs	r6, #13
        	  if(KBD_ButtonStatus(BUTTON_START_PAUSE) == BUTTON_PRESSED)
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f7ff fd87 	bl	80007c8 <KBD_ButtonStatus>
 8000cba:	bb18      	cbnz	r0, 8000d04 <main+0x178>
        		  LCD_DisplayPharyngealPortSuction();
 8000cbc:	f7ff ff1e 	bl	8000afc <LCD_DisplayPharyngealPortSuction>
        		  HAL_Delay(300);
 8000cc0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cc4:	f000 fbc8 	bl	8001458 <HAL_Delay>
        		  currentScreen= SCREEN_ORO_PORT;
 8000cc8:	2609      	movs	r6, #9
 8000cca:	e01b      	b.n	8000d04 <main+0x178>
            	  else if (currentOption == 2){
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d167      	bne.n	8000da0 <main+0x214>
                  LCD_DisplayClampTubesMain();
 8000cd0:	f7ff fed0 	bl	8000a74 <LCD_DisplayClampTubesMain>
                  HAL_Delay(300);
 8000cd4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cd8:	f000 fbbe 	bl	8001458 <HAL_Delay>
 8000cdc:	e7b3      	b.n	8000c46 <main+0xba>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f7ff fd72 	bl	80007c8 <KBD_ButtonStatus>
 8000ce4:	b910      	cbnz	r0, 8000cec <main+0x160>
                  LCD_DisplayNewPatientSelection();
 8000ce6:	f7ff fea3 	bl	8000a30 <LCD_DisplayNewPatientSelection>
 8000cea:	e062      	b.n	8000db2 <main+0x226>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8000cec:	2008      	movs	r0, #8
 8000cee:	f7ff fd6b 	bl	80007c8 <KBD_ButtonStatus>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d154      	bne.n	8000da0 <main+0x214>
                  LCD_DisplayNewMainSettingsPage1();
 8000cf6:	f7ff fefe 	bl	8000af6 <LCD_DisplayNewMainSettingsPage1>
                  HAL_Delay(300);
 8000cfa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cfe:	f000 fbab 	bl	8001458 <HAL_Delay>
        		  currentScreen= SCREEN_ORO_PORT;
 8000d02:	2608      	movs	r6, #8
        	  if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 8000d04:	2005      	movs	r0, #5
 8000d06:	f7ff fd5f 	bl	80007c8 <KBD_ButtonStatus>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	f47f af6a 	bne.w	8000be6 <main+0x5a>
                      switch (previousScreen)
 8000d12:	1e6b      	subs	r3, r5, #1
 8000d14:	2b06      	cmp	r3, #6
 8000d16:	d826      	bhi.n	8000d66 <main+0x1da>
 8000d18:	e8df f003 	tbb	[pc, r3]
 8000d1c:	3431252d 	.word	0x3431252d
 8000d20:	3a37      	.short	0x3a37
 8000d22:	3d          	.byte	0x3d
 8000d23:	00          	.byte	0x00
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 8000d24:	2005      	movs	r0, #5
 8000d26:	f7ff fd4f 	bl	80007c8 <KBD_ButtonStatus>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	f47f af7e 	bne.w	8000c2c <main+0xa0>
 8000d30:	e7d9      	b.n	8000ce6 <main+0x15a>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 8000d32:	2005      	movs	r0, #5
 8000d34:	f7ff fd48 	bl	80007c8 <KBD_ButtonStatus>
 8000d38:	2800      	cmp	r0, #0
 8000d3a:	d184      	bne.n	8000c46 <main+0xba>
 8000d3c:	e7d3      	b.n	8000ce6 <main+0x15a>
              else if (KBD_ButtonStatus(BUTTON_BACK) == BUTTON_PRESSED)
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f7ff fd42 	bl	80007c8 <KBD_ButtonStatus>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d189      	bne.n	8000c5c <main+0xd0>
 8000d48:	e7c2      	b.n	8000cd0 <main+0x144>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f7ff fd3c 	bl	80007c8 <KBD_ButtonStatus>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d191      	bne.n	8000c78 <main+0xec>
 8000d54:	e7cf      	b.n	8000cf6 <main+0x16a>
              else if (KBD_ButtonStatus(BUTTON_SETTINGS) == BUTTON_PRESSED)
 8000d56:	2008      	movs	r0, #8
 8000d58:	f7ff fd36 	bl	80007c8 <KBD_ButtonStatus>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d196      	bne.n	8000c8e <main+0x102>
 8000d60:	e7c9      	b.n	8000cf6 <main+0x16a>
 8000d62:	2609      	movs	r6, #9
 8000d64:	e7a6      	b.n	8000cb4 <main+0x128>
                              LCD_DisplayNewPatientSelection();
 8000d66:	f7ff fe63 	bl	8000a30 <LCD_DisplayNewPatientSelection>
                      HAL_Delay(300);
 8000d6a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d6e:	f000 fb73 	bl	8001458 <HAL_Delay>
 8000d72:	4626      	mov	r6, r4
 8000d74:	e737      	b.n	8000be6 <main+0x5a>
                              LCD_DisplayConfirmNewPatient();
 8000d76:	f7ff fe77 	bl	8000a68 <LCD_DisplayConfirmNewPatient>
                      currentScreen = previousScreen;  // Go back to the previous screen
 8000d7a:	462c      	mov	r4, r5
                              break;
 8000d7c:	e7f5      	b.n	8000d6a <main+0x1de>
                              LCD_DisplayClampTubesMain();
 8000d7e:	f7ff fe79 	bl	8000a74 <LCD_DisplayClampTubesMain>
                              break;
 8000d82:	e7fa      	b.n	8000d7a <main+0x1ee>
                              LCD_DisplayClampTubesPause();
 8000d84:	f7ff fe79 	bl	8000a7a <LCD_DisplayClampTubesPause>
                              break;
 8000d88:	e7f7      	b.n	8000d7a <main+0x1ee>
                              LCD_DisplayUnclampTubes();
 8000d8a:	f7ff fe79 	bl	8000a80 <LCD_DisplayUnclampTubes>
                              break;
 8000d8e:	e7f4      	b.n	8000d7a <main+0x1ee>
                              LCD_ConfirmParameterAndBeginSuctionScreen();
 8000d90:	f7ff feae 	bl	8000af0 <LCD_ConfirmParameterAndBeginSuctionScreen>
                              break;
 8000d94:	e7f1      	b.n	8000d7a <main+0x1ee>
                              LCD_DisplayBeginSuction();
 8000d96:	f7ff feb4 	bl	8000b02 <LCD_DisplayBeginSuction>
 8000d9a:	e7ee      	b.n	8000d7a <main+0x1ee>
              LCD_DisplayNewPatientSelection();
 8000d9c:	f7ff fe48 	bl	8000a30 <LCD_DisplayNewPatientSelection>
              if (KBD_ButtonStatus(BUTTON_UP) == BUTTON_CLICKED)
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fd11 	bl	80007c8 <KBD_ButtonStatus>
 8000da6:	2801      	cmp	r0, #1
 8000da8:	f47f af29 	bne.w	8000bfe <main+0x72>
            	  currentOption = 1;
 8000dac:	6038      	str	r0, [r7, #0]
                  LCD_DisplayNewPatientSelectionMenu(2);  // Highlight Option 2
 8000dae:	f7ff fe42 	bl	8000a36 <LCD_DisplayNewPatientSelectionMenu>
                  HAL_Delay(300);
 8000db2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000db6:	f000 fb4f 	bl	8001458 <HAL_Delay>
 8000dba:	e7f1      	b.n	8000da0 <main+0x214>
 8000dbc:	20000040 	.word	0x20000040

08000dc0 <Error_Handler>:
 8000dc0:	b672      	cpsid	i
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <Error_Handler+0x2>

08000dc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dc4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <MX_SPI1_Init+0x40>)
 8000dce:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd2:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de0:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dea:	230a      	movs	r3, #10
 8000dec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dee:	f001 f9f9 	bl	80021e4 <HAL_SPI_Init>
 8000df2:	b118      	cbz	r0, 8000dfc <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000df8:	f7ff bfe2 	b.w	8000dc0 <Error_Handler>
}
 8000dfc:	bd08      	pop	{r3, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000214 	.word	0x20000214
 8000e04:	40013000 	.word	0x40013000

08000e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	2214      	movs	r2, #20
 8000e10:	2100      	movs	r1, #0
 8000e12:	a803      	add	r0, sp, #12
 8000e14:	f001 fd8a 	bl	800292c <memset>
  if(spiHandle->Instance==SPI1)
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <HAL_SPI_MspInit+0x60>)
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d120      	bne.n	8000e62 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e20:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000e24:	6a1a      	ldr	r2, [r3, #32]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e26:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e2c:	621a      	str	r2, [r3, #32]
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e30:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	f042 0210 	orr.w	r2, r2, #16
 8000e40:	61da      	str	r2, [r3, #28]
 8000e42:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5c:	a903      	add	r1, sp, #12
 8000e5e:	f000 fcd3 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e62:	b008      	add	sp, #32
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_MspInit+0x40>)
{
 8000e72:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8000e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e7e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8000e82:	9201      	str	r2, [sp, #4]
 8000e84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	621a      	str	r2, [r3, #32]
 8000e8e:	6a1a      	ldr	r2, [r3, #32]
 8000e90:	f002 0201 	and.w	r2, r2, #1
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e9a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	9303      	str	r3, [sp, #12]
 8000ea8:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	b004      	add	sp, #16
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler>

08000eb6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler>

08000eb8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler>

08000eba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler>

08000ebc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler>

08000ebe <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 bab6 	b.w	8001434 <HAL_IncTick>

08000ec8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <_sbrk+0x30>)
{
 8000eca:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000ecc:	6811      	ldr	r1, [r2, #0]
{
 8000ece:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000ed0:	b909      	cbnz	r1, 8000ed6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000ed2:	490a      	ldr	r1, [pc, #40]	@ (8000efc <_sbrk+0x34>)
 8000ed4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	6810      	ldr	r0, [r2, #0]
 8000ed8:	4909      	ldr	r1, [pc, #36]	@ (8000f00 <_sbrk+0x38>)
 8000eda:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <_sbrk+0x3c>)
 8000edc:	4403      	add	r3, r0
 8000ede:	1b09      	subs	r1, r1, r4
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d906      	bls.n	8000ef2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ee4:	f001 fd3e 	bl	8002964 <__errno>
 8000ee8:	230c      	movs	r3, #12
 8000eea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000ef0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000ef2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000ef4:	e7fc      	b.n	8000ef0 <_sbrk+0x28>
 8000ef6:	bf00      	nop
 8000ef8:	2000026c 	.word	0x2000026c
 8000efc:	200005a0 	.word	0x200005a0
 8000f00:	20014000 	.word	0x20014000
 8000f04:	00000400 	.word	0x00000400

08000f08 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	4770      	bx	lr
	...

08000f0c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	2210      	movs	r2, #16
 8000f10:	2100      	movs	r1, #0
 8000f12:	a802      	add	r0, sp, #8
 8000f14:	f001 fd0a 	bl	800292c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f1a:	4814      	ldr	r0, [pc, #80]	@ (8000f6c <MX_TIM3_Init+0x60>)
 8000f1c:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.Prescaler = 0;
 8000f22:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8000f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f32:	f001 fa27 	bl	8002384 <HAL_TIM_Base_Init>
 8000f36:	b108      	cbz	r0, 8000f3c <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8000f38:	f7ff ff42 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f40:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <MX_TIM3_Init+0x60>)
 8000f42:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f46:	f001 fae6 	bl	8002516 <HAL_TIM_ConfigClockSource>
 8000f4a:	b108      	cbz	r0, 8000f50 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 8000f4c:	f7ff ff38 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f52:	4669      	mov	r1, sp
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f5a:	f001 fb81 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	b108      	cbz	r0, 8000f64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f60:	f7ff ff2e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f64:	b007      	add	sp, #28
 8000f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f6a:	bf00      	nop
 8000f6c:	200002f0 	.word	0x200002f0
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	2210      	movs	r2, #16
 8000f78:	2100      	movs	r1, #0
 8000f7a:	a802      	add	r0, sp, #8
 8000f7c:	f001 fcd6 	bl	800292c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f82:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <MX_TIM4_Init+0x60>)
 8000f84:	4a14      	ldr	r2, [pc, #80]	@ (8000fd8 <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.Prescaler = 0;
 8000f8a:	e9c0 2300 	strd	r2, r3, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
 8000f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f9a:	f001 f9f3 	bl	8002384 <HAL_TIM_Base_Init>
 8000f9e:	b108      	cbz	r0, 8000fa4 <MX_TIM4_Init+0x30>
  {
    Error_Handler();
 8000fa0:	f7ff ff0e 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fa8:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <MX_TIM4_Init+0x60>)
 8000faa:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fae:	f001 fab2 	bl	8002516 <HAL_TIM_ConfigClockSource>
 8000fb2:	b108      	cbz	r0, 8000fb8 <MX_TIM4_Init+0x44>
  {
    Error_Handler();
 8000fb4:	f7ff ff04 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fba:	4669      	mov	r1, sp
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc2:	f001 fb4d 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	b108      	cbz	r0, 8000fcc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000fc8:	f7ff fefa 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fcc:	b007      	add	sp, #28
 8000fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fd2:	bf00      	nop
 8000fd4:	200002b0 	.word	0x200002b0
 8000fd8:	40000800 	.word	0x40000800

08000fdc <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <HAL_TIM_Base_MspInit+0x5c>)
{
 8000fe0:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM3)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10b      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_TIM_Base_MspInit+0x60>)
 8000fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fea:	f042 0202 	orr.w	r2, r2, #2
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000ffa:	b004      	add	sp, #16
 8000ffc:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM4)
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_TIM_Base_MspInit+0x64>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d10a      	bne.n	800101a <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_TIM_Base_MspInit+0x60>)
 8001006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001008:	f042 0204 	orr.w	r2, r2, #4
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9b02      	ldr	r3, [sp, #8]
 8001018:	e7ef      	b.n	8000ffa <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM11)
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_TIM_Base_MspInit+0x68>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d1ec      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_TIM_Base_MspInit+0x60>)
 8001022:	6a1a      	ldr	r2, [r3, #32]
 8001024:	f042 0210 	orr.w	r2, r2, #16
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	9303      	str	r3, [sp, #12]
 8001032:	9b03      	ldr	r3, [sp, #12]
}
 8001034:	e7e1      	b.n	8000ffa <HAL_TIM_Base_MspInit+0x1e>
 8001036:	bf00      	nop
 8001038:	40000400 	.word	0x40000400
 800103c:	40023800 	.word	0x40023800
 8001040:	40000800 	.word	0x40000800
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	4604      	mov	r4, r0
 800104c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	2214      	movs	r2, #20
 8001050:	2100      	movs	r1, #0
 8001052:	a801      	add	r0, sp, #4
 8001054:	f001 fc6a 	bl	800292c <memset>
  if(timHandle->Instance==TIM11)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_TIM_MspPostInit+0x48>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d115      	bne.n	800108c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001064:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	480b      	ldr	r0, [pc, #44]	@ (8001094 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	f042 0202 	orr.w	r2, r2, #2
 800106c:	61da      	str	r2, [r3, #28]
 800106e:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001082:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001086:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f000 fbbe 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800108c:	b006      	add	sp, #24
 800108e:	bd10      	pop	{r4, pc}
 8001090:	40011000 	.word	0x40011000
 8001094:	40020400 	.word	0x40020400

08001098 <MX_TIM11_Init>:
{
 8001098:	b500      	push	{lr}
 800109a:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109c:	2210      	movs	r2, #16
 800109e:	2100      	movs	r1, #0
 80010a0:	4668      	mov	r0, sp
 80010a2:	f001 fc43 	bl	800292c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a6:	2210      	movs	r2, #16
 80010a8:	2100      	movs	r1, #0
 80010aa:	eb0d 0002 	add.w	r0, sp, r2
 80010ae:	f001 fc3d 	bl	800292c <memset>
  htim11.Init.Prescaler = 0;
 80010b2:	2300      	movs	r3, #0
  htim11.Instance = TIM11;
 80010b4:	4818      	ldr	r0, [pc, #96]	@ (8001118 <MX_TIM11_Init+0x80>)
  htim11.Init.Prescaler = 0;
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <MX_TIM11_Init+0x84>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	6083      	str	r3, [r0, #8]
  htim11.Init.Prescaler = 0;
 80010ba:	e9c0 2300 	strd	r2, r3, [r0]
  htim11.Init.Period = 65535;
 80010be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	6143      	str	r3, [r0, #20]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010c8:	f001 f95c 	bl	8002384 <HAL_TIM_Base_Init>
 80010cc:	b108      	cbz	r0, 80010d2 <MX_TIM11_Init+0x3a>
    Error_Handler();
 80010ce:	f7ff fe77 	bl	8000dc0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80010d6:	4669      	mov	r1, sp
 80010d8:	480f      	ldr	r0, [pc, #60]	@ (8001118 <MX_TIM11_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 80010dc:	f001 fa1b 	bl	8002516 <HAL_TIM_ConfigClockSource>
 80010e0:	b108      	cbz	r0, 80010e6 <MX_TIM11_Init+0x4e>
    Error_Handler();
 80010e2:	f7ff fe6d 	bl	8000dc0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80010e6:	480c      	ldr	r0, [pc, #48]	@ (8001118 <MX_TIM11_Init+0x80>)
 80010e8:	f001 f971 	bl	80023ce <HAL_TIM_PWM_Init>
 80010ec:	b108      	cbz	r0, 80010f2 <MX_TIM11_Init+0x5a>
    Error_Handler();
 80010ee:	f7ff fe67 	bl	8000dc0 <Error_Handler>
  sConfigOC.Pulse = 0;
 80010f2:	2200      	movs	r2, #0
 80010f4:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f6:	4808      	ldr	r0, [pc, #32]	@ (8001118 <MX_TIM11_Init+0x80>)
 80010f8:	a904      	add	r1, sp, #16
  sConfigOC.Pulse = 0;
 80010fa:	e9cd 3204 	strd	r3, r2, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	e9cd 2206 	strd	r2, r2, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	f001 f988 	bl	8002416 <HAL_TIM_PWM_ConfigChannel>
 8001106:	b108      	cbz	r0, 800110c <MX_TIM11_Init+0x74>
    Error_Handler();
 8001108:	f7ff fe5a 	bl	8000dc0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <MX_TIM11_Init+0x80>)
 800110e:	f7ff ff9b 	bl	8001048 <HAL_TIM_MspPostInit>
}
 8001112:	b009      	add	sp, #36	@ 0x24
 8001114:	f85d fb04 	ldr.w	pc, [sp], #4
 8001118:	20000270 	.word	0x20000270
 800111c:	40011000 	.word	0x40011000

08001120 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001120:	b508      	push	{r3, lr}

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
 8001122:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart5.Instance = UART5;
 8001126:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MX_UART5_Init+0x30>)
  huart5.Init.BaudRate = 9600;
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <MX_UART5_Init+0x34>)
 800112a:	e9c0 2300 	strd	r2, r3, [r0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	2300      	movs	r3, #0
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001130:	220c      	movs	r2, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001132:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart5.Init.Parity = UART_PARITY_NONE;
 800113a:	6103      	str	r3, [r0, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800113e:	f001 fb47 	bl	80027d0 <HAL_UART_Init>
 8001142:	b118      	cbz	r0, 800114c <MX_UART5_Init+0x2c>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001148:	f7ff be3a 	b.w	8000dc0 <Error_Handler>
}
 800114c:	bd08      	pop	{r3, pc}
 800114e:	bf00      	nop
 8001150:	20000408 	.word	0x20000408
 8001154:	40005000 	.word	0x40005000

08001158 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001158:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800115a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 800115e:	480a      	ldr	r0, [pc, #40]	@ (8001188 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <MX_USART1_UART_Init+0x34>)
 8001162:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001172:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001176:	f001 fb2b 	bl	80027d0 <HAL_UART_Init>
 800117a:	b118      	cbz	r0, 8001184 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001180:	f7ff be1e 	b.w	8000dc0 <Error_Handler>
}
 8001184:	bd08      	pop	{r3, pc}
 8001186:	bf00      	nop
 8001188:	200003c0 	.word	0x200003c0
 800118c:	40013800 	.word	0x40013800

08001190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001190:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001192:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8001196:	480a      	ldr	r0, [pc, #40]	@ (80011c0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <MX_USART2_UART_Init+0x34>)
 800119a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	f001 fb0f 	bl	80027d0 <HAL_UART_Init>
 80011b2:	b118      	cbz	r0, 80011bc <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011b8:	f7ff be02 	b.w	8000dc0 <Error_Handler>
}
 80011bc:	bd08      	pop	{r3, pc}
 80011be:	bf00      	nop
 80011c0:	20000378 	.word	0x20000378
 80011c4:	40004400 	.word	0x40004400

080011c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011c8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 80011ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Instance = USART3;
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80011d0:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <MX_USART3_UART_Init+0x34>)
 80011d2:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d8:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e2:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011e6:	f001 faf3 	bl	80027d0 <HAL_UART_Init>
 80011ea:	b118      	cbz	r0, 80011f4 <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011f0:	f7ff bde6 	b.w	8000dc0 <Error_Handler>
}
 80011f4:	bd08      	pop	{r3, pc}
 80011f6:	bf00      	nop
 80011f8:	20000330 	.word	0x20000330
 80011fc:	40004800 	.word	0x40004800

08001200 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	2214      	movs	r2, #20
 8001208:	2100      	movs	r1, #0
 800120a:	a809      	add	r0, sp, #36	@ 0x24
 800120c:	f001 fb8e 	bl	800292c <memset>
  if(uartHandle->Instance==UART5)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	4a4a      	ldr	r2, [pc, #296]	@ (800133c <HAL_UART_MspInit+0x13c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d133      	bne.n	8001280 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <HAL_UART_MspInit+0x140>)
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2702      	movs	r7, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 800121c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2601      	movs	r6, #1
    __HAL_RCC_UART5_CLK_ENABLE();
 8001220:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
 8001226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2503      	movs	r5, #3
    __HAL_RCC_UART5_CLK_ENABLE();
 800122a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001234:	2408      	movs	r4, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	f042 0204 	orr.w	r2, r2, #4
 800123a:	61da      	str	r2, [r3, #28]
 800123c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	4841      	ldr	r0, [pc, #260]	@ (8001344 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001240:	f002 0204 	and.w	r2, r2, #4
 8001244:	9201      	str	r2, [sp, #4]
 8001246:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	a909      	add	r1, sp, #36	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124c:	f042 0208 	orr.w	r2, r2, #8
 8001250:	61da      	str	r2, [r3, #28]
 8001252:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001264:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f000 facd 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800126e:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001278:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	4833      	ldr	r0, [pc, #204]	@ (8001348 <HAL_UART_MspInit+0x148>)
 800127c:	a909      	add	r1, sp, #36	@ 0x24
 800127e:	e020      	b.n	80012c2 <HAL_UART_MspInit+0xc2>
  else if(uartHandle->Instance==USART1)
 8001280:	4a32      	ldr	r2, [pc, #200]	@ (800134c <HAL_UART_MspInit+0x14c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d121      	bne.n	80012ca <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001286:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    __HAL_RCC_USART1_CLK_ENABLE();
 800128c:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800128e:	2403      	movs	r4, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001294:	621a      	str	r2, [r3, #32]
 8001296:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	a909      	add	r1, sp, #36	@ 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 800129a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800129e:	9203      	str	r2, [sp, #12]
 80012a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ba:	2307      	movs	r3, #7
 80012bc:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	4823      	ldr	r0, [pc, #140]	@ (8001350 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f000 faa1 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012c6:	b00f      	add	sp, #60	@ 0x3c
 80012c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART2)
 80012ca:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <HAL_UART_MspInit+0x154>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d11b      	bne.n	8001308 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <HAL_UART_MspInit+0x140>)
 80012d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012d4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012dc:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80012e0:	9205      	str	r2, [sp, #20]
 80012e2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	f042 0208 	orr.w	r2, r2, #8
 80012ea:	61da      	str	r2, [r3, #28]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	9306      	str	r3, [sp, #24]
 80012f4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012f6:	2360      	movs	r3, #96	@ 0x60
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f8:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012fc:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001300:	2307      	movs	r3, #7
 8001302:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
 8001306:	e7b8      	b.n	800127a <HAL_UART_MspInit+0x7a>
  else if(uartHandle->Instance==USART3)
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_MspInit+0x158>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d1db      	bne.n	80012c6 <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_UART_MspInit+0x140>)
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
 8001318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800131a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800131e:	9207      	str	r2, [sp, #28]
 8001320:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	f042 0208 	orr.w	r2, r2, #8
 8001328:	61da      	str	r2, [r3, #28]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	9308      	str	r3, [sp, #32]
 8001332:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001334:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001338:	e7de      	b.n	80012f8 <HAL_UART_MspInit+0xf8>
 800133a:	bf00      	nop
 800133c:	40005000 	.word	0x40005000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40004400 	.word	0x40004400
 8001358:	40004800 	.word	0x40004800

0800135c <USART_SendCommand>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART_SendCommand(const char *command) {
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001360:	f7fe ff0c 	bl	800017c <strlen>
 8001364:	4621      	mov	r1, r4
}
 8001366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 800136a:	b282      	uxth	r2, r0
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	4801      	ldr	r0, [pc, #4]	@ (8001378 <USART_SendCommand+0x1c>)
 8001372:	f001 ba5c 	b.w	800282e <HAL_UART_Transmit>
 8001376:	bf00      	nop
 8001378:	20000378 	.word	0x20000378

0800137c <Reset_Handler>:
 800137c:	f7ff fdc4 	bl	8000f08 <SystemInit>
 8001380:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <LoopFillZerobss+0xe>)
 8001382:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x16>)
 8001386:	2300      	movs	r3, #0
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:
 800138a:	58d4      	ldr	r4, [r2, r3]
 800138c:	50c4      	str	r4, [r0, r3]
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:
 8001390:	18c4      	adds	r4, r0, r3
 8001392:	428c      	cmp	r4, r1
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <LoopFillZerobss+0x1a>)
 8001398:	4c09      	ldr	r4, [pc, #36]	@ (80013c0 <LoopFillZerobss+0x1e>)
 800139a:	2300      	movs	r3, #0
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:
 80013a2:	42a2      	cmp	r2, r4
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
 80013a6:	f001 fae3 	bl	8002970 <__libc_init_array>
 80013aa:	f7ff fbef 	bl	8000b8c <main>
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000
 80013b4:	200000a0 	.word	0x200000a0
 80013b8:	080040b0 	.word	0x080040b0
 80013bc:	200000a0 	.word	0x200000a0
 80013c0:	2000059c 	.word	0x2000059c

080013c4 <ADC1_IRQHandler>:
 80013c4:	e7fe      	b.n	80013c4 <ADC1_IRQHandler>
	...

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_InitTick+0x40>)
{
 80013cc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	b90a      	cbnz	r2, 80013d6 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f2 	udiv	r3, r3, r2
 80013de:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_InitTick+0x44>)
 80013e0:	6810      	ldr	r0, [r2, #0]
 80013e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e6:	f000 f9fb 	bl	80017e0 <HAL_SYSTICK_Config>
 80013ea:	4604      	mov	r4, r0
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	2d0f      	cmp	r5, #15
 80013f2:	d8ee      	bhi.n	80013d2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	4602      	mov	r2, r0
 80013f6:	4629      	mov	r1, r5
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f9c0 	bl	8001780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_InitTick+0x48>)
 8001402:	4620      	mov	r0, r4
 8001404:	601d      	str	r5, [r3, #0]
  return status;
 8001406:	e7e5      	b.n	80013d4 <HAL_InitTick+0xc>
 8001408:	20000048 	.word	0x20000048
 800140c:	20000044 	.word	0x20000044
 8001410:	2000004c 	.word	0x2000004c

08001414 <HAL_Init>:
{
 8001414:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001416:	2003      	movs	r0, #3
 8001418:	f000 f9a0 	bl	800175c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141c:	200f      	movs	r0, #15
 800141e:	f7ff ffd3 	bl	80013c8 <HAL_InitTick>
 8001422:	4604      	mov	r4, r0
 8001424:	b918      	cbnz	r0, 800142e <HAL_Init+0x1a>
    HAL_MspInit();
 8001426:	f7ff fd23 	bl	8000e70 <HAL_MspInit>
}
 800142a:	4620      	mov	r0, r4
 800142c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800142e:	2401      	movs	r4, #1
 8001430:	e7fb      	b.n	800142a <HAL_Init+0x16>
	...

08001434 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001434:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <HAL_IncTick+0x10>)
 8001436:	4904      	ldr	r1, [pc, #16]	@ (8001448 <HAL_IncTick+0x14>)
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	6809      	ldr	r1, [r1, #0]
 800143c:	440b      	add	r3, r1
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000450 	.word	0x20000450
 8001448:	20000048 	.word	0x20000048

0800144c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800144c:	4b01      	ldr	r3, [pc, #4]	@ (8001454 <HAL_GetTick+0x8>)
 800144e:	6818      	ldr	r0, [r3, #0]
}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000450 	.word	0x20000450

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fff6 	bl	800144c <HAL_GetTick>
 8001460:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001464:	bf1e      	ittt	ne
 8001466:	4b04      	ldrne	r3, [pc, #16]	@ (8001478 <HAL_Delay+0x20>)
 8001468:	681b      	ldrne	r3, [r3, #0]
 800146a:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	1b43      	subs	r3, r0, r5
 8001472:	42a3      	cmp	r3, r4
 8001474:	d3fa      	bcc.n	800146c <HAL_Delay+0x14>
  {
  }
}
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	20000048 	.word	0x20000048

0800147c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800147c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800147e:	4604      	mov	r4, r0
 8001480:	2800      	cmp	r0, #0
 8001482:	f000 80b4 	beq.w	80015ee <HAL_ADC_Init+0x172>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001486:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001488:	b973      	cbnz	r3, 80014a8 <HAL_ADC_Init+0x2c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148a:	6503      	str	r3, [r0, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b58      	ldr	r3, [pc, #352]	@ (80015f4 <HAL_ADC_Init+0x178>)
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	621a      	str	r2, [r3, #32]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	9b01      	ldr	r3, [sp, #4]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a4:	f7ff f81a 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80014aa:	06d9      	lsls	r1, r3, #27
 80014ac:	f100 809f 	bmi.w	80015ee <HAL_ADC_Init+0x172>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80014b2:	4a51      	ldr	r2, [pc, #324]	@ (80015f8 <HAL_ADC_Init+0x17c>)
    ADC_STATE_CLR_SET(hadc->State,
 80014b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014b8:	f023 0302 	bic.w	r3, r3, #2
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64e3      	str	r3, [r4, #76]	@ 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80014c2:	6853      	ldr	r3, [r2, #4]
 80014c4:	6861      	ldr	r1, [r4, #4]
 80014c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80014ca:	430b      	orrs	r3, r1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014d0:	6053      	str	r3, [r2, #4]
 80014d2:	fa90 f0a0 	rbit	r0, r0
 80014d6:	2202      	movs	r2, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014d8:	fab0 f080 	clz	r0, r0
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80014dc:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 80014e0:	fa92 f2a2 	rbit	r2, r2
 80014e4:	fab2 f282 	clz	r2, r2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014e8:	6965      	ldr	r5, [r4, #20]
 80014ea:	68e3      	ldr	r3, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014f0:	432b      	orrs	r3, r5
 80014f2:	6a25      	ldr	r5, [r4, #32]
 80014f4:	432b      	orrs	r3, r5
 80014f6:	f894 503c 	ldrb.w	r5, [r4, #60]	@ 0x3c
 80014fa:	fa05 f000 	lsl.w	r0, r5, r0
 80014fe:	4303      	orrs	r3, r0
                hadc->Init.ChannelsBank                                        |
 8001500:	4313      	orrs	r3, r2
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001502:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001504:	6925      	ldr	r5, [r4, #16]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001506:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001508:	bf1c      	itt	ne
 800150a:	6ba0      	ldrne	r0, [r4, #56]	@ 0x38
 800150c:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800150e:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001510:	bf18      	it	ne
 8001512:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001514:	6802      	ldr	r2, [r0, #0]
 8001516:	0652      	lsls	r2, r2, #25
 8001518:	d427      	bmi.n	800156a <HAL_ADC_Init+0xee>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800151a:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800151c:	69e6      	ldr	r6, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800151e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001520:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001522:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001526:	ea42 0206 	orr.w	r2, r2, r6
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800152a:	d047      	beq.n	80015bc <HAL_ADC_Init+0x140>
 800152c:	f105 3cff 	add.w	ip, r5, #4294967295
 8001530:	f1dc 0600 	rsbs	r6, ip, #0
 8001534:	eb46 060c 	adc.w	r6, r6, ip
 8001538:	0236      	lsls	r6, r6, #8
                  hadc->Init.LowPowerAutoPowerOff           |
 800153a:	4332      	orrs	r2, r6
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153c:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
 8001540:	2e01      	cmp	r6, #1
 8001542:	d10d      	bne.n	8001560 <HAL_ADC_Init+0xe4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001544:	2900      	cmp	r1, #0
 8001546:	d13b      	bne.n	80015c0 <HAL_ADC_Init+0x144>
 8001548:	f44f 4660 	mov.w	r6, #57344	@ 0xe000
 800154c:	fa96 f6a6 	rbit	r6, r6
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001550:	fab6 f686 	clz	r6, r6
 8001554:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001556:	3901      	subs	r1, #1
 8001558:	40b1      	lsls	r1, r6
 800155a:	4311      	orrs	r1, r2
 800155c:	f441 6200 	orr.w	r2, r1, #2048	@ 0x800
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001560:	6846      	ldr	r6, [r0, #4]
 8001562:	4926      	ldr	r1, [pc, #152]	@ (80015fc <HAL_ADC_Init+0x180>)
 8001564:	4031      	ands	r1, r6
 8001566:	4311      	orrs	r1, r2
 8001568:	6041      	str	r1, [r0, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800156a:	6881      	ldr	r1, [r0, #8]
 800156c:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <HAL_ADC_Init+0x184>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800156e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8001572:	ea02 0201 	and.w	r2, r2, r1
 8001576:	ea42 0203 	orr.w	r2, r2, r3
 800157a:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800157c:	d001      	beq.n	8001582 <HAL_ADC_Init+0x106>
 800157e:	2d01      	cmp	r5, #1
 8001580:	d127      	bne.n	80015d2 <HAL_ADC_Init+0x156>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001582:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8001584:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001588:	fa91 f1a1 	rbit	r1, r1
 800158c:	fab1 f181 	clz	r1, r1
 8001590:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001592:	3a01      	subs	r2, #1
 8001594:	408a      	lsls	r2, r1
 8001596:	f025 71f8 	bic.w	r1, r5, #32505856	@ 0x1f00000
 800159a:	430a      	orrs	r2, r1
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800159c:	6302      	str	r2, [r0, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800159e:	6881      	ldr	r1, [r0, #8]
 80015a0:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <HAL_ADC_Init+0x188>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d118      	bne.n	80015da <HAL_ADC_Init+0x15e>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a8:	2000      	movs	r0, #0
 80015aa:	6520      	str	r0, [r4, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80015b8:	b002      	add	sp, #8
 80015ba:	bd70      	pop	{r4, r5, r6, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80015bc:	462e      	mov	r6, r5
 80015be:	e7bc      	b.n	800153a <HAL_ADC_Init+0xbe>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80015c2:	f041 0120 	orr.w	r1, r1, #32
 80015c6:	64e1      	str	r1, [r4, #76]	@ 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80015ca:	f041 0101 	orr.w	r1, r1, #1
 80015ce:	6521      	str	r1, [r4, #80]	@ 0x50
 80015d0:	e7c6      	b.n	8001560 <HAL_ADC_Init+0xe4>
      MODIFY_REG(hadc->Instance->SQR1,
 80015d2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80015d4:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80015d8:	e7e0      	b.n	800159c <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 80015da:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80015dc:	f023 0312 	bic.w	r3, r3, #18
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	64e3      	str	r3, [r4, #76]	@ 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e7e2      	b.n	80015b8 <HAL_ADC_Init+0x13c>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40012700 	.word	0x40012700
 80015fc:	fcfc16ff 	.word	0xfcfc16ff
 8001600:	c0fff189 	.word	0xc0fff189
 8001604:	bf80fffe 	.word	0xbf80fffe

08001608 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8001608:	2300      	movs	r3, #0
{
 800160a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800160c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800160e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
{
 8001612:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001614:	2b01      	cmp	r3, #1
 8001616:	f000 8098 	beq.w	800174a <HAL_ADC_ConfigChannel+0x142>
 800161a:	2301      	movs	r3, #1
 800161c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001620:	6848      	ldr	r0, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001622:	682a      	ldr	r2, [r5, #0]
  if (sConfig->Rank < 7)
 8001624:	2806      	cmp	r0, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8001626:	680c      	ldr	r4, [r1, #0]
 8001628:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  if (sConfig->Rank < 7)
 800162c:	d81c      	bhi.n	8001668 <HAL_ADC_ConfigChannel+0x60>
    MODIFY_REG(hadc->Instance->SQR5,
 800162e:	261f      	movs	r6, #31
 8001630:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8001632:	3b05      	subs	r3, #5
 8001634:	409e      	lsls	r6, r3
 8001636:	ea20 0006 	bic.w	r0, r0, r6
 800163a:	fa04 f303 	lsl.w	r3, r4, r3
 800163e:	4303      	orrs	r3, r0
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001642:	2c09      	cmp	r4, #9
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001644:	6889      	ldr	r1, [r1, #8]
 8001646:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  if (sConfig->Channel < ADC_CHANNEL_10)
 800164a:	d83f      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0xc4>
    MODIFY_REG(hadc->Instance->SMPR3,
 800164c:	2407      	movs	r4, #7
 800164e:	6950      	ldr	r0, [r2, #20]
 8001650:	409c      	lsls	r4, r3
 8001652:	ea20 0004 	bic.w	r0, r0, r4
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	4303      	orrs	r3, r0
 800165c:	6153      	str	r3, [r2, #20]
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165e:	2000      	movs	r0, #0
 8001660:	f885 0048 	strb.w	r0, [r5, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
}
 8001664:	b002      	add	sp, #8
 8001666:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8001668:	280c      	cmp	r0, #12
 800166a:	d80a      	bhi.n	8001682 <HAL_ADC_ConfigChannel+0x7a>
    MODIFY_REG(hadc->Instance->SQR4,
 800166c:	261f      	movs	r6, #31
 800166e:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 8001670:	3b23      	subs	r3, #35	@ 0x23
 8001672:	409e      	lsls	r6, r3
 8001674:	ea20 0006 	bic.w	r0, r0, r6
 8001678:	fa04 f303 	lsl.w	r3, r4, r3
 800167c:	4303      	orrs	r3, r0
 800167e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001680:	e7df      	b.n	8001642 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8001682:	2812      	cmp	r0, #18
 8001684:	d80a      	bhi.n	800169c <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SQR3,
 8001686:	261f      	movs	r6, #31
 8001688:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 800168a:	3b41      	subs	r3, #65	@ 0x41
 800168c:	409e      	lsls	r6, r3
 800168e:	ea20 0006 	bic.w	r0, r0, r6
 8001692:	fa04 f303 	lsl.w	r3, r4, r3
 8001696:	4303      	orrs	r3, r0
 8001698:	6393      	str	r3, [r2, #56]	@ 0x38
 800169a:	e7d2      	b.n	8001642 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 800169c:	2818      	cmp	r0, #24
 800169e:	f04f 001f 	mov.w	r0, #31
 80016a2:	d809      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR2,
 80016a4:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 80016a6:	3b5f      	subs	r3, #95	@ 0x5f
 80016a8:	4098      	lsls	r0, r3
 80016aa:	ea26 0000 	bic.w	r0, r6, r0
 80016ae:	fa04 f303 	lsl.w	r3, r4, r3
 80016b2:	4303      	orrs	r3, r0
 80016b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80016b6:	e7c4      	b.n	8001642 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 80016b8:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80016ba:	3b7d      	subs	r3, #125	@ 0x7d
 80016bc:	4098      	lsls	r0, r3
 80016be:	ea26 0000 	bic.w	r0, r6, r0
 80016c2:	fa04 f303 	lsl.w	r3, r4, r3
 80016c6:	4303      	orrs	r3, r0
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	e7ba      	b.n	8001642 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80016cc:	2c13      	cmp	r4, #19
 80016ce:	d825      	bhi.n	800171c <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR2,
 80016d0:	2607      	movs	r6, #7
 80016d2:	6910      	ldr	r0, [r2, #16]
 80016d4:	3b1e      	subs	r3, #30
 80016d6:	409e      	lsls	r6, r3
 80016d8:	ea20 0006 	bic.w	r0, r0, r6
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4303      	orrs	r3, r0
 80016e2:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016e4:	f1a4 0310 	sub.w	r3, r4, #16
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d8b8      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x56>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_ADC_ConfigChannel+0x148>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	0212      	lsls	r2, r2, #8
 80016f2:	d4b4      	bmi.n	800165e <HAL_ADC_ConfigChannel+0x56>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016f4:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80016fc:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fe:	d1ae      	bne.n	800165e <HAL_ADC_ConfigChannel+0x56>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_ADC_ConfigChannel+0x14c>)
 8001702:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <HAL_ADC_ConfigChannel+0x150>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fbb3 f3f2 	udiv	r3, r3, r2
 800170a:	220a      	movs	r2, #10
 800170c:	4353      	muls	r3, r2
            wait_loop_index--;
 800170e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001710:	9b01      	ldr	r3, [sp, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0a3      	beq.n	800165e <HAL_ADC_ConfigChannel+0x56>
            wait_loop_index--;
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	3b01      	subs	r3, #1
 800171a:	e7f8      	b.n	800170e <HAL_ADC_ConfigChannel+0x106>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800171c:	2c1d      	cmp	r4, #29
 800171e:	f04f 0007 	mov.w	r0, #7
 8001722:	d809      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0x130>
    MODIFY_REG(hadc->Instance->SMPR1,
 8001724:	68d4      	ldr	r4, [r2, #12]
 8001726:	3b3c      	subs	r3, #60	@ 0x3c
 8001728:	4098      	lsls	r0, r3
 800172a:	ea24 0000 	bic.w	r0, r4, r0
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	4303      	orrs	r3, r0
 8001734:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001736:	e792      	b.n	800165e <HAL_ADC_ConfigChannel+0x56>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001738:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
 800173a:	3b5a      	subs	r3, #90	@ 0x5a
 800173c:	4098      	lsls	r0, r3
 800173e:	ea24 0000 	bic.w	r0, r4, r0
 8001742:	4099      	lsls	r1, r3
 8001744:	4301      	orrs	r1, r0
 8001746:	65d1      	str	r1, [r2, #92]	@ 0x5c
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001748:	e789      	b.n	800165e <HAL_ADC_ConfigChannel+0x56>
  __HAL_LOCK(hadc);
 800174a:	2002      	movs	r0, #2
 800174c:	e78a      	b.n	8001664 <HAL_ADC_ConfigChannel+0x5c>
 800174e:	bf00      	nop
 8001750:	40012700 	.word	0x40012700
 8001754:	20000044 	.word	0x20000044
 8001758:	000f4240 	.word	0x000f4240

0800175c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800175e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001762:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800176a:	0412      	lsls	r2, r2, #16
 800176c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001778:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001782:	b530      	push	{r4, r5, lr}
 8001784:	68dc      	ldr	r4, [r3, #12]
 8001786:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	2b04      	cmp	r3, #4
 8001792:	bf28      	it	cs
 8001794:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179c:	bf94      	ite	ls
 800179e:	2400      	movls	r4, #0
 80017a0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a2:	fa05 f303 	lsl.w	r3, r5, r3
 80017a6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017aa:	40a5      	lsls	r5, r4
 80017ac:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80017b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	bfac      	ite	ge
 80017ba:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	4a07      	ldrlt	r2, [pc, #28]	@ (80017dc <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	bfab      	itete	ge
 80017c8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017d6:	bd30      	pop	{r4, r5, pc}
 80017d8:	e000ed00 	.word	0xe000ed00
 80017dc:	e000ed14 	.word	0xe000ed14

080017e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	3801      	subs	r0, #1
 80017e2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80017e6:	d20b      	bcs.n	8001800 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	21f0      	movs	r1, #240	@ 0xf0
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001800:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001808:	2300      	movs	r3, #0
{
 800180a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 80019a0 <HAL_GPIO_Init+0x198>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4c64      	ldr	r4, [pc, #400]	@ (80019a4 <HAL_GPIO_Init+0x19c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001814:	680a      	ldr	r2, [r1, #0]
 8001816:	fa32 f503 	lsrs.w	r5, r2, r3
 800181a:	d102      	bne.n	8001822 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800181c:	b003      	add	sp, #12
 800181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001822:	2501      	movs	r5, #1
 8001824:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent)
 8001828:	ea18 0202 	ands.w	r2, r8, r2
 800182c:	f000 80a9 	beq.w	8001982 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001830:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001832:	684e      	ldr	r6, [r1, #4]
 8001834:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001838:	f006 0503 	and.w	r5, r6, #3
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800183c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001840:	1e6f      	subs	r7, r5, #1
 8001842:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001844:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	d834      	bhi.n	80018b4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800184a:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800184c:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001850:	68cf      	ldr	r7, [r1, #12]
 8001852:	fa07 f70e 	lsl.w	r7, r7, lr
 8001856:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800185a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800185c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800185e:	ea27 0808 	bic.w	r8, r7, r8
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001862:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001866:	409f      	lsls	r7, r3
 8001868:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800186c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800186e:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001870:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001872:	ea07 080c 	and.w	r8, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001876:	688f      	ldr	r7, [r1, #8]
 8001878:	fa07 f70e 	lsl.w	r7, r7, lr
 800187c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001880:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	d119      	bne.n	80018b8 <HAL_GPIO_Init+0xb0>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001884:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3];
 8001888:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800188c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001890:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001894:	f8d8 7020 	ldr.w	r7, [r8, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001898:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800189c:	fa0b fb0a 	lsl.w	fp, fp, sl
 80018a0:	ea27 0b0b 	bic.w	fp, r7, fp
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80018a4:	690f      	ldr	r7, [r1, #16]
 80018a6:	fa07 f70a 	lsl.w	r7, r7, sl
 80018aa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 80018ae:	f8c8 7020 	str.w	r7, [r8, #32]
 80018b2:	e001      	b.n	80018b8 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	2d03      	cmp	r5, #3
 80018b6:	d1da      	bne.n	800186e <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80018b8:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018ba:	fa05 f50e 	lsl.w	r5, r5, lr
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80018be:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018c2:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80018c8:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ca:	d05a      	beq.n	8001982 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018cc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80018d4:	f023 0703 	bic.w	r7, r3, #3
 80018d8:	f045 0501 	orr.w	r5, r5, #1
 80018dc:	f8c9 5020 	str.w	r5, [r9, #32]
 80018e0:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80018e4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80018e8:	f005 0501 	and.w	r5, r5, #1
 80018ec:	9501      	str	r5, [sp, #4]
 80018ee:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018f2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80018fc:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80018fe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001902:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001906:	4d28      	ldr	r5, [pc, #160]	@ (80019a8 <HAL_GPIO_Init+0x1a0>)
 8001908:	42a8      	cmp	r0, r5
 800190a:	d03c      	beq.n	8001986 <HAL_GPIO_Init+0x17e>
 800190c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001910:	42a8      	cmp	r0, r5
 8001912:	d03a      	beq.n	800198a <HAL_GPIO_Init+0x182>
 8001914:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001918:	42a8      	cmp	r0, r5
 800191a:	d038      	beq.n	800198e <HAL_GPIO_Init+0x186>
 800191c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001920:	42a8      	cmp	r0, r5
 8001922:	d036      	beq.n	8001992 <HAL_GPIO_Init+0x18a>
 8001924:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001928:	42a8      	cmp	r0, r5
 800192a:	d034      	beq.n	8001996 <HAL_GPIO_Init+0x18e>
 800192c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001930:	42a8      	cmp	r0, r5
 8001932:	d032      	beq.n	800199a <HAL_GPIO_Init+0x192>
 8001934:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001938:	42a8      	cmp	r0, r5
 800193a:	bf14      	ite	ne
 800193c:	2507      	movne	r5, #7
 800193e:	2506      	moveq	r5, #6
 8001940:	fa05 f50c 	lsl.w	r5, r5, ip
 8001944:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001948:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800194a:	43d7      	mvns	r7, r2
        temp = EXTI->RTSR;
 800194c:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001952:	bf0c      	ite	eq
 8001954:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001956:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8001958:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 800195a:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001960:	bf0c      	ite	eq
 8001962:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001964:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8001966:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8001968:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800196e:	bf0c      	ite	eq
 8001970:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001972:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8001974:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8001976:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001978:	03f6      	lsls	r6, r6, #15
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800197a:	bf54      	ite	pl
 800197c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 800197e:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8001980:	6025      	str	r5, [r4, #0]
    position++;
 8001982:	3301      	adds	r3, #1
 8001984:	e746      	b.n	8001814 <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001986:	2500      	movs	r5, #0
 8001988:	e7da      	b.n	8001940 <HAL_GPIO_Init+0x138>
 800198a:	2501      	movs	r5, #1
 800198c:	e7d8      	b.n	8001940 <HAL_GPIO_Init+0x138>
 800198e:	2502      	movs	r5, #2
 8001990:	e7d6      	b.n	8001940 <HAL_GPIO_Init+0x138>
 8001992:	2503      	movs	r5, #3
 8001994:	e7d4      	b.n	8001940 <HAL_GPIO_Init+0x138>
 8001996:	2504      	movs	r5, #4
 8001998:	e7d2      	b.n	8001940 <HAL_GPIO_Init+0x138>
 800199a:	2505      	movs	r5, #5
 800199c:	e7d0      	b.n	8001940 <HAL_GPIO_Init+0x138>
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40010400 	.word	0x40010400
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ac:	6903      	ldr	r3, [r0, #16]
 80019ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80019b0:	bf14      	ite	ne
 80019b2:	2001      	movne	r0, #1
 80019b4:	2000      	moveq	r0, #0
 80019b6:	4770      	bx	lr

080019b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b8:	b10a      	cbz	r2, 80019be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019ba:	6181      	str	r1, [r0, #24]
  }
}
 80019bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019be:	0409      	lsls	r1, r1, #16
 80019c0:	e7fb      	b.n	80019ba <HAL_GPIO_WritePin+0x2>
	...

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c6:	4604      	mov	r4, r0
 80019c8:	b908      	cbnz	r0, 80019ce <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80019d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80019d6:	b91b      	cbnz	r3, 80019e0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80019d8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80019dc:	f7fe fe3a 	bl	8000654 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	2324      	movs	r3, #36	@ 0x24
 80019e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019fe:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a00:	f000 fbd0 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a04:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_I2C_Init+0x140>)
 8001a06:	6865      	ldr	r5, [r4, #4]
 8001a08:	429d      	cmp	r5, r3
 8001a0a:	bf94      	ite	ls
 8001a0c:	4b3e      	ldrls	r3, [pc, #248]	@ (8001b08 <HAL_I2C_Init+0x144>)
 8001a0e:	4b3f      	ldrhi	r3, [pc, #252]	@ (8001b0c <HAL_I2C_Init+0x148>)
 8001a10:	4298      	cmp	r0, r3
 8001a12:	bf8c      	ite	hi
 8001a14:	2300      	movhi	r3, #0
 8001a16:	2301      	movls	r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1d6      	bne.n	80019ca <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a1c:	4e39      	ldr	r6, [pc, #228]	@ (8001b04 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b10 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a20:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8001a22:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a26:	bf88      	it	hi
 8001a28:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	6851      	ldr	r1, [r2, #4]
 8001a30:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001a34:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a38:	bf82      	ittt	hi
 8001a3a:	4373      	mulhi	r3, r6
 8001a3c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8001a40:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a44:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a46:	6a11      	ldr	r1, [r2, #32]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a52:	69d1      	ldr	r1, [r2, #28]
 8001a54:	1e43      	subs	r3, r0, #1
 8001a56:	482b      	ldr	r0, [pc, #172]	@ (8001b04 <HAL_I2C_Init+0x140>)
 8001a58:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8001a5c:	4285      	cmp	r5, r0
 8001a5e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001a62:	d832      	bhi.n	8001aca <HAL_I2C_Init+0x106>
 8001a64:	006d      	lsls	r5, r5, #1
 8001a66:	fbb3 f3f5 	udiv	r3, r3, r5
 8001a6a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4203      	tst	r3, r0
 8001a72:	d042      	beq.n	8001afa <HAL_I2C_Init+0x136>
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	4319      	orrs	r1, r3
 8001a7a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	6811      	ldr	r1, [r2, #0]
 8001a7e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001a82:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8001a86:	4303      	orrs	r3, r0
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a8c:	6891      	ldr	r1, [r2, #8]
 8001a8e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001a92:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8001a96:	4303      	orrs	r3, r0
 8001a98:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	68d1      	ldr	r1, [r2, #12]
 8001aa2:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001aa6:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001aaa:	4303      	orrs	r3, r0
 8001aac:	430b      	orrs	r3, r1
 8001aae:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001ab0:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8001ac8:	e780      	b.n	80019cc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aca:	68a0      	ldr	r0, [r4, #8]
 8001acc:	b950      	cbnz	r0, 8001ae4 <HAL_I2C_Init+0x120>
 8001ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ad2:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	b17b      	cbz	r3, 8001afe <HAL_I2C_Init+0x13a>
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae2:	e7c9      	b.n	8001a78 <HAL_I2C_Init+0xb4>
 8001ae4:	2019      	movs	r0, #25
 8001ae6:	4368      	muls	r0, r5
 8001ae8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001aec:	3301      	adds	r3, #1
 8001aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af2:	b123      	cbz	r3, 8001afe <HAL_I2C_Init+0x13a>
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af8:	e7be      	b.n	8001a78 <HAL_I2C_Init+0xb4>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e7bc      	b.n	8001a78 <HAL_I2C_Init+0xb4>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e7ba      	b.n	8001a78 <HAL_I2C_Init+0xb4>
 8001b02:	bf00      	nop
 8001b04:	000186a0 	.word	0x000186a0
 8001b08:	001e847f 	.word	0x001e847f
 8001b0c:	003d08ff 	.word	0x003d08ff
 8001b10:	000f4240 	.word	0x000f4240

08001b14 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001b16:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8001b1e:	d00c      	beq.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b20:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b22:	491a      	ldr	r1, [pc, #104]	@ (8001b8c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001b24:	680b      	ldr	r3, [r1, #0]
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b2e:	6808      	ldr	r0, [r1, #0]
 8001b30:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001b34:	4050      	eors	r0, r2
 8001b36:	b002      	add	sp, #8
 8001b38:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3c:	4914      	ldr	r1, [pc, #80]	@ (8001b90 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001b3e:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8001b42:	d00f      	beq.n	8001b64 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b44:	680a      	ldr	r2, [r1, #0]
 8001b46:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b4a:	f5b2 5fc0 	cmp.w	r2, #6144	@ 0x1800
 8001b4e:	d1e7      	bne.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8001b50:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8001b54:	d1e4      	bne.n	8001b20 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8001b56:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b60:	2201      	movs	r2, #1
 8001b62:	e7de      	b.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b6e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001b72:	9201      	str	r2, [sp, #4]
 8001b74:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b76:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b7a:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7e:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 8001b82:	6259      	str	r1, [r3, #36]	@ 0x24
 8001b84:	e7e1      	b.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	40007000 	.word	0x40007000

08001b94 <HAL_RCC_OscConfig>:
{
 8001b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001b98:	4604      	mov	r4, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d05f      	beq.n	8001c5e <HAL_RCC_OscConfig+0xca>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4b9a      	ldr	r3, [pc, #616]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba0:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba8:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	f407 3780 	and.w	r7, r7, #65536	@ 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb0:	d44a      	bmi.n	8001c48 <HAL_RCC_OscConfig+0xb4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	0799      	lsls	r1, r3, #30
 8001bb6:	f100 8093 	bmi.w	8001ce0 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	06d8      	lsls	r0, r3, #27
 8001bbe:	d535      	bpl.n	8001c2c <HAL_RCC_OscConfig+0x98>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	f040 80dd 	bne.w	8001d80 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc6:	4f90      	ldr	r7, [pc, #576]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	0599      	lsls	r1, r3, #22
 8001bcc:	d502      	bpl.n	8001bd4 <HAL_RCC_OscConfig+0x40>
 8001bce:	69a3      	ldr	r3, [r4, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d044      	beq.n	8001c5e <HAL_RCC_OscConfig+0xca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a25      	ldr	r5, [r4, #32]
 8001bd8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001bdc:	429d      	cmp	r5, r3
 8001bde:	f240 80bc 	bls.w	8001d5a <HAL_RCC_OscConfig+0x1c6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be2:	4628      	mov	r0, r5
 8001be4:	f7ff ff96 	bl	8001b14 <RCC_SetFlashLatencyFromMSIRange>
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d138      	bne.n	8001c5e <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001bf2:	432b      	orrs	r3, r5
 8001bf4:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69e2      	ldr	r2, [r4, #28]
 8001bfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001bfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c02:	607b      	str	r3, [r7, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c04:	4b80      	ldr	r3, [pc, #512]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c06:	4981      	ldr	r1, [pc, #516]	@ (8001e0c <HAL_RCC_OscConfig+0x278>)
 8001c08:	689a      	ldr	r2, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c0e:	0b6d      	lsrs	r5, r5, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c10:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001c14:	5c8a      	ldrb	r2, [r1, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c16:	3501      	adds	r5, #1
 8001c18:	40ab      	lsls	r3, r5
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c1a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8001c20:	4b7c      	ldr	r3, [pc, #496]	@ (8001e14 <HAL_RCC_OscConfig+0x280>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	f7ff fbd0 	bl	80013c8 <HAL_InitTick>
        if(status != HAL_OK)
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d131      	bne.n	8001c90 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	0718      	lsls	r0, r3, #28
 8001c30:	f100 80d5 	bmi.w	8001dde <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	0759      	lsls	r1, r3, #29
 8001c38:	f100 8100 	bmi.w	8001e3c <HAL_RCC_OscConfig+0x2a8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8168 	bne.w	8001f14 <HAL_RCC_OscConfig+0x380>
  return HAL_OK;
 8001c44:	2000      	movs	r0, #0
 8001c46:	e023      	b.n	8001c90 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	2e08      	cmp	r6, #8
 8001c4a:	d002      	beq.n	8001c52 <HAL_RCC_OscConfig+0xbe>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4c:	2e0c      	cmp	r6, #12
 8001c4e:	d108      	bne.n	8001c62 <HAL_RCC_OscConfig+0xce>
 8001c50:	b13f      	cbz	r7, 8001c62 <HAL_RCC_OscConfig+0xce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	039a      	lsls	r2, r3, #14
 8001c56:	d5ac      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
 8001c58:	6863      	ldr	r3, [r4, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1a9      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e016      	b.n	8001c90 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	4d68      	ldr	r5, [pc, #416]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_OscConfig+0x102>
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c72:	f7ff fbeb 	bl	800144c <HAL_GetTick>
 8001c76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c78:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001e08 <HAL_RCC_OscConfig+0x274>
 8001c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8001c80:	039b      	lsls	r3, r3, #14
 8001c82:	d496      	bmi.n	8001bb2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fbe2 	bl	800144c <HAL_GetTick>
 8001c88:	1b40      	subs	r0, r0, r5
 8001c8a:	2864      	cmp	r0, #100	@ 0x64
 8001c8c:	d9f6      	bls.n	8001c7c <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8001c8e:	2003      	movs	r0, #3
}
 8001c90:	b003      	add	sp, #12
 8001c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c96:	b9ab      	cbnz	r3, 8001cc4 <HAL_RCC_OscConfig+0x130>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	602b      	str	r3, [r5, #0]
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fbd0 	bl	800144c <HAL_GetTick>
 8001cac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cae:	682b      	ldr	r3, [r5, #0]
 8001cb0:	0398      	lsls	r0, r3, #14
 8001cb2:	f57f af7e 	bpl.w	8001bb2 <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fbc9 	bl	800144c <HAL_GetTick>
 8001cba:	eba0 0008 	sub.w	r0, r0, r8
 8001cbe:	2864      	cmp	r0, #100	@ 0x64
 8001cc0:	d9f5      	bls.n	8001cae <HAL_RCC_OscConfig+0x11a>
 8001cc2:	e7e4      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	d103      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x13e>
 8001cca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cce:	602b      	str	r3, [r5, #0]
 8001cd0:	e7cb      	b.n	8001c6a <HAL_RCC_OscConfig+0xd6>
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd6:	602b      	str	r3, [r5, #0]
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cde:	e7c7      	b.n	8001c70 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce0:	2e04      	cmp	r6, #4
 8001ce2:	d002      	beq.n	8001cea <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce4:	2e0c      	cmp	r6, #12
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x174>
 8001ce8:	b977      	cbnz	r7, 8001d08 <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4a47      	ldr	r2, [pc, #284]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	0799      	lsls	r1, r3, #30
 8001cf0:	d502      	bpl.n	8001cf8 <HAL_RCC_OscConfig+0x164>
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d1b2      	bne.n	8001c5e <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	6853      	ldr	r3, [r2, #4]
 8001cfa:	6921      	ldr	r1, [r4, #16]
 8001cfc:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001d00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e758      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	68e2      	ldr	r2, [r4, #12]
 8001d0a:	4b43      	ldr	r3, [pc, #268]	@ (8001e18 <HAL_RCC_OscConfig+0x284>)
 8001d0c:	b1b2      	cbz	r2, 8001d3c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d12:	f7ff fb9b 	bl	800144c <HAL_GetTick>
 8001d16:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d18:	4d3b      	ldr	r5, [pc, #236]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	079a      	lsls	r2, r3, #30
 8001d1e:	d507      	bpl.n	8001d30 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	686b      	ldr	r3, [r5, #4]
 8001d22:	6922      	ldr	r2, [r4, #16]
 8001d24:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001d28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d2c:	606b      	str	r3, [r5, #4]
 8001d2e:	e744      	b.n	8001bba <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb8c 	bl	800144c <HAL_GetTick>
 8001d34:	1bc0      	subs	r0, r0, r7
 8001d36:	2802      	cmp	r0, #2
 8001d38:	d9ef      	bls.n	8001d1a <HAL_RCC_OscConfig+0x186>
 8001d3a:	e7a8      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8001d3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb85 	bl	800144c <HAL_GetTick>
 8001d42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d44:	4f30      	ldr	r7, [pc, #192]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	079b      	lsls	r3, r3, #30
 8001d4a:	f57f af36 	bpl.w	8001bba <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fb7d 	bl	800144c <HAL_GetTick>
 8001d52:	1b40      	subs	r0, r0, r5
 8001d54:	2802      	cmp	r0, #2
 8001d56:	d9f6      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1b2>
 8001d58:	e799      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5a:	687b      	ldr	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5c:	4628      	mov	r0, r5
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d5e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001d62:	432b      	orrs	r3, r5
 8001d64:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69e2      	ldr	r2, [r4, #28]
 8001d6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d72:	607b      	str	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d74:	f7ff fece 	bl	8001b14 <RCC_SetFlashLatencyFromMSIRange>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f43f af43 	beq.w	8001c04 <HAL_RCC_OscConfig+0x70>
 8001d7e:	e76e      	b.n	8001c5e <HAL_RCC_OscConfig+0xca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d80:	69a2      	ldr	r2, [r4, #24]
 8001d82:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_RCC_OscConfig+0x284>)
 8001d84:	b1e2      	cbz	r2, 8001dc0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8001d86:	2201      	movs	r2, #1
 8001d88:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fb5f 	bl	800144c <HAL_GetTick>
 8001d8e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d90:	4d1d      	ldr	r5, [pc, #116]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	059a      	lsls	r2, r3, #22
 8001d96:	d50d      	bpl.n	8001db4 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d98:	686b      	ldr	r3, [r5, #4]
 8001d9a:	6a22      	ldr	r2, [r4, #32]
 8001d9c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001da0:	4313      	orrs	r3, r2
 8001da2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da4:	686b      	ldr	r3, [r5, #4]
 8001da6:	69e2      	ldr	r2, [r4, #28]
 8001da8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001dac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001db0:	606b      	str	r3, [r5, #4]
 8001db2:	e73b      	b.n	8001c2c <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb4a 	bl	800144c <HAL_GetTick>
 8001db8:	1bc0      	subs	r0, r0, r7
 8001dba:	2802      	cmp	r0, #2
 8001dbc:	d9e9      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1fe>
 8001dbe:	e766      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8001dc0:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb43 	bl	800144c <HAL_GetTick>
 8001dc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dc8:	4f0f      	ldr	r7, [pc, #60]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	059b      	lsls	r3, r3, #22
 8001dce:	f57f af2d 	bpl.w	8001c2c <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fb3b 	bl	800144c <HAL_GetTick>
 8001dd6:	1b40      	subs	r0, r0, r5
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d9f6      	bls.n	8001dca <HAL_RCC_OscConfig+0x236>
 8001ddc:	e757      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dde:	6962      	ldr	r2, [r4, #20]
 8001de0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_RCC_OscConfig+0x284>)
 8001de2:	b1da      	cbz	r2, 8001e1c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8001de4:	2201      	movs	r2, #1
 8001de6:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 8001dea:	f7ff fb2f 	bl	800144c <HAL_GetTick>
 8001dee:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001df0:	4f05      	ldr	r7, [pc, #20]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	079a      	lsls	r2, r3, #30
 8001df6:	f53f af1d 	bmi.w	8001c34 <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fb27 	bl	800144c <HAL_GetTick>
 8001dfe:	1b40      	subs	r0, r0, r5
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d9f6      	bls.n	8001df2 <HAL_RCC_OscConfig+0x25e>
 8001e04:	e743      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08004054 	.word	0x08004054
 8001e10:	20000044 	.word	0x20000044
 8001e14:	2000004c 	.word	0x2000004c
 8001e18:	42470000 	.word	0x42470000
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 8001e20:	f7ff fb14 	bl	800144c <HAL_GetTick>
 8001e24:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e26:	4f66      	ldr	r7, [pc, #408]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2a:	079b      	lsls	r3, r3, #30
 8001e2c:	f57f af02 	bpl.w	8001c34 <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fb0c 	bl	800144c <HAL_GetTick>
 8001e34:	1b40      	subs	r0, r0, r5
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f6      	bls.n	8001e28 <HAL_RCC_OscConfig+0x294>
 8001e3a:	e728      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3c:	4b60      	ldr	r3, [pc, #384]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e40:	00d0      	lsls	r0, r2, #3
 8001e42:	d429      	bmi.n	8001e98 <HAL_RCC_OscConfig+0x304>
      pwrclkchanged = SET;
 8001e44:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e4a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4d5a      	ldr	r5, [pc, #360]	@ (8001fc4 <HAL_RCC_OscConfig+0x430>)
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	05d9      	lsls	r1, r3, #23
 8001e60:	d51d      	bpl.n	8001e9e <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e62:	68a3      	ldr	r3, [r4, #8]
 8001e64:	4d56      	ldr	r5, [pc, #344]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d129      	bne.n	8001ebe <HAL_RCC_OscConfig+0x32a>
 8001e6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e70:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001e72:	f7ff faeb 	bl	800144c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001e7a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e7c:	4f50      	ldr	r7, [pc, #320]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e80:	059b      	lsls	r3, r3, #22
 8001e82:	d541      	bpl.n	8001f08 <HAL_RCC_OscConfig+0x374>
    if(pwrclkchanged == SET)
 8001e84:	f1b8 0f00 	cmp.w	r8, #0
 8001e88:	f43f aed8 	beq.w	8001c3c <HAL_RCC_OscConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001e8e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e96:	e6d1      	b.n	8001c3c <HAL_RCC_OscConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 8001e98:	f04f 0800 	mov.w	r8, #0
 8001e9c:	e7dd      	b.n	8001e5a <HAL_RCC_OscConfig+0x2c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fad1 	bl	800144c <HAL_GetTick>
 8001eaa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	05da      	lsls	r2, r3, #23
 8001eb0:	d4d7      	bmi.n	8001e62 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff facb 	bl	800144c <HAL_GetTick>
 8001eb6:	1bc0      	subs	r0, r0, r7
 8001eb8:	2864      	cmp	r0, #100	@ 0x64
 8001eba:	d9f7      	bls.n	8001eac <HAL_RCC_OscConfig+0x318>
 8001ebc:	e6e7      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	b9ab      	cbnz	r3, 8001eec <HAL_RCC_OscConfig+0x358>
 8001ec0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eca:	636b      	str	r3, [r5, #52]	@ 0x34
 8001ecc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001ece:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ed2:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001ed4:	f7ff faba 	bl	800144c <HAL_GetTick>
 8001ed8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eda:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001edc:	0598      	lsls	r0, r3, #22
 8001ede:	d5d1      	bpl.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fab4 	bl	800144c <HAL_GetTick>
 8001ee4:	1bc0      	subs	r0, r0, r7
 8001ee6:	4548      	cmp	r0, r9
 8001ee8:	d9f7      	bls.n	8001eda <HAL_RCC_OscConfig+0x346>
 8001eea:	e6d0      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001ef0:	d103      	bne.n	8001efa <HAL_RCC_OscConfig+0x366>
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	636b      	str	r3, [r5, #52]	@ 0x34
 8001ef8:	e7b7      	b.n	8001e6a <HAL_RCC_OscConfig+0x2d6>
 8001efa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001efe:	636b      	str	r3, [r5, #52]	@ 0x34
 8001f00:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001f02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f06:	e7b3      	b.n	8001e70 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7ff faa0 	bl	800144c <HAL_GetTick>
 8001f0c:	1b40      	subs	r0, r0, r5
 8001f0e:	4548      	cmp	r0, r9
 8001f10:	d9b5      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2ea>
 8001f12:	e6bc      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f14:	2e0c      	cmp	r6, #12
 8001f16:	d03a      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc8 <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	d127      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3de>
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa93 	bl	800144c <HAL_GetTick>
 8001f26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f28:	4d25      	ldr	r5, [pc, #148]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	0199      	lsls	r1, r3, #6
 8001f2e:	d41a      	bmi.n	8001f66 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	68aa      	ldr	r2, [r5, #8]
 8001f32:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	@ 0x28
 8001f36:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001f40:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001f42:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <HAL_RCC_OscConfig+0x434>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f48:	4d1d      	ldr	r5, [pc, #116]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
        __HAL_RCC_PLL_ENABLE();
 8001f4a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa7e 	bl	800144c <HAL_GetTick>
 8001f50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f52:	682b      	ldr	r3, [r5, #0]
 8001f54:	019a      	lsls	r2, r3, #6
 8001f56:	f53f ae75 	bmi.w	8001c44 <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fa77 	bl	800144c <HAL_GetTick>
 8001f5e:	1b00      	subs	r0, r0, r4
 8001f60:	2802      	cmp	r0, #2
 8001f62:	d9f6      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3be>
 8001f64:	e693      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fa71 	bl	800144c <HAL_GetTick>
 8001f6a:	1b80      	subs	r0, r0, r6
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d9dc      	bls.n	8001f2a <HAL_RCC_OscConfig+0x396>
 8001f70:	e68d      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8001f72:	f7ff fa6b 	bl	800144c <HAL_GetTick>
 8001f76:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f78:	4d11      	ldr	r5, [pc, #68]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001f7a:	682b      	ldr	r3, [r5, #0]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	f57f ae61 	bpl.w	8001c44 <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fa63 	bl	800144c <HAL_GetTick>
 8001f86:	1b00      	subs	r0, r0, r4
 8001f88:	2802      	cmp	r0, #2
 8001f8a:	d9f6      	bls.n	8001f7a <HAL_RCC_OscConfig+0x3e6>
 8001f8c:	e67f      	b.n	8001c8e <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f43f ae65 	beq.w	8001c5e <HAL_RCC_OscConfig+0xca>
        pll_config = RCC->CFGR;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_RCC_OscConfig+0x42c>)
 8001f96:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f9a:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	f47f ae5d 	bne.w	8001c5e <HAL_RCC_OscConfig+0xca>
 8001fa4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fa6:	f400 1370 	and.w	r3, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f47f ae57 	bne.w	8001c5e <HAL_RCC_OscConfig+0xca>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fb2:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fb6:	1ac0      	subs	r0, r0, r3
 8001fb8:	bf18      	it	ne
 8001fba:	2001      	movne	r0, #1
 8001fbc:	e668      	b.n	8001c90 <HAL_RCC_OscConfig+0xfc>
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42470000 	.word	0x42470000

08001fcc <HAL_RCC_GetSysClockFreq>:
{
 8001fcc:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x48>)
 8001fd0:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd2:	f002 010c 	and.w	r1, r2, #12
 8001fd6:	2908      	cmp	r1, #8
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x16>
 8001fda:	290c      	cmp	r1, #12
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001fde:	2904      	cmp	r1, #4
 8001fe0:	d110      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x38>
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x4c>)
  return sysclockfreq;
 8001fe4:	e00d      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x36>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fe6:	490d      	ldr	r1, [pc, #52]	@ (800201c <HAL_RCC_GetSysClockFreq+0x50>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	689b      	ldr	r3, [r3, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fea:	f3c2 4383 	ubfx	r3, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fee:	5cc9      	ldrb	r1, [r1, r3]
 8001ff0:	4809      	ldr	r0, [pc, #36]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x4c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ff2:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	fba1 0100 	umull	r0, r1, r1, r0
 8001ffc:	3201      	adds	r2, #1
 8001ffe:	f7fe f8c5 	bl	800018c <__aeabi_uldivmod>
}
 8002002:	bd08      	pop	{r3, pc}
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002004:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800200e:	3301      	adds	r3, #1
 8002010:	4098      	lsls	r0, r3
      break;
 8002012:	e7f6      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0x36>
 8002014:	40023800 	.word	0x40023800
 8002018:	00f42400 	.word	0x00f42400
 800201c:	08004064 	.word	0x08004064

08002020 <HAL_RCC_ClockConfig>:
{
 8002020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002024:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002026:	4604      	mov	r4, r0
 8002028:	b910      	cbnz	r0, 8002030 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800202a:	2001      	movs	r0, #1
}
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b57      	ldr	r3, [pc, #348]	@ (8002190 <HAL_RCC_ClockConfig+0x170>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	f002 0201 	and.w	r2, r2, #1
 8002038:	428a      	cmp	r2, r1
 800203a:	d32a      	bcc.n	8002092 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	0796      	lsls	r6, r2, #30
 8002040:	d438      	bmi.n	80020b4 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	07d0      	lsls	r0, r2, #31
 8002044:	d43e      	bmi.n	80020c4 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002046:	4b52      	ldr	r3, [pc, #328]	@ (8002190 <HAL_RCC_ClockConfig+0x170>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f002 0201 	and.w	r2, r2, #1
 800204e:	42aa      	cmp	r2, r5
 8002050:	f200 808c 	bhi.w	800216c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	6822      	ldr	r2, [r4, #0]
 8002056:	0751      	lsls	r1, r2, #29
 8002058:	f100 8091 	bmi.w	800217e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	0713      	lsls	r3, r2, #28
 800205e:	d507      	bpl.n	8002070 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002060:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
 8002062:	6921      	ldr	r1, [r4, #16]
 8002064:	6893      	ldr	r3, [r2, #8]
 8002066:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800206a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800206e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002070:	f7ff ffac 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
}
 8002074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002078:	4b46      	ldr	r3, [pc, #280]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
 800207a:	4a47      	ldr	r2, [pc, #284]	@ (8002198 <HAL_RCC_ClockConfig+0x178>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	40d8      	lsrs	r0, r3
 8002086:	4b45      	ldr	r3, [pc, #276]	@ (800219c <HAL_RCC_ClockConfig+0x17c>)
 8002088:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800208a:	4b45      	ldr	r3, [pc, #276]	@ (80021a0 <HAL_RCC_ClockConfig+0x180>)
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f7ff b99b 	b.w	80013c8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	2901      	cmp	r1, #1
 8002094:	bf02      	ittt	eq
 8002096:	681a      	ldreq	r2, [r3, #0]
 8002098:	f042 0204 	orreq.w	r2, r2, #4
 800209c:	601a      	streq	r2, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d1bb      	bne.n	800202a <HAL_RCC_ClockConfig+0xa>
 80020b2:	e7c3      	b.n	800203c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4937      	ldr	r1, [pc, #220]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
 80020b6:	68a0      	ldr	r0, [r4, #8]
 80020b8:	688b      	ldr	r3, [r1, #8]
 80020ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020be:	4303      	orrs	r3, r0
 80020c0:	608b      	str	r3, [r1, #8]
 80020c2:	e7be      	b.n	8002042 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	6861      	ldr	r1, [r4, #4]
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
 80020c8:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020ca:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020ce:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020d2:	d0aa      	beq.n	800202a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d4:	689a      	ldr	r2, [r3, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	f022 0203 	bic.w	r2, r2, #3
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80020e2:	f7ff f9b3 	bl	800144c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e6:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80020e8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	2b02      	cmp	r3, #2
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4f29      	ldr	r7, [pc, #164]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	d118      	bne.n	8002122 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d0a5      	beq.n	8002046 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7ff f9a7 	bl	800144c <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	4540      	cmp	r0, r8
 8002102:	d9f5      	bls.n	80020f0 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8002104:	2003      	movs	r0, #3
 8002106:	e791      	b.n	800202c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002108:	2903      	cmp	r1, #3
 800210a:	d102      	bne.n	8002112 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002110:	e7df      	b.n	80020d2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002112:	2901      	cmp	r1, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002116:	f012 0f02 	tst.w	r2, #2
 800211a:	e7da      	b.n	80020d2 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211c:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8002120:	e7d7      	b.n	80020d2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	2b03      	cmp	r3, #3
 8002124:	d10a      	bne.n	800213c <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d08a      	beq.n	8002046 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff f98c 	bl	800144c <HAL_GetTick>
 8002134:	1b80      	subs	r0, r0, r6
 8002136:	4540      	cmp	r0, r8
 8002138:	d9f5      	bls.n	8002126 <HAL_RCC_ClockConfig+0x106>
 800213a:	e7e3      	b.n	8002104 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800213c:	2b01      	cmp	r3, #1
 800213e:	d110      	bne.n	8002162 <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	f43f af7d 	beq.w	8002046 <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff f97e 	bl	800144c <HAL_GetTick>
 8002150:	1b80      	subs	r0, r0, r6
 8002152:	4540      	cmp	r0, r8
 8002154:	d9f4      	bls.n	8002140 <HAL_RCC_ClockConfig+0x120>
 8002156:	e7d5      	b.n	8002104 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f978 	bl	800144c <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	4540      	cmp	r0, r8
 8002160:	d8d0      	bhi.n	8002104 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f013 0f0c 	tst.w	r3, #12
 8002168:	d1f6      	bne.n	8002158 <HAL_RCC_ClockConfig+0x138>
 800216a:	e76c      	b.n	8002046 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	07da      	lsls	r2, r3, #31
 8002178:	f57f af6c 	bpl.w	8002054 <HAL_RCC_ClockConfig+0x34>
 800217c:	e755      	b.n	800202a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217e:	4905      	ldr	r1, [pc, #20]	@ (8002194 <HAL_RCC_ClockConfig+0x174>)
 8002180:	68e0      	ldr	r0, [r4, #12]
 8002182:	688b      	ldr	r3, [r1, #8]
 8002184:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002188:	4303      	orrs	r3, r0
 800218a:	608b      	str	r3, [r1, #8]
 800218c:	e766      	b.n	800205c <HAL_RCC_ClockConfig+0x3c>
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00
 8002194:	40023800 	.word	0x40023800
 8002198:	08004054 	.word	0x08004054
 800219c:	20000044 	.word	0x20000044
 80021a0:	2000004c 	.word	0x2000004c

080021a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80021a6:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	4a03      	ldr	r2, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021b2:	6810      	ldr	r0, [r2, #0]
}
 80021b4:	40d8      	lsrs	r0, r3
 80021b6:	4770      	bx	lr
 80021b8:	40023800 	.word	0x40023800
 80021bc:	0800404c 	.word	0x0800404c
 80021c0:	20000044 	.word	0x20000044

080021c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	4a03      	ldr	r2, [pc, #12]	@ (80021e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021d2:	6810      	ldr	r0, [r2, #0]
}
 80021d4:	40d8      	lsrs	r0, r3
 80021d6:	4770      	bx	lr
 80021d8:	40023800 	.word	0x40023800
 80021dc:	0800404c 	.word	0x0800404c
 80021e0:	20000044 	.word	0x20000044

080021e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021e4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021e6:	4604      	mov	r4, r0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d055      	beq.n	8002298 <HAL_SPI_Init+0xb4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d14e      	bne.n	8002290 <HAL_SPI_Init+0xac>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021f2:	6842      	ldr	r2, [r0, #4]
 80021f4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80021f8:	d000      	beq.n	80021fc <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021fa:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002200:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002204:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002208:	b923      	cbnz	r3, 8002214 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800220a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800220c:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002210:	f7fe fdfa 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002214:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002216:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002218:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 800221c:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800221e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002224:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 800222c:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002230:	4303      	orrs	r3, r0
 8002232:	68e0      	ldr	r0, [r4, #12]
 8002234:	69a2      	ldr	r2, [r4, #24]
 8002236:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800223a:	4303      	orrs	r3, r0
 800223c:	6920      	ldr	r0, [r4, #16]
 800223e:	f000 0002 	and.w	r0, r0, #2
 8002242:	4303      	orrs	r3, r0
 8002244:	6960      	ldr	r0, [r4, #20]
 8002246:	f000 0001 	and.w	r0, r0, #1
 800224a:	4303      	orrs	r3, r0
 800224c:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8002250:	4303      	orrs	r3, r0
 8002252:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002254:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002256:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800225a:	4303      	orrs	r3, r0
 800225c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800225e:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002262:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8002266:	4303      	orrs	r3, r0
 8002268:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800226a:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800226e:	4303      	orrs	r3, r0
 8002270:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002272:	6a63      	ldr	r3, [r4, #36]	@ 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002274:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800227e:	69cb      	ldr	r3, [r1, #28]
 8002280:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002284:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002286:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002288:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800228a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 800228e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002290:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002296:	e7b1      	b.n	80021fc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002298:	2001      	movs	r0, #1
 800229a:	e7f8      	b.n	800228e <HAL_SPI_Init+0xaa>

0800229c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800229c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  tmpcr1 = TIMx->CR1;
 80022a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a2:	d00e      	beq.n	80022c2 <TIM_Base_SetConfig+0x26>
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <TIM_Base_SetConfig+0x84>)
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d00b      	beq.n	80022c2 <TIM_Base_SetConfig+0x26>
 80022aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022ae:	4290      	cmp	r0, r2
 80022b0:	d007      	beq.n	80022c2 <TIM_Base_SetConfig+0x26>
 80022b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022b6:	4290      	cmp	r0, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_Base_SetConfig+0x26>
 80022ba:	f502 427c 	add.w	r2, r2, #64512	@ 0xfc00
 80022be:	4290      	cmp	r0, r2
 80022c0:	d116      	bne.n	80022f0 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80022c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80022cc:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d0:	d015      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022d2:	4a13      	ldr	r2, [pc, #76]	@ (8002320 <TIM_Base_SetConfig+0x84>)
 80022d4:	4290      	cmp	r0, r2
 80022d6:	d012      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022dc:	4290      	cmp	r0, r2
 80022de:	d00e      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d00a      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022e8:	f502 427c 	add.w	r2, r2, #64512	@ 0xfc00
 80022ec:	4290      	cmp	r0, r2
 80022ee:	d006      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <TIM_Base_SetConfig+0x88>)
 80022f2:	4290      	cmp	r0, r2
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0x62>
 80022f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022fa:	4290      	cmp	r0, r2
 80022fc:	d103      	bne.n	8002306 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002304:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002306:	690a      	ldr	r2, [r1, #16]
 8002308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800230c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800230e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	688b      	ldr	r3, [r1, #8]
 8002312:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002314:	680b      	ldr	r3, [r1, #0]
 8002316:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002318:	2301      	movs	r3, #1
 800231a:	6143      	str	r3, [r0, #20]
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40000400 	.word	0x40000400
 8002324:	40010c00 	.word	0x40010c00

08002328 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002328:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232a:	6a02      	ldr	r2, [r0, #32]
{
 800232c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002334:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002336:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800233a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800233e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002340:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002342:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002346:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002348:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800234a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 800234c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 800234e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002350:	6203      	str	r3, [r0, #32]
}
 8002352:	bd30      	pop	{r4, r5, pc}

08002354 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002354:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002356:	6a02      	ldr	r2, [r0, #32]
{
 8002358:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235a:	f022 0210 	bic.w	r2, r2, #16
 800235e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002360:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002362:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002364:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002366:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800236a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800236e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002370:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002374:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002376:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002378:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800237a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 800237e:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	6203      	str	r3, [r0, #32]
}
 8002382:	bd30      	pop	{r4, r5, pc}

08002384 <HAL_TIM_Base_Init>:
{
 8002384:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002386:	4604      	mov	r4, r0
 8002388:	b1f0      	cbz	r0, 80023c8 <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800238a:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800238e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002392:	b91b      	cbnz	r3, 800239c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002394:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_TIM_Base_MspInit(htim);
 8002398:	f7fe fe20 	bl	8000fdc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	1d21      	adds	r1, r4, #4
 80023a6:	f7ff ff79 	bl	800229c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023aa:	2301      	movs	r3, #1
  return HAL_OK;
 80023ac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 80023b6:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
 80023ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80023be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->State = HAL_TIM_STATE_READY;
 80023c2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 80023c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
 80023ca:	e7fc      	b.n	80023c6 <HAL_TIM_Base_Init+0x42>

080023cc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80023cc:	4770      	bx	lr

080023ce <HAL_TIM_PWM_Init>:
{
 80023ce:	b510      	push	{r4, lr}
  if (htim == NULL)
 80023d0:	4604      	mov	r4, r0
 80023d2:	b1f0      	cbz	r0, 8002412 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80023d4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80023d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023dc:	b91b      	cbnz	r3, 80023e6 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023de:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_TIM_PWM_MspInit(htim);
 80023e2:	f7ff fff3 	bl	80023cc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e8:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ee:	1d21      	adds	r1, r4, #4
 80023f0:	f7ff ff54 	bl	800229c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	2301      	movs	r3, #1
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8002400:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
 8002404:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002408:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800240c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8002410:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002412:	2001      	movs	r0, #1
 8002414:	e7fc      	b.n	8002410 <HAL_TIM_PWM_Init+0x42>

08002416 <HAL_TIM_PWM_ConfigChannel>:
{
 8002416:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002418:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 800241c:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800241e:	2b01      	cmp	r3, #1
{
 8002420:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8002422:	d076      	beq.n	8002512 <HAL_TIM_PWM_ConfigChannel+0xfc>
 8002424:	2001      	movs	r0, #1
  switch (Channel)
 8002426:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002428:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  switch (Channel)
 800242c:	d04e      	beq.n	80024cc <HAL_TIM_PWM_ConfigChannel+0xb6>
 800242e:	d806      	bhi.n	800243e <HAL_TIM_PWM_ConfigChannel+0x28>
 8002430:	b35a      	cbz	r2, 800248a <HAL_TIM_PWM_ConfigChannel+0x74>
 8002432:	2a04      	cmp	r2, #4
 8002434:	d03a      	beq.n	80024ac <HAL_TIM_PWM_ConfigChannel+0x96>
  __HAL_UNLOCK(htim);
 8002436:	2300      	movs	r3, #0
 8002438:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
}
 800243c:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800243e:	2a0c      	cmp	r2, #12
 8002440:	d1f9      	bne.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002442:	682b      	ldr	r3, [r5, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002444:	6826      	ldr	r6, [r4, #0]
  tmpccer = TIMx->CCER;
 8002446:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002448:	6a19      	ldr	r1, [r3, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800244a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244e:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8002452:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002454:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002456:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002458:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002460:	68a6      	ldr	r6, [r4, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002462:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002464:	61d9      	str	r1, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002466:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002468:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 800246c:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002470:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002472:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002482:	69da      	ldr	r2, [r3, #28]
 8002484:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002488:	e041      	b.n	800250e <HAL_TIM_PWM_ConfigChannel+0xf8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800248a:	6828      	ldr	r0, [r5, #0]
 800248c:	f7ff ff4c 	bl	8002328 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002490:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002492:	68ca      	ldr	r2, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800249a:	6983      	ldr	r3, [r0, #24]
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a2:	6983      	ldr	r3, [r0, #24]
 80024a4:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024a6:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2000      	movs	r0, #0
 80024aa:	e7c4      	b.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ac:	6828      	ldr	r0, [r5, #0]
 80024ae:	f7ff ff51 	bl	8002354 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024b4:	68ca      	ldr	r2, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024ba:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024bc:	6983      	ldr	r3, [r0, #24]
 80024be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024c2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024c4:	6983      	ldr	r3, [r0, #24]
 80024c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024ca:	e7ec      	b.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x90>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024cc:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 80024ce:	6826      	ldr	r6, [r4, #0]
  tmpccer = TIMx->CCER;
 80024d0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d2:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 80024d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80024dc:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80024de:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80024e0:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024e2:	f021 0173 	bic.w	r1, r1, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80024e6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024e8:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80024ea:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80024ec:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80024ee:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024f0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 80024f4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80024f6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fa:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024fc:	f042 0208 	orr.w	r2, r2, #8
 8002500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	f022 0204 	bic.w	r2, r2, #4
 8002508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800250e:	61da      	str	r2, [r3, #28]
      break;
 8002510:	e7ca      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8002512:	2002      	movs	r0, #2
 8002514:	e792      	b.n	800243c <HAL_TIM_PWM_ConfigChannel+0x26>

08002516 <HAL_TIM_ConfigClockSource>:
{
 8002516:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002518:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 800251c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800251e:	2b01      	cmp	r3, #1
 8002520:	f04f 0002 	mov.w	r0, #2
 8002524:	f000 809a 	beq.w	800265c <HAL_TIM_ConfigClockSource+0x146>
 8002528:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 800252a:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(htim);
 800252c:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002534:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002536:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800253a:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800253e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002540:	680a      	ldr	r2, [r1, #0]
 8002542:	2a60      	cmp	r2, #96	@ 0x60
 8002544:	d05b      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xe8>
 8002546:	d832      	bhi.n	80025ae <HAL_TIM_ConfigClockSource+0x98>
 8002548:	2a40      	cmp	r2, #64	@ 0x40
 800254a:	d070      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x118>
 800254c:	d816      	bhi.n	800257c <HAL_TIM_ConfigClockSource+0x66>
 800254e:	2a20      	cmp	r2, #32
 8002550:	d00d      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x58>
 8002552:	d80a      	bhi.n	800256a <HAL_TIM_ConfigClockSource+0x54>
 8002554:	f032 0110 	bics.w	r1, r2, #16
 8002558:	d009      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800255a:	2301      	movs	r3, #1
 800255c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  __HAL_UNLOCK(htim);
 8002560:	2300      	movs	r3, #0
 8002562:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8002566:	4628      	mov	r0, r5
 8002568:	bd30      	pop	{r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800256a:	2a30      	cmp	r2, #48	@ 0x30
 800256c:	d1f5      	bne.n	800255a <HAL_TIM_ConfigClockSource+0x44>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800256e:	6899      	ldr	r1, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002570:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002574:	430a      	orrs	r2, r1
 8002576:	f042 0207 	orr.w	r2, r2, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257a:	e02e      	b.n	80025da <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 800257c:	2a50      	cmp	r2, #80	@ 0x50
 800257e:	d1ec      	bne.n	800255a <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8002580:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002582:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002584:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002586:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002588:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002592:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002594:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002596:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800259e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80025a2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025a4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a8:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80025ac:	e015      	b.n	80025da <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80025ae:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80025b2:	d013      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0xc6>
 80025b4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80025b8:	d012      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xca>
 80025ba:	2a70      	cmp	r2, #112	@ 0x70
 80025bc:	d1cd      	bne.n	800255a <HAL_TIM_ConfigClockSource+0x44>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025be:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80025c2:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c4:	68c9      	ldr	r1, [r1, #12]
 80025c6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c8:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025d0:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80025d4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	f042 0277 	orr.w	r2, r2, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80025da:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2500      	movs	r5, #0
 80025de:	e7bc      	b.n	800255a <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80025e0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025e2:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80025e6:	68c9      	ldr	r1, [r1, #12]
 80025e8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ea:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025f2:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80025f4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025fc:	e7ed      	b.n	80025da <HAL_TIM_ConfigClockSource+0xc4>
  tmpccer = TIMx->CCER;
 80025fe:	6a1a      	ldr	r2, [r3, #32]
                               sClockSourceConfig->ClockPolarity,
 8002600:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002602:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002604:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002606:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800260a:	f021 0110 	bic.w	r1, r1, #16
 800260e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002610:	6999      	ldr	r1, [r3, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002612:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002616:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800261a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800261e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002620:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002622:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002624:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002628:	f042 0267 	orr.w	r2, r2, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800262c:	e7d5      	b.n	80025da <HAL_TIM_ConfigClockSource+0xc4>
                               sClockSourceConfig->ClockPolarity,
 800262e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002630:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002632:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002634:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002636:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002640:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002642:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002644:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002648:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800264c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002650:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002652:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002656:	f042 0247 	orr.w	r2, r2, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800265a:	e7be      	b.n	80025da <HAL_TIM_ConfigClockSource+0xc4>
  __HAL_LOCK(htim);
 800265c:	4605      	mov	r5, r0
 800265e:	e782      	b.n	8002566 <HAL_TIM_ConfigClockSource+0x50>

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002660:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 8002666:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8002668:	2b01      	cmp	r3, #1
 800266a:	f04f 0002 	mov.w	r0, #2
 800266e:	d022      	beq.n	80026b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002670:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002672:	f882 0039 	strb.w	r0, [r2, #57]	@ 0x39
  tmpcr2 = htim->Instance->CR2;
 8002676:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002678:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800267a:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800267e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8002684:	6898      	ldr	r0, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8002686:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002688:	d00a      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800268a:	4c0b      	ldr	r4, [pc, #44]	@ (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800268c:	42a3      	cmp	r3, r4
 800268e:	d007      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002690:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002694:	42a3      	cmp	r3, r4
 8002696:	d003      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002698:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 800269c:	42a3      	cmp	r3, r4
 800269e:	d104      	bne.n	80026aa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026a2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026aa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80026ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
  __HAL_UNLOCK(htim);
 80026b2:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38

  return HAL_OK;
}
 80026b6:	bd30      	pop	{r4, r5, pc}
 80026b8:	40000400 	.word	0x40000400

080026bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	b510      	push	{r4, lr}
 80026be:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c0:	6802      	ldr	r2, [r0, #0]
 80026c2:	68c1      	ldr	r1, [r0, #12]
 80026c4:	6913      	ldr	r3, [r2, #16]
 80026c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ce:	6883      	ldr	r3, [r0, #8]
 80026d0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80026d2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d4:	4303      	orrs	r3, r0
 80026d6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026d8:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026dc:	4303      	orrs	r3, r0
 80026de:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80026e6:	430b      	orrs	r3, r1
 80026e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ea:	6953      	ldr	r3, [r2, #20]
 80026ec:	69a1      	ldr	r1, [r4, #24]
 80026ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <UART_SetConfig+0xa4>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d120      	bne.n	800273e <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff fd62 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002700:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002702:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002704:	4358      	muls	r0, r3
 8002706:	e9d4 2300 	ldrd	r2, r3, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800270e:	f04f 0164 	mov.w	r1, #100	@ 0x64
 8002712:	d117      	bne.n	8002744 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fbb0 f0f3 	udiv	r0, r0, r3
 800271a:	fbb0 f4f1 	udiv	r4, r0, r1
 800271e:	fb01 0014 	mls	r0, r1, r4, r0
 8002722:	00c3      	lsls	r3, r0, #3
 8002724:	3332      	adds	r3, #50	@ 0x32
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	f003 0107 	and.w	r1, r3, #7
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8002734:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002738:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800273a:	6093      	str	r3, [r2, #8]
  }
}
 800273c:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7ff fd31 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002742:	e7dd      	b.n	8002700 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	fbb0 f0f3 	udiv	r0, r0, r3
 800274a:	fbb0 f4f1 	udiv	r4, r0, r1
 800274e:	fb01 0314 	mls	r3, r1, r4, r0
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	3332      	adds	r3, #50	@ 0x32
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800275e:	e7ec      	b.n	800273a <UART_SetConfig+0x7e>
 8002760:	40013800 	.word	0x40013800

08002764 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	4604      	mov	r4, r0
 8002768:	460e      	mov	r6, r1
 800276a:	4617      	mov	r7, r2
 800276c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	ea36 0303 	bics.w	r3, r6, r3
 8002776:	d101      	bne.n	800277c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002778:	2000      	movs	r0, #0
 800277a:	e028      	b.n	80027ce <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800277c:	1c6b      	adds	r3, r5, #1
 800277e:	d0f7      	beq.n	8002770 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002780:	b125      	cbz	r5, 800278c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002782:	f7fe fe63 	bl	800144c <HAL_GetTick>
 8002786:	1bc0      	subs	r0, r0, r7
 8002788:	4285      	cmp	r5, r0
 800278a:	d2f0      	bcs.n	800276e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800278c:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	f102 030c 	add.w	r3, r2, #12
 8002792:	e853 3f00 	ldrex	r3, [r3]
 8002796:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	320c      	adds	r2, #12
 800279c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80027a0:	6821      	ldr	r1, [r4, #0]
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1f2      	bne.n	800278c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	f101 0314 	add.w	r3, r1, #20
 80027aa:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	f101 0014 	add.w	r0, r1, #20
 80027b6:	e840 3200 	strex	r2, r3, [r0]
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d1f3      	bne.n	80027a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80027be:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80027c0:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80027c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(huart);
 80027c6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80027ca:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027d0 <HAL_UART_Init>:
{
 80027d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027d2:	4604      	mov	r4, r0
 80027d4:	b348      	cbz	r0, 800282a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027d6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80027da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80027de:	b91b      	cbnz	r3, 80027e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027e0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80027e4:	f7fe fd0c 	bl	8001200 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80027ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80027f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80027f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80027f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027fa:	f7ff ff5f 	bl	80026bc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002810:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002818:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800281a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800281e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002822:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002826:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002828:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e7fc      	b.n	8002828 <HAL_UART_Init+0x58>

0800282e <HAL_UART_Transmit>:
{
 800282e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002832:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8002838:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800283a:	2b20      	cmp	r3, #32
{
 800283c:	460e      	mov	r6, r1
 800283e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	d13c      	bne.n	80028bc <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8002842:	2900      	cmp	r1, #0
 8002844:	d03c      	beq.n	80028c0 <HAL_UART_Transmit+0x92>
 8002846:	2a00      	cmp	r2, #0
 8002848:	d03a      	beq.n	80028c0 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	2500      	movs	r5, #0
 800284e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002850:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002854:	f7fe fdfa 	bl	800144c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002858:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800285a:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8002860:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002862:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002864:	d103      	bne.n	800286e <HAL_UART_Transmit+0x40>
 8002866:	6923      	ldr	r3, [r4, #16]
 8002868:	b90b      	cbnz	r3, 800286e <HAL_UART_Transmit+0x40>
 800286a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800286c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800286e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	b953      	cbnz	r3, 800288a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	4643      	mov	r3, r8
 8002876:	464a      	mov	r2, r9
 8002878:	2140      	movs	r1, #64	@ 0x40
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff72 	bl	8002764 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002880:	b950      	cbnz	r0, 8002898 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8002882:	2320      	movs	r3, #32
 8002884:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002888:	e007      	b.n	800289a <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	4643      	mov	r3, r8
 800288c:	464a      	mov	r2, r9
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff ff67 	bl	8002764 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002896:	b110      	cbz	r0, 800289e <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8002898:	2003      	movs	r0, #3
}
 800289a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800289e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80028a0:	b94e      	cbnz	r6, 80028b6 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028aa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80028ac:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80028ae:	3901      	subs	r1, #1
 80028b0:	b289      	uxth	r1, r1
 80028b2:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80028b4:	e7db      	b.n	800286e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80028ba:	e7f6      	b.n	80028aa <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 80028bc:	2002      	movs	r0, #2
 80028be:	e7ec      	b.n	800289a <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
 80028c2:	e7ea      	b.n	800289a <HAL_UART_Transmit+0x6c>

080028c4 <sniprintf>:
 80028c4:	b40c      	push	{r2, r3}
 80028c6:	b530      	push	{r4, r5, lr}
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <sniprintf+0x64>)
 80028ca:	1e0c      	subs	r4, r1, #0
 80028cc:	681d      	ldr	r5, [r3, #0]
 80028ce:	b09d      	sub	sp, #116	@ 0x74
 80028d0:	da08      	bge.n	80028e4 <sniprintf+0x20>
 80028d2:	238b      	movs	r3, #139	@ 0x8b
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	b01d      	add	sp, #116	@ 0x74
 80028dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028e0:	b002      	add	sp, #8
 80028e2:	4770      	bx	lr
 80028e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80028e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80028ec:	bf0c      	ite	eq
 80028ee:	4623      	moveq	r3, r4
 80028f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80028f4:	9304      	str	r3, [sp, #16]
 80028f6:	9307      	str	r3, [sp, #28]
 80028f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028fc:	9002      	str	r0, [sp, #8]
 80028fe:	9006      	str	r0, [sp, #24]
 8002900:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002904:	4628      	mov	r0, r5
 8002906:	ab21      	add	r3, sp, #132	@ 0x84
 8002908:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800290a:	a902      	add	r1, sp, #8
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	f000 f9a7 	bl	8002c60 <_svfiprintf_r>
 8002912:	1c43      	adds	r3, r0, #1
 8002914:	bfbc      	itt	lt
 8002916:	238b      	movlt	r3, #139	@ 0x8b
 8002918:	602b      	strlt	r3, [r5, #0]
 800291a:	2c00      	cmp	r4, #0
 800291c:	d0dd      	beq.n	80028da <sniprintf+0x16>
 800291e:	2200      	movs	r2, #0
 8002920:	9b02      	ldr	r3, [sp, #8]
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e7d9      	b.n	80028da <sniprintf+0x16>
 8002926:	bf00      	nop
 8002928:	20000050 	.word	0x20000050

0800292c <memset>:
 800292c:	4603      	mov	r3, r0
 800292e:	4402      	add	r2, r0
 8002930:	4293      	cmp	r3, r2
 8002932:	d100      	bne.n	8002936 <memset+0xa>
 8002934:	4770      	bx	lr
 8002936:	f803 1b01 	strb.w	r1, [r3], #1
 800293a:	e7f9      	b.n	8002930 <memset+0x4>

0800293c <strncat>:
 800293c:	b530      	push	{r4, r5, lr}
 800293e:	4604      	mov	r4, r0
 8002940:	7825      	ldrb	r5, [r4, #0]
 8002942:	4623      	mov	r3, r4
 8002944:	3401      	adds	r4, #1
 8002946:	2d00      	cmp	r5, #0
 8002948:	d1fa      	bne.n	8002940 <strncat+0x4>
 800294a:	3a01      	subs	r2, #1
 800294c:	d304      	bcc.n	8002958 <strncat+0x1c>
 800294e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002952:	f803 4b01 	strb.w	r4, [r3], #1
 8002956:	b904      	cbnz	r4, 800295a <strncat+0x1e>
 8002958:	bd30      	pop	{r4, r5, pc}
 800295a:	2a00      	cmp	r2, #0
 800295c:	d1f5      	bne.n	800294a <strncat+0xe>
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e7f3      	b.n	800294a <strncat+0xe>
	...

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	@ (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000050 	.word	0x20000050

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	2600      	movs	r6, #0
 8002974:	4d0c      	ldr	r5, [pc, #48]	@ (80029a8 <__libc_init_array+0x38>)
 8002976:	4c0d      	ldr	r4, [pc, #52]	@ (80029ac <__libc_init_array+0x3c>)
 8002978:	1b64      	subs	r4, r4, r5
 800297a:	10a4      	asrs	r4, r4, #2
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	f000 fc78 	bl	8003274 <_init>
 8002984:	2600      	movs	r6, #0
 8002986:	4d0a      	ldr	r5, [pc, #40]	@ (80029b0 <__libc_init_array+0x40>)
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <__libc_init_array+0x44>)
 800298a:	1b64      	subs	r4, r4, r5
 800298c:	10a4      	asrs	r4, r4, #2
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f855 3b04 	ldr.w	r3, [r5], #4
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	080040a8 	.word	0x080040a8
 80029ac:	080040a8 	.word	0x080040a8
 80029b0:	080040a8 	.word	0x080040a8
 80029b4:	080040ac 	.word	0x080040ac

080029b8 <__retarget_lock_acquire_recursive>:
 80029b8:	4770      	bx	lr

080029ba <__retarget_lock_release_recursive>:
 80029ba:	4770      	bx	lr

080029bc <_free_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4605      	mov	r5, r0
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d040      	beq.n	8002a46 <_free_r+0x8a>
 80029c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c8:	1f0c      	subs	r4, r1, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bfb8      	it	lt
 80029ce:	18e4      	addlt	r4, r4, r3
 80029d0:	f000 f8de 	bl	8002b90 <__malloc_lock>
 80029d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a48 <_free_r+0x8c>)
 80029d6:	6813      	ldr	r3, [r2, #0]
 80029d8:	b933      	cbnz	r3, 80029e8 <_free_r+0x2c>
 80029da:	6063      	str	r3, [r4, #4]
 80029dc:	6014      	str	r4, [r2, #0]
 80029de:	4628      	mov	r0, r5
 80029e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029e4:	f000 b8da 	b.w	8002b9c <__malloc_unlock>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d908      	bls.n	80029fe <_free_r+0x42>
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	1821      	adds	r1, r4, r0
 80029f0:	428b      	cmp	r3, r1
 80029f2:	bf01      	itttt	eq
 80029f4:	6819      	ldreq	r1, [r3, #0]
 80029f6:	685b      	ldreq	r3, [r3, #4]
 80029f8:	1809      	addeq	r1, r1, r0
 80029fa:	6021      	streq	r1, [r4, #0]
 80029fc:	e7ed      	b.n	80029da <_free_r+0x1e>
 80029fe:	461a      	mov	r2, r3
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b10b      	cbz	r3, 8002a08 <_free_r+0x4c>
 8002a04:	42a3      	cmp	r3, r4
 8002a06:	d9fa      	bls.n	80029fe <_free_r+0x42>
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	1850      	adds	r0, r2, r1
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d10b      	bne.n	8002a28 <_free_r+0x6c>
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	4401      	add	r1, r0
 8002a14:	1850      	adds	r0, r2, r1
 8002a16:	4283      	cmp	r3, r0
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	d1e0      	bne.n	80029de <_free_r+0x22>
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4408      	add	r0, r1
 8002a22:	6010      	str	r0, [r2, #0]
 8002a24:	6053      	str	r3, [r2, #4]
 8002a26:	e7da      	b.n	80029de <_free_r+0x22>
 8002a28:	d902      	bls.n	8002a30 <_free_r+0x74>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	602b      	str	r3, [r5, #0]
 8002a2e:	e7d6      	b.n	80029de <_free_r+0x22>
 8002a30:	6820      	ldr	r0, [r4, #0]
 8002a32:	1821      	adds	r1, r4, r0
 8002a34:	428b      	cmp	r3, r1
 8002a36:	bf01      	itttt	eq
 8002a38:	6819      	ldreq	r1, [r3, #0]
 8002a3a:	685b      	ldreq	r3, [r3, #4]
 8002a3c:	1809      	addeq	r1, r1, r0
 8002a3e:	6021      	streq	r1, [r4, #0]
 8002a40:	6063      	str	r3, [r4, #4]
 8002a42:	6054      	str	r4, [r2, #4]
 8002a44:	e7cb      	b.n	80029de <_free_r+0x22>
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	20000598 	.word	0x20000598

08002a4c <sbrk_aligned>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8002a8c <sbrk_aligned+0x40>)
 8002a50:	460c      	mov	r4, r1
 8002a52:	6831      	ldr	r1, [r6, #0]
 8002a54:	4605      	mov	r5, r0
 8002a56:	b911      	cbnz	r1, 8002a5e <sbrk_aligned+0x12>
 8002a58:	f000 fbaa 	bl	80031b0 <_sbrk_r>
 8002a5c:	6030      	str	r0, [r6, #0]
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4628      	mov	r0, r5
 8002a62:	f000 fba5 	bl	80031b0 <_sbrk_r>
 8002a66:	1c43      	adds	r3, r0, #1
 8002a68:	d103      	bne.n	8002a72 <sbrk_aligned+0x26>
 8002a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8002a6e:	4620      	mov	r0, r4
 8002a70:	bd70      	pop	{r4, r5, r6, pc}
 8002a72:	1cc4      	adds	r4, r0, #3
 8002a74:	f024 0403 	bic.w	r4, r4, #3
 8002a78:	42a0      	cmp	r0, r4
 8002a7a:	d0f8      	beq.n	8002a6e <sbrk_aligned+0x22>
 8002a7c:	1a21      	subs	r1, r4, r0
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f000 fb96 	bl	80031b0 <_sbrk_r>
 8002a84:	3001      	adds	r0, #1
 8002a86:	d1f2      	bne.n	8002a6e <sbrk_aligned+0x22>
 8002a88:	e7ef      	b.n	8002a6a <sbrk_aligned+0x1e>
 8002a8a:	bf00      	nop
 8002a8c:	20000594 	.word	0x20000594

08002a90 <_malloc_r>:
 8002a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a94:	1ccd      	adds	r5, r1, #3
 8002a96:	f025 0503 	bic.w	r5, r5, #3
 8002a9a:	3508      	adds	r5, #8
 8002a9c:	2d0c      	cmp	r5, #12
 8002a9e:	bf38      	it	cc
 8002aa0:	250c      	movcc	r5, #12
 8002aa2:	2d00      	cmp	r5, #0
 8002aa4:	4606      	mov	r6, r0
 8002aa6:	db01      	blt.n	8002aac <_malloc_r+0x1c>
 8002aa8:	42a9      	cmp	r1, r5
 8002aaa:	d904      	bls.n	8002ab6 <_malloc_r+0x26>
 8002aac:	230c      	movs	r3, #12
 8002aae:	6033      	str	r3, [r6, #0]
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b8c <_malloc_r+0xfc>
 8002aba:	f000 f869 	bl	8002b90 <__malloc_lock>
 8002abe:	f8d8 3000 	ldr.w	r3, [r8]
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	bb44      	cbnz	r4, 8002b18 <_malloc_r+0x88>
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4630      	mov	r0, r6
 8002aca:	f7ff ffbf 	bl	8002a4c <sbrk_aligned>
 8002ace:	1c43      	adds	r3, r0, #1
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	d158      	bne.n	8002b86 <_malloc_r+0xf6>
 8002ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8002ad8:	4627      	mov	r7, r4
 8002ada:	2f00      	cmp	r7, #0
 8002adc:	d143      	bne.n	8002b66 <_malloc_r+0xd6>
 8002ade:	2c00      	cmp	r4, #0
 8002ae0:	d04b      	beq.n	8002b7a <_malloc_r+0xea>
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	eb04 0903 	add.w	r9, r4, r3
 8002aec:	f000 fb60 	bl	80031b0 <_sbrk_r>
 8002af0:	4581      	cmp	r9, r0
 8002af2:	d142      	bne.n	8002b7a <_malloc_r+0xea>
 8002af4:	6821      	ldr	r1, [r4, #0]
 8002af6:	4630      	mov	r0, r6
 8002af8:	1a6d      	subs	r5, r5, r1
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7ff ffa6 	bl	8002a4c <sbrk_aligned>
 8002b00:	3001      	adds	r0, #1
 8002b02:	d03a      	beq.n	8002b7a <_malloc_r+0xea>
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	442b      	add	r3, r5
 8002b08:	6023      	str	r3, [r4, #0]
 8002b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	bb62      	cbnz	r2, 8002b6c <_malloc_r+0xdc>
 8002b12:	f8c8 7000 	str.w	r7, [r8]
 8002b16:	e00f      	b.n	8002b38 <_malloc_r+0xa8>
 8002b18:	6822      	ldr	r2, [r4, #0]
 8002b1a:	1b52      	subs	r2, r2, r5
 8002b1c:	d420      	bmi.n	8002b60 <_malloc_r+0xd0>
 8002b1e:	2a0b      	cmp	r2, #11
 8002b20:	d917      	bls.n	8002b52 <_malloc_r+0xc2>
 8002b22:	1961      	adds	r1, r4, r5
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	6025      	str	r5, [r4, #0]
 8002b28:	bf18      	it	ne
 8002b2a:	6059      	strne	r1, [r3, #4]
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	bf08      	it	eq
 8002b30:	f8c8 1000 	streq.w	r1, [r8]
 8002b34:	5162      	str	r2, [r4, r5]
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 f82f 	bl	8002b9c <__malloc_unlock>
 8002b3e:	f104 000b 	add.w	r0, r4, #11
 8002b42:	1d23      	adds	r3, r4, #4
 8002b44:	f020 0007 	bic.w	r0, r0, #7
 8002b48:	1ac2      	subs	r2, r0, r3
 8002b4a:	bf1c      	itt	ne
 8002b4c:	1a1b      	subne	r3, r3, r0
 8002b4e:	50a3      	strne	r3, [r4, r2]
 8002b50:	e7af      	b.n	8002ab2 <_malloc_r+0x22>
 8002b52:	6862      	ldr	r2, [r4, #4]
 8002b54:	42a3      	cmp	r3, r4
 8002b56:	bf0c      	ite	eq
 8002b58:	f8c8 2000 	streq.w	r2, [r8]
 8002b5c:	605a      	strne	r2, [r3, #4]
 8002b5e:	e7eb      	b.n	8002b38 <_malloc_r+0xa8>
 8002b60:	4623      	mov	r3, r4
 8002b62:	6864      	ldr	r4, [r4, #4]
 8002b64:	e7ae      	b.n	8002ac4 <_malloc_r+0x34>
 8002b66:	463c      	mov	r4, r7
 8002b68:	687f      	ldr	r7, [r7, #4]
 8002b6a:	e7b6      	b.n	8002ada <_malloc_r+0x4a>
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	42a3      	cmp	r3, r4
 8002b72:	d1fb      	bne.n	8002b6c <_malloc_r+0xdc>
 8002b74:	2300      	movs	r3, #0
 8002b76:	6053      	str	r3, [r2, #4]
 8002b78:	e7de      	b.n	8002b38 <_malloc_r+0xa8>
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	6033      	str	r3, [r6, #0]
 8002b80:	f000 f80c 	bl	8002b9c <__malloc_unlock>
 8002b84:	e794      	b.n	8002ab0 <_malloc_r+0x20>
 8002b86:	6005      	str	r5, [r0, #0]
 8002b88:	e7d6      	b.n	8002b38 <_malloc_r+0xa8>
 8002b8a:	bf00      	nop
 8002b8c:	20000598 	.word	0x20000598

08002b90 <__malloc_lock>:
 8002b90:	4801      	ldr	r0, [pc, #4]	@ (8002b98 <__malloc_lock+0x8>)
 8002b92:	f7ff bf11 	b.w	80029b8 <__retarget_lock_acquire_recursive>
 8002b96:	bf00      	nop
 8002b98:	20000590 	.word	0x20000590

08002b9c <__malloc_unlock>:
 8002b9c:	4801      	ldr	r0, [pc, #4]	@ (8002ba4 <__malloc_unlock+0x8>)
 8002b9e:	f7ff bf0c 	b.w	80029ba <__retarget_lock_release_recursive>
 8002ba2:	bf00      	nop
 8002ba4:	20000590 	.word	0x20000590

08002ba8 <__ssputs_r>:
 8002ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	461f      	mov	r7, r3
 8002bae:	688e      	ldr	r6, [r1, #8]
 8002bb0:	4682      	mov	sl, r0
 8002bb2:	42be      	cmp	r6, r7
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	680b      	ldr	r3, [r1, #0]
 8002bba:	d82d      	bhi.n	8002c18 <__ssputs_r+0x70>
 8002bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bc4:	d026      	beq.n	8002c14 <__ssputs_r+0x6c>
 8002bc6:	6965      	ldr	r5, [r4, #20]
 8002bc8:	6909      	ldr	r1, [r1, #16]
 8002bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bce:	eba3 0901 	sub.w	r9, r3, r1
 8002bd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bd6:	1c7b      	adds	r3, r7, #1
 8002bd8:	444b      	add	r3, r9
 8002bda:	106d      	asrs	r5, r5, #1
 8002bdc:	429d      	cmp	r5, r3
 8002bde:	bf38      	it	cc
 8002be0:	461d      	movcc	r5, r3
 8002be2:	0553      	lsls	r3, r2, #21
 8002be4:	d527      	bpl.n	8002c36 <__ssputs_r+0x8e>
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7ff ff52 	bl	8002a90 <_malloc_r>
 8002bec:	4606      	mov	r6, r0
 8002bee:	b360      	cbz	r0, 8002c4a <__ssputs_r+0xa2>
 8002bf0:	464a      	mov	r2, r9
 8002bf2:	6921      	ldr	r1, [r4, #16]
 8002bf4:	f000 fafa 	bl	80031ec <memcpy>
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	6126      	str	r6, [r4, #16]
 8002c06:	444e      	add	r6, r9
 8002c08:	6026      	str	r6, [r4, #0]
 8002c0a:	463e      	mov	r6, r7
 8002c0c:	6165      	str	r5, [r4, #20]
 8002c0e:	eba5 0509 	sub.w	r5, r5, r9
 8002c12:	60a5      	str	r5, [r4, #8]
 8002c14:	42be      	cmp	r6, r7
 8002c16:	d900      	bls.n	8002c1a <__ssputs_r+0x72>
 8002c18:	463e      	mov	r6, r7
 8002c1a:	4632      	mov	r2, r6
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	6820      	ldr	r0, [r4, #0]
 8002c20:	f000 faac 	bl	800317c <memmove>
 8002c24:	2000      	movs	r0, #0
 8002c26:	68a3      	ldr	r3, [r4, #8]
 8002c28:	1b9b      	subs	r3, r3, r6
 8002c2a:	60a3      	str	r3, [r4, #8]
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	4433      	add	r3, r6
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c36:	462a      	mov	r2, r5
 8002c38:	f000 fae6 	bl	8003208 <_realloc_r>
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d1e0      	bne.n	8002c04 <__ssputs_r+0x5c>
 8002c42:	4650      	mov	r0, sl
 8002c44:	6921      	ldr	r1, [r4, #16]
 8002c46:	f7ff feb9 	bl	80029bc <_free_r>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	f8ca 3000 	str.w	r3, [sl]
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f04f 30ff 	mov.w	r0, #4294967295
 8002c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c5a:	81a3      	strh	r3, [r4, #12]
 8002c5c:	e7e9      	b.n	8002c32 <__ssputs_r+0x8a>
	...

08002c60 <_svfiprintf_r>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	4698      	mov	r8, r3
 8002c66:	898b      	ldrh	r3, [r1, #12]
 8002c68:	4607      	mov	r7, r0
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	460d      	mov	r5, r1
 8002c6e:	4614      	mov	r4, r2
 8002c70:	b09d      	sub	sp, #116	@ 0x74
 8002c72:	d510      	bpl.n	8002c96 <_svfiprintf_r+0x36>
 8002c74:	690b      	ldr	r3, [r1, #16]
 8002c76:	b973      	cbnz	r3, 8002c96 <_svfiprintf_r+0x36>
 8002c78:	2140      	movs	r1, #64	@ 0x40
 8002c7a:	f7ff ff09 	bl	8002a90 <_malloc_r>
 8002c7e:	6028      	str	r0, [r5, #0]
 8002c80:	6128      	str	r0, [r5, #16]
 8002c82:	b930      	cbnz	r0, 8002c92 <_svfiprintf_r+0x32>
 8002c84:	230c      	movs	r3, #12
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	b01d      	add	sp, #116	@ 0x74
 8002c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c92:	2340      	movs	r3, #64	@ 0x40
 8002c94:	616b      	str	r3, [r5, #20]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ca0:	2330      	movs	r3, #48	@ 0x30
 8002ca2:	f04f 0901 	mov.w	r9, #1
 8002ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002caa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002e44 <_svfiprintf_r+0x1e4>
 8002cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	469a      	mov	sl, r3
 8002cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cba:	b10a      	cbz	r2, 8002cc0 <_svfiprintf_r+0x60>
 8002cbc:	2a25      	cmp	r2, #37	@ 0x25
 8002cbe:	d1f9      	bne.n	8002cb4 <_svfiprintf_r+0x54>
 8002cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8002cc4:	d00b      	beq.n	8002cde <_svfiprintf_r+0x7e>
 8002cc6:	465b      	mov	r3, fp
 8002cc8:	4622      	mov	r2, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	4638      	mov	r0, r7
 8002cce:	f7ff ff6b 	bl	8002ba8 <__ssputs_r>
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	f000 80a7 	beq.w	8002e26 <_svfiprintf_r+0x1c6>
 8002cd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cda:	445a      	add	r2, fp
 8002cdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cde:	f89a 3000 	ldrb.w	r3, [sl]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 809f 	beq.w	8002e26 <_svfiprintf_r+0x1c6>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f04f 32ff 	mov.w	r2, #4294967295
 8002cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cf2:	f10a 0a01 	add.w	sl, sl, #1
 8002cf6:	9304      	str	r3, [sp, #16]
 8002cf8:	9307      	str	r3, [sp, #28]
 8002cfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d00:	4654      	mov	r4, sl
 8002d02:	2205      	movs	r2, #5
 8002d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d08:	484e      	ldr	r0, [pc, #312]	@ (8002e44 <_svfiprintf_r+0x1e4>)
 8002d0a:	f000 fa61 	bl	80031d0 <memchr>
 8002d0e:	9a04      	ldr	r2, [sp, #16]
 8002d10:	b9d8      	cbnz	r0, 8002d4a <_svfiprintf_r+0xea>
 8002d12:	06d0      	lsls	r0, r2, #27
 8002d14:	bf44      	itt	mi
 8002d16:	2320      	movmi	r3, #32
 8002d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d1c:	0711      	lsls	r1, r2, #28
 8002d1e:	bf44      	itt	mi
 8002d20:	232b      	movmi	r3, #43	@ 0x2b
 8002d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d26:	f89a 3000 	ldrb.w	r3, [sl]
 8002d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d2c:	d015      	beq.n	8002d5a <_svfiprintf_r+0xfa>
 8002d2e:	4654      	mov	r4, sl
 8002d30:	2000      	movs	r0, #0
 8002d32:	f04f 0c0a 	mov.w	ip, #10
 8002d36:	9a07      	ldr	r2, [sp, #28]
 8002d38:	4621      	mov	r1, r4
 8002d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d3e:	3b30      	subs	r3, #48	@ 0x30
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d94b      	bls.n	8002ddc <_svfiprintf_r+0x17c>
 8002d44:	b1b0      	cbz	r0, 8002d74 <_svfiprintf_r+0x114>
 8002d46:	9207      	str	r2, [sp, #28]
 8002d48:	e014      	b.n	8002d74 <_svfiprintf_r+0x114>
 8002d4a:	eba0 0308 	sub.w	r3, r0, r8
 8002d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	46a2      	mov	sl, r4
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	e7d2      	b.n	8002d00 <_svfiprintf_r+0xa0>
 8002d5a:	9b03      	ldr	r3, [sp, #12]
 8002d5c:	1d19      	adds	r1, r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	9103      	str	r1, [sp, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bfbb      	ittet	lt
 8002d66:	425b      	neglt	r3, r3
 8002d68:	f042 0202 	orrlt.w	r2, r2, #2
 8002d6c:	9307      	strge	r3, [sp, #28]
 8002d6e:	9307      	strlt	r3, [sp, #28]
 8002d70:	bfb8      	it	lt
 8002d72:	9204      	strlt	r2, [sp, #16]
 8002d74:	7823      	ldrb	r3, [r4, #0]
 8002d76:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d78:	d10a      	bne.n	8002d90 <_svfiprintf_r+0x130>
 8002d7a:	7863      	ldrb	r3, [r4, #1]
 8002d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d7e:	d132      	bne.n	8002de6 <_svfiprintf_r+0x186>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	3402      	adds	r4, #2
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	9203      	str	r2, [sp, #12]
 8002d8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d8e:	9305      	str	r3, [sp, #20]
 8002d90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002e48 <_svfiprintf_r+0x1e8>
 8002d94:	2203      	movs	r2, #3
 8002d96:	4650      	mov	r0, sl
 8002d98:	7821      	ldrb	r1, [r4, #0]
 8002d9a:	f000 fa19 	bl	80031d0 <memchr>
 8002d9e:	b138      	cbz	r0, 8002db0 <_svfiprintf_r+0x150>
 8002da0:	2240      	movs	r2, #64	@ 0x40
 8002da2:	9b04      	ldr	r3, [sp, #16]
 8002da4:	eba0 000a 	sub.w	r0, r0, sl
 8002da8:	4082      	lsls	r2, r0
 8002daa:	4313      	orrs	r3, r2
 8002dac:	3401      	adds	r4, #1
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db4:	2206      	movs	r2, #6
 8002db6:	4825      	ldr	r0, [pc, #148]	@ (8002e4c <_svfiprintf_r+0x1ec>)
 8002db8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dbc:	f000 fa08 	bl	80031d0 <memchr>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d036      	beq.n	8002e32 <_svfiprintf_r+0x1d2>
 8002dc4:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <_svfiprintf_r+0x1f0>)
 8002dc6:	bb1b      	cbnz	r3, 8002e10 <_svfiprintf_r+0x1b0>
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dd6:	4433      	add	r3, r6
 8002dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dda:	e76a      	b.n	8002cb2 <_svfiprintf_r+0x52>
 8002ddc:	460c      	mov	r4, r1
 8002dde:	2001      	movs	r0, #1
 8002de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002de4:	e7a8      	b.n	8002d38 <_svfiprintf_r+0xd8>
 8002de6:	2300      	movs	r3, #0
 8002de8:	f04f 0c0a 	mov.w	ip, #10
 8002dec:	4619      	mov	r1, r3
 8002dee:	3401      	adds	r4, #1
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	4620      	mov	r0, r4
 8002df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df8:	3a30      	subs	r2, #48	@ 0x30
 8002dfa:	2a09      	cmp	r2, #9
 8002dfc:	d903      	bls.n	8002e06 <_svfiprintf_r+0x1a6>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0c6      	beq.n	8002d90 <_svfiprintf_r+0x130>
 8002e02:	9105      	str	r1, [sp, #20]
 8002e04:	e7c4      	b.n	8002d90 <_svfiprintf_r+0x130>
 8002e06:	4604      	mov	r4, r0
 8002e08:	2301      	movs	r3, #1
 8002e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e0e:	e7f0      	b.n	8002df2 <_svfiprintf_r+0x192>
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	462a      	mov	r2, r5
 8002e16:	4638      	mov	r0, r7
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <_svfiprintf_r+0x1f4>)
 8002e1a:	a904      	add	r1, sp, #16
 8002e1c:	f3af 8000 	nop.w
 8002e20:	1c42      	adds	r2, r0, #1
 8002e22:	4606      	mov	r6, r0
 8002e24:	d1d6      	bne.n	8002dd4 <_svfiprintf_r+0x174>
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	065b      	lsls	r3, r3, #25
 8002e2a:	f53f af2d 	bmi.w	8002c88 <_svfiprintf_r+0x28>
 8002e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e30:	e72c      	b.n	8002c8c <_svfiprintf_r+0x2c>
 8002e32:	ab03      	add	r3, sp, #12
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	462a      	mov	r2, r5
 8002e38:	4638      	mov	r0, r7
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <_svfiprintf_r+0x1f4>)
 8002e3c:	a904      	add	r1, sp, #16
 8002e3e:	f000 f87d 	bl	8002f3c <_printf_i>
 8002e42:	e7ed      	b.n	8002e20 <_svfiprintf_r+0x1c0>
 8002e44:	0800406d 	.word	0x0800406d
 8002e48:	08004073 	.word	0x08004073
 8002e4c:	08004077 	.word	0x08004077
 8002e50:	00000000 	.word	0x00000000
 8002e54:	08002ba9 	.word	0x08002ba9

08002e58 <_printf_common>:
 8002e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	4698      	mov	r8, r3
 8002e60:	688a      	ldr	r2, [r1, #8]
 8002e62:	690b      	ldr	r3, [r1, #16]
 8002e64:	4607      	mov	r7, r0
 8002e66:	4293      	cmp	r3, r2
 8002e68:	bfb8      	it	lt
 8002e6a:	4613      	movlt	r3, r2
 8002e6c:	6033      	str	r3, [r6, #0]
 8002e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e72:	460c      	mov	r4, r1
 8002e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e78:	b10a      	cbz	r2, 8002e7e <_printf_common+0x26>
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	6033      	str	r3, [r6, #0]
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	0699      	lsls	r1, r3, #26
 8002e82:	bf42      	ittt	mi
 8002e84:	6833      	ldrmi	r3, [r6, #0]
 8002e86:	3302      	addmi	r3, #2
 8002e88:	6033      	strmi	r3, [r6, #0]
 8002e8a:	6825      	ldr	r5, [r4, #0]
 8002e8c:	f015 0506 	ands.w	r5, r5, #6
 8002e90:	d106      	bne.n	8002ea0 <_printf_common+0x48>
 8002e92:	f104 0a19 	add.w	sl, r4, #25
 8002e96:	68e3      	ldr	r3, [r4, #12]
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	42ab      	cmp	r3, r5
 8002e9e:	dc2b      	bgt.n	8002ef8 <_printf_common+0xa0>
 8002ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	3b00      	subs	r3, #0
 8002ea8:	bf18      	it	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	0692      	lsls	r2, r2, #26
 8002eae:	d430      	bmi.n	8002f12 <_printf_common+0xba>
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002eb8:	47c8      	blx	r9
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d023      	beq.n	8002f06 <_printf_common+0xae>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	6922      	ldr	r2, [r4, #16]
 8002ec2:	f003 0306 	and.w	r3, r3, #6
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	bf14      	ite	ne
 8002eca:	2500      	movne	r5, #0
 8002ecc:	6833      	ldreq	r3, [r6, #0]
 8002ece:	f04f 0600 	mov.w	r6, #0
 8002ed2:	bf08      	it	eq
 8002ed4:	68e5      	ldreq	r5, [r4, #12]
 8002ed6:	f104 041a 	add.w	r4, r4, #26
 8002eda:	bf08      	it	eq
 8002edc:	1aed      	subeq	r5, r5, r3
 8002ede:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ee2:	bf08      	it	eq
 8002ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	bfc4      	itt	gt
 8002eec:	1a9b      	subgt	r3, r3, r2
 8002eee:	18ed      	addgt	r5, r5, r3
 8002ef0:	42b5      	cmp	r5, r6
 8002ef2:	d11a      	bne.n	8002f2a <_printf_common+0xd2>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e008      	b.n	8002f0a <_printf_common+0xb2>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4652      	mov	r2, sl
 8002efc:	4641      	mov	r1, r8
 8002efe:	4638      	mov	r0, r7
 8002f00:	47c8      	blx	r9
 8002f02:	3001      	adds	r0, #1
 8002f04:	d103      	bne.n	8002f0e <_printf_common+0xb6>
 8002f06:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0e:	3501      	adds	r5, #1
 8002f10:	e7c1      	b.n	8002e96 <_printf_common+0x3e>
 8002f12:	2030      	movs	r0, #48	@ 0x30
 8002f14:	18e1      	adds	r1, r4, r3
 8002f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f20:	4422      	add	r2, r4
 8002f22:	3302      	adds	r3, #2
 8002f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f28:	e7c2      	b.n	8002eb0 <_printf_common+0x58>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	4641      	mov	r1, r8
 8002f30:	4638      	mov	r0, r7
 8002f32:	47c8      	blx	r9
 8002f34:	3001      	adds	r0, #1
 8002f36:	d0e6      	beq.n	8002f06 <_printf_common+0xae>
 8002f38:	3601      	adds	r6, #1
 8002f3a:	e7d9      	b.n	8002ef0 <_printf_common+0x98>

08002f3c <_printf_i>:
 8002f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f40:	7e0f      	ldrb	r7, [r1, #24]
 8002f42:	4691      	mov	r9, r2
 8002f44:	2f78      	cmp	r7, #120	@ 0x78
 8002f46:	4680      	mov	r8, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	469a      	mov	sl, r3
 8002f4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f52:	d807      	bhi.n	8002f64 <_printf_i+0x28>
 8002f54:	2f62      	cmp	r7, #98	@ 0x62
 8002f56:	d80a      	bhi.n	8002f6e <_printf_i+0x32>
 8002f58:	2f00      	cmp	r7, #0
 8002f5a:	f000 80d3 	beq.w	8003104 <_printf_i+0x1c8>
 8002f5e:	2f58      	cmp	r7, #88	@ 0x58
 8002f60:	f000 80ba 	beq.w	80030d8 <_printf_i+0x19c>
 8002f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f6c:	e03a      	b.n	8002fe4 <_printf_i+0xa8>
 8002f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f72:	2b15      	cmp	r3, #21
 8002f74:	d8f6      	bhi.n	8002f64 <_printf_i+0x28>
 8002f76:	a101      	add	r1, pc, #4	@ (adr r1, 8002f7c <_printf_i+0x40>)
 8002f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fe9 	.word	0x08002fe9
 8002f84:	08002f65 	.word	0x08002f65
 8002f88:	08002f65 	.word	0x08002f65
 8002f8c:	08002f65 	.word	0x08002f65
 8002f90:	08002f65 	.word	0x08002f65
 8002f94:	08002fe9 	.word	0x08002fe9
 8002f98:	08002f65 	.word	0x08002f65
 8002f9c:	08002f65 	.word	0x08002f65
 8002fa0:	08002f65 	.word	0x08002f65
 8002fa4:	08002f65 	.word	0x08002f65
 8002fa8:	080030eb 	.word	0x080030eb
 8002fac:	08003013 	.word	0x08003013
 8002fb0:	080030a5 	.word	0x080030a5
 8002fb4:	08002f65 	.word	0x08002f65
 8002fb8:	08002f65 	.word	0x08002f65
 8002fbc:	0800310d 	.word	0x0800310d
 8002fc0:	08002f65 	.word	0x08002f65
 8002fc4:	08003013 	.word	0x08003013
 8002fc8:	08002f65 	.word	0x08002f65
 8002fcc:	08002f65 	.word	0x08002f65
 8002fd0:	080030ad 	.word	0x080030ad
 8002fd4:	6833      	ldr	r3, [r6, #0]
 8002fd6:	1d1a      	adds	r2, r3, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6032      	str	r2, [r6, #0]
 8002fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e09e      	b.n	8003126 <_printf_i+0x1ea>
 8002fe8:	6833      	ldr	r3, [r6, #0]
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	1d19      	adds	r1, r3, #4
 8002fee:	6031      	str	r1, [r6, #0]
 8002ff0:	0606      	lsls	r6, r0, #24
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_i+0xbc>
 8002ff4:	681d      	ldr	r5, [r3, #0]
 8002ff6:	e003      	b.n	8003000 <_printf_i+0xc4>
 8002ff8:	0645      	lsls	r5, r0, #25
 8002ffa:	d5fb      	bpl.n	8002ff4 <_printf_i+0xb8>
 8002ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003000:	2d00      	cmp	r5, #0
 8003002:	da03      	bge.n	800300c <_printf_i+0xd0>
 8003004:	232d      	movs	r3, #45	@ 0x2d
 8003006:	426d      	negs	r5, r5
 8003008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800300c:	230a      	movs	r3, #10
 800300e:	4859      	ldr	r0, [pc, #356]	@ (8003174 <_printf_i+0x238>)
 8003010:	e011      	b.n	8003036 <_printf_i+0xfa>
 8003012:	6821      	ldr	r1, [r4, #0]
 8003014:	6833      	ldr	r3, [r6, #0]
 8003016:	0608      	lsls	r0, r1, #24
 8003018:	f853 5b04 	ldr.w	r5, [r3], #4
 800301c:	d402      	bmi.n	8003024 <_printf_i+0xe8>
 800301e:	0649      	lsls	r1, r1, #25
 8003020:	bf48      	it	mi
 8003022:	b2ad      	uxthmi	r5, r5
 8003024:	2f6f      	cmp	r7, #111	@ 0x6f
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	bf14      	ite	ne
 800302a:	230a      	movne	r3, #10
 800302c:	2308      	moveq	r3, #8
 800302e:	4851      	ldr	r0, [pc, #324]	@ (8003174 <_printf_i+0x238>)
 8003030:	2100      	movs	r1, #0
 8003032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003036:	6866      	ldr	r6, [r4, #4]
 8003038:	2e00      	cmp	r6, #0
 800303a:	bfa8      	it	ge
 800303c:	6821      	ldrge	r1, [r4, #0]
 800303e:	60a6      	str	r6, [r4, #8]
 8003040:	bfa4      	itt	ge
 8003042:	f021 0104 	bicge.w	r1, r1, #4
 8003046:	6021      	strge	r1, [r4, #0]
 8003048:	b90d      	cbnz	r5, 800304e <_printf_i+0x112>
 800304a:	2e00      	cmp	r6, #0
 800304c:	d04b      	beq.n	80030e6 <_printf_i+0x1aa>
 800304e:	4616      	mov	r6, r2
 8003050:	fbb5 f1f3 	udiv	r1, r5, r3
 8003054:	fb03 5711 	mls	r7, r3, r1, r5
 8003058:	5dc7      	ldrb	r7, [r0, r7]
 800305a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800305e:	462f      	mov	r7, r5
 8003060:	42bb      	cmp	r3, r7
 8003062:	460d      	mov	r5, r1
 8003064:	d9f4      	bls.n	8003050 <_printf_i+0x114>
 8003066:	2b08      	cmp	r3, #8
 8003068:	d10b      	bne.n	8003082 <_printf_i+0x146>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	07df      	lsls	r7, r3, #31
 800306e:	d508      	bpl.n	8003082 <_printf_i+0x146>
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	6861      	ldr	r1, [r4, #4]
 8003074:	4299      	cmp	r1, r3
 8003076:	bfde      	ittt	le
 8003078:	2330      	movle	r3, #48	@ 0x30
 800307a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800307e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003082:	1b92      	subs	r2, r2, r6
 8003084:	6122      	str	r2, [r4, #16]
 8003086:	464b      	mov	r3, r9
 8003088:	4621      	mov	r1, r4
 800308a:	4640      	mov	r0, r8
 800308c:	f8cd a000 	str.w	sl, [sp]
 8003090:	aa03      	add	r2, sp, #12
 8003092:	f7ff fee1 	bl	8002e58 <_printf_common>
 8003096:	3001      	adds	r0, #1
 8003098:	d14a      	bne.n	8003130 <_printf_i+0x1f4>
 800309a:	f04f 30ff 	mov.w	r0, #4294967295
 800309e:	b004      	add	sp, #16
 80030a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	2778      	movs	r7, #120	@ 0x78
 80030ae:	4832      	ldr	r0, [pc, #200]	@ (8003178 <_printf_i+0x23c>)
 80030b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	6831      	ldr	r1, [r6, #0]
 80030b8:	061f      	lsls	r7, r3, #24
 80030ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80030be:	d402      	bmi.n	80030c6 <_printf_i+0x18a>
 80030c0:	065f      	lsls	r7, r3, #25
 80030c2:	bf48      	it	mi
 80030c4:	b2ad      	uxthmi	r5, r5
 80030c6:	6031      	str	r1, [r6, #0]
 80030c8:	07d9      	lsls	r1, r3, #31
 80030ca:	bf44      	itt	mi
 80030cc:	f043 0320 	orrmi.w	r3, r3, #32
 80030d0:	6023      	strmi	r3, [r4, #0]
 80030d2:	b11d      	cbz	r5, 80030dc <_printf_i+0x1a0>
 80030d4:	2310      	movs	r3, #16
 80030d6:	e7ab      	b.n	8003030 <_printf_i+0xf4>
 80030d8:	4826      	ldr	r0, [pc, #152]	@ (8003174 <_printf_i+0x238>)
 80030da:	e7e9      	b.n	80030b0 <_printf_i+0x174>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	e7f6      	b.n	80030d4 <_printf_i+0x198>
 80030e6:	4616      	mov	r6, r2
 80030e8:	e7bd      	b.n	8003066 <_printf_i+0x12a>
 80030ea:	6833      	ldr	r3, [r6, #0]
 80030ec:	6825      	ldr	r5, [r4, #0]
 80030ee:	1d18      	adds	r0, r3, #4
 80030f0:	6961      	ldr	r1, [r4, #20]
 80030f2:	6030      	str	r0, [r6, #0]
 80030f4:	062e      	lsls	r6, r5, #24
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	d501      	bpl.n	80030fe <_printf_i+0x1c2>
 80030fa:	6019      	str	r1, [r3, #0]
 80030fc:	e002      	b.n	8003104 <_printf_i+0x1c8>
 80030fe:	0668      	lsls	r0, r5, #25
 8003100:	d5fb      	bpl.n	80030fa <_printf_i+0x1be>
 8003102:	8019      	strh	r1, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	4616      	mov	r6, r2
 8003108:	6123      	str	r3, [r4, #16]
 800310a:	e7bc      	b.n	8003086 <_printf_i+0x14a>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	2100      	movs	r1, #0
 8003110:	1d1a      	adds	r2, r3, #4
 8003112:	6032      	str	r2, [r6, #0]
 8003114:	681e      	ldr	r6, [r3, #0]
 8003116:	6862      	ldr	r2, [r4, #4]
 8003118:	4630      	mov	r0, r6
 800311a:	f000 f859 	bl	80031d0 <memchr>
 800311e:	b108      	cbz	r0, 8003124 <_printf_i+0x1e8>
 8003120:	1b80      	subs	r0, r0, r6
 8003122:	6060      	str	r0, [r4, #4]
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	2300      	movs	r3, #0
 800312a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800312e:	e7aa      	b.n	8003086 <_printf_i+0x14a>
 8003130:	4632      	mov	r2, r6
 8003132:	4649      	mov	r1, r9
 8003134:	4640      	mov	r0, r8
 8003136:	6923      	ldr	r3, [r4, #16]
 8003138:	47d0      	blx	sl
 800313a:	3001      	adds	r0, #1
 800313c:	d0ad      	beq.n	800309a <_printf_i+0x15e>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	079b      	lsls	r3, r3, #30
 8003142:	d413      	bmi.n	800316c <_printf_i+0x230>
 8003144:	68e0      	ldr	r0, [r4, #12]
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	4298      	cmp	r0, r3
 800314a:	bfb8      	it	lt
 800314c:	4618      	movlt	r0, r3
 800314e:	e7a6      	b.n	800309e <_printf_i+0x162>
 8003150:	2301      	movs	r3, #1
 8003152:	4632      	mov	r2, r6
 8003154:	4649      	mov	r1, r9
 8003156:	4640      	mov	r0, r8
 8003158:	47d0      	blx	sl
 800315a:	3001      	adds	r0, #1
 800315c:	d09d      	beq.n	800309a <_printf_i+0x15e>
 800315e:	3501      	adds	r5, #1
 8003160:	68e3      	ldr	r3, [r4, #12]
 8003162:	9903      	ldr	r1, [sp, #12]
 8003164:	1a5b      	subs	r3, r3, r1
 8003166:	42ab      	cmp	r3, r5
 8003168:	dcf2      	bgt.n	8003150 <_printf_i+0x214>
 800316a:	e7eb      	b.n	8003144 <_printf_i+0x208>
 800316c:	2500      	movs	r5, #0
 800316e:	f104 0619 	add.w	r6, r4, #25
 8003172:	e7f5      	b.n	8003160 <_printf_i+0x224>
 8003174:	0800407e 	.word	0x0800407e
 8003178:	0800408f 	.word	0x0800408f

0800317c <memmove>:
 800317c:	4288      	cmp	r0, r1
 800317e:	b510      	push	{r4, lr}
 8003180:	eb01 0402 	add.w	r4, r1, r2
 8003184:	d902      	bls.n	800318c <memmove+0x10>
 8003186:	4284      	cmp	r4, r0
 8003188:	4623      	mov	r3, r4
 800318a:	d807      	bhi.n	800319c <memmove+0x20>
 800318c:	1e43      	subs	r3, r0, #1
 800318e:	42a1      	cmp	r1, r4
 8003190:	d008      	beq.n	80031a4 <memmove+0x28>
 8003192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800319a:	e7f8      	b.n	800318e <memmove+0x12>
 800319c:	4601      	mov	r1, r0
 800319e:	4402      	add	r2, r0
 80031a0:	428a      	cmp	r2, r1
 80031a2:	d100      	bne.n	80031a6 <memmove+0x2a>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ae:	e7f7      	b.n	80031a0 <memmove+0x24>

080031b0 <_sbrk_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	2300      	movs	r3, #0
 80031b4:	4d05      	ldr	r5, [pc, #20]	@ (80031cc <_sbrk_r+0x1c>)
 80031b6:	4604      	mov	r4, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fd fe84 	bl	8000ec8 <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_sbrk_r+0x1a>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_sbrk_r+0x1a>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	2000058c 	.word	0x2000058c

080031d0 <memchr>:
 80031d0:	4603      	mov	r3, r0
 80031d2:	b510      	push	{r4, lr}
 80031d4:	b2c9      	uxtb	r1, r1
 80031d6:	4402      	add	r2, r0
 80031d8:	4293      	cmp	r3, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	d101      	bne.n	80031e2 <memchr+0x12>
 80031de:	2000      	movs	r0, #0
 80031e0:	e003      	b.n	80031ea <memchr+0x1a>
 80031e2:	7804      	ldrb	r4, [r0, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	428c      	cmp	r4, r1
 80031e8:	d1f6      	bne.n	80031d8 <memchr+0x8>
 80031ea:	bd10      	pop	{r4, pc}

080031ec <memcpy>:
 80031ec:	440a      	add	r2, r1
 80031ee:	4291      	cmp	r1, r2
 80031f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80031f4:	d100      	bne.n	80031f8 <memcpy+0xc>
 80031f6:	4770      	bx	lr
 80031f8:	b510      	push	{r4, lr}
 80031fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fe:	4291      	cmp	r1, r2
 8003200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003204:	d1f9      	bne.n	80031fa <memcpy+0xe>
 8003206:	bd10      	pop	{r4, pc}

08003208 <_realloc_r>:
 8003208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320c:	4680      	mov	r8, r0
 800320e:	4615      	mov	r5, r2
 8003210:	460c      	mov	r4, r1
 8003212:	b921      	cbnz	r1, 800321e <_realloc_r+0x16>
 8003214:	4611      	mov	r1, r2
 8003216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	f7ff bc39 	b.w	8002a90 <_malloc_r>
 800321e:	b92a      	cbnz	r2, 800322c <_realloc_r+0x24>
 8003220:	f7ff fbcc 	bl	80029bc <_free_r>
 8003224:	2400      	movs	r4, #0
 8003226:	4620      	mov	r0, r4
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800322c:	f000 f81a 	bl	8003264 <_malloc_usable_size_r>
 8003230:	4285      	cmp	r5, r0
 8003232:	4606      	mov	r6, r0
 8003234:	d802      	bhi.n	800323c <_realloc_r+0x34>
 8003236:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800323a:	d8f4      	bhi.n	8003226 <_realloc_r+0x1e>
 800323c:	4629      	mov	r1, r5
 800323e:	4640      	mov	r0, r8
 8003240:	f7ff fc26 	bl	8002a90 <_malloc_r>
 8003244:	4607      	mov	r7, r0
 8003246:	2800      	cmp	r0, #0
 8003248:	d0ec      	beq.n	8003224 <_realloc_r+0x1c>
 800324a:	42b5      	cmp	r5, r6
 800324c:	462a      	mov	r2, r5
 800324e:	4621      	mov	r1, r4
 8003250:	bf28      	it	cs
 8003252:	4632      	movcs	r2, r6
 8003254:	f7ff ffca 	bl	80031ec <memcpy>
 8003258:	4621      	mov	r1, r4
 800325a:	4640      	mov	r0, r8
 800325c:	f7ff fbae 	bl	80029bc <_free_r>
 8003260:	463c      	mov	r4, r7
 8003262:	e7e0      	b.n	8003226 <_realloc_r+0x1e>

08003264 <_malloc_usable_size_r>:
 8003264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003268:	1f18      	subs	r0, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	bfbc      	itt	lt
 800326e:	580b      	ldrlt	r3, [r1, r0]
 8003270:	18c0      	addlt	r0, r0, r3
 8003272:	4770      	bx	lr

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
