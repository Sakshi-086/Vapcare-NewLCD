
NewDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003604  08003604  00005098  2**0
                  CONTENTS
  4 .ARM          00000008  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800360c  0800360c  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0000460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003614  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000098  080036ac  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080036ac  00005538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170d9  00000000  00000000  000050c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ed  00000000  00000000  0001c19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009df0  00000000  00000000  0001f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00029677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a7  00000000  00000000  0002a697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172ac  00000000  00000000  0002b73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004fe8  00000000  00000000  000429ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000479d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003200  00000000  00000000  00047a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000098 	.word	0x20000098
 8000158:	00000000 	.word	0x00000000
 800015c:	08002ff8 	.word	0x08002ff8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000009c 	.word	0x2000009c
 8000178:	08002ff8 	.word	0x08002ff8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b968 	b.w	8000474 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f2:	fb07 1114 	mls	r1, r7, r4, r1
 80001f6:	fa1f f68c 	uxth.w	r6, ip
 80001fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8110 	bcs.w	8000436 <__udivmoddi4+0x27a>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810d 	bls.w	8000436 <__udivmoddi4+0x27a>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fbb1 f0f7 	udiv	r0, r1, r7
 8000226:	fb07 1110 	mls	r1, r7, r0, r1
 800022a:	fb00 f606 	mul.w	r6, r0, r6
 800022e:	fa1f f38e 	uxth.w	r3, lr
 8000232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fa 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f7 	bls.w	800043a <__udivmoddi4+0x27e>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	1b9b      	subs	r3, r3, r6
 8000254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80ee 	bcc.w	8000464 <__udivmoddi4+0x2a8>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 808f 	bne.w	80003be <__udivmoddi4+0x202>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	2101      	movs	r1, #1
 80002a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	fb08 4416 	mls	r4, r8, r6, r4
 80002b6:	fb07 f006 	mul.w	r0, r7, r6
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fbb4 f0f8 	udiv	r0, r4, r8
 80002de:	fb08 4410 	mls	r4, r8, r0, r4
 80002e2:	fb00 f707 	mul.w	r7, r0, r7
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80ae 	bhi.w	800045e <__udivmoddi4+0x2a2>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa24 f607 	lsr.w	r6, r4, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbb6 f8f9 	udiv	r8, r6, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 6618 	mls	r6, r9, r8, r6
 800032e:	fa20 f307 	lsr.w	r3, r0, r7
 8000332:	408c      	lsls	r4, r1
 8000334:	fa00 fa01 	lsl.w	sl, r0, r1
 8000338:	fb08 f00e 	mul.w	r0, r8, lr
 800033c:	431c      	orrs	r4, r3
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000344:	4298      	cmp	r0, r3
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	eb1c 0303 	adds.w	r3, ip, r3
 8000350:	f108 36ff 	add.w	r6, r8, #4294967295
 8000354:	f080 8081 	bcs.w	800045a <__udivmoddi4+0x29e>
 8000358:	4298      	cmp	r0, r3
 800035a:	d97e      	bls.n	800045a <__udivmoddi4+0x29e>
 800035c:	f1a8 0802 	sub.w	r8, r8, #2
 8000360:	4463      	add	r3, ip
 8000362:	1a1e      	subs	r6, r3, r0
 8000364:	fbb6 f3f9 	udiv	r3, r6, r9
 8000368:	fb09 6613 	mls	r6, r9, r3, r6
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	b2a4      	uxth	r4, r4
 8000372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000376:	45a6      	cmp	lr, r4
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x1d0>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000382:	d266      	bcs.n	8000452 <__udivmoddi4+0x296>
 8000384:	45a6      	cmp	lr, r4
 8000386:	d964      	bls.n	8000452 <__udivmoddi4+0x296>
 8000388:	3b02      	subs	r3, #2
 800038a:	4464      	add	r4, ip
 800038c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000390:	fba0 8302 	umull	r8, r3, r0, r2
 8000394:	eba4 040e 	sub.w	r4, r4, lr
 8000398:	429c      	cmp	r4, r3
 800039a:	46c6      	mov	lr, r8
 800039c:	461e      	mov	r6, r3
 800039e:	d350      	bcc.n	8000442 <__udivmoddi4+0x286>
 80003a0:	d04d      	beq.n	800043e <__udivmoddi4+0x282>
 80003a2:	b155      	cbz	r5, 80003ba <__udivmoddi4+0x1fe>
 80003a4:	ebba 030e 	subs.w	r3, sl, lr
 80003a8:	eb64 0406 	sbc.w	r4, r4, r6
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	40cb      	lsrs	r3, r1
 80003b2:	431f      	orrs	r7, r3
 80003b4:	40cc      	lsrs	r4, r1
 80003b6:	e9c5 7400 	strd	r7, r4, [r5]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e751      	b.n	8000262 <__udivmoddi4+0xa6>
 80003be:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c2:	f1c2 0320 	rsb	r3, r2, #32
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa20 f303 	lsr.w	r3, r0, r3
 80003d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003d8:	fb08 1110 	mls	r1, r8, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f f78c 	uxth.w	r7, ip
 80003e4:	0c23      	lsrs	r3, r4, #16
 80003e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ea:	fb00 f107 	mul.w	r1, r0, r7
 80003ee:	4299      	cmp	r1, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x248>
 80003f2:	eb1c 0303 	adds.w	r3, ip, r3
 80003f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fa:	d22c      	bcs.n	8000456 <__udivmoddi4+0x29a>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d92a      	bls.n	8000456 <__udivmoddi4+0x29a>
 8000400:	3802      	subs	r0, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	fbb3 f1f8 	udiv	r1, r3, r8
 800040a:	fb08 3311 	mls	r3, r8, r1, r3
 800040e:	b2a4      	uxth	r4, r4
 8000410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000414:	fb01 f307 	mul.w	r3, r1, r7
 8000418:	42a3      	cmp	r3, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x272>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f101 36ff 	add.w	r6, r1, #4294967295
 8000424:	d213      	bcs.n	800044e <__udivmoddi4+0x292>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d911      	bls.n	800044e <__udivmoddi4+0x292>
 800042a:	3902      	subs	r1, #2
 800042c:	4464      	add	r4, ip
 800042e:	1ae4      	subs	r4, r4, r3
 8000430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xf2>
 8000436:	4604      	mov	r4, r0
 8000438:	e6f2      	b.n	8000220 <__udivmoddi4+0x64>
 800043a:	4608      	mov	r0, r1
 800043c:	e708      	b.n	8000250 <__udivmoddi4+0x94>
 800043e:	45c2      	cmp	sl, r8
 8000440:	d2af      	bcs.n	80003a2 <__udivmoddi4+0x1e6>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb63 060c 	sbc.w	r6, r3, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7a9      	b.n	80003a2 <__udivmoddi4+0x1e6>
 800044e:	4631      	mov	r1, r6
 8000450:	e7ed      	b.n	800042e <__udivmoddi4+0x272>
 8000452:	4603      	mov	r3, r0
 8000454:	e79a      	b.n	800038c <__udivmoddi4+0x1d0>
 8000456:	4630      	mov	r0, r6
 8000458:	e7d4      	b.n	8000404 <__udivmoddi4+0x248>
 800045a:	46b0      	mov	r8, r6
 800045c:	e781      	b.n	8000362 <__udivmoddi4+0x1a6>
 800045e:	4463      	add	r3, ip
 8000460:	3802      	subs	r0, #2
 8000462:	e74f      	b.n	8000304 <__udivmoddi4+0x148>
 8000464:	4606      	mov	r6, r0
 8000466:	4623      	mov	r3, r4
 8000468:	4608      	mov	r0, r1
 800046a:	e711      	b.n	8000290 <__udivmoddi4+0xd4>
 800046c:	3e02      	subs	r6, #2
 800046e:	4463      	add	r3, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000472:	bf00      	nop

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000478:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	2400      	movs	r4, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800047c:	4815      	ldr	r0, [pc, #84]	@ (80004d4 <MX_ADC_Init+0x5c>)
 800047e:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <MX_ADC_Init+0x60>)
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
 8000480:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000482:	e9c0 3400 	strd	r3, r4, [r0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000486:	2310      	movs	r3, #16
{
 8000488:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000492:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000496:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800049a:	e9c0 340d 	strd	r3, r4, [r0, #52]	@ 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	9403      	str	r4, [sp, #12]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004a0:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a2:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 80004a6:	6285      	str	r5, [r0, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	f880 402c 	strb.w	r4, [r0, #44]	@ 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ac:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004b0:	f000 fea4 	bl	80011fc <HAL_ADC_Init>
 80004b4:	b108      	cbz	r0, 80004ba <MX_ADC_Init+0x42>
  {
    Error_Handler();
 80004b6:	f000 fb42 	bl	8000b3e <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004ba:	4806      	ldr	r0, [pc, #24]	@ (80004d4 <MX_ADC_Init+0x5c>)
 80004bc:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004be:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80004c2:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c4:	f000 ff60 	bl	8001388 <HAL_ADC_ConfigChannel>
 80004c8:	b108      	cbz	r0, 80004ce <MX_ADC_Init+0x56>
  {
    Error_Handler();
 80004ca:	f000 fb38 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004ce:	b005      	add	sp, #20
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop
 80004d4:	200000b4 	.word	0x200000b4
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
 80004e0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	2214      	movs	r2, #20
 80004e4:	2100      	movs	r1, #0
 80004e6:	a803      	add	r0, sp, #12
 80004e8:	f002 f8da 	bl	80026a0 <memset>
  if(adcHandle->Instance==ADC1)
 80004ec:	6822      	ldr	r2, [r4, #0]
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <HAL_ADC_MspInit+0x7c>)
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d12e      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f4:	f503 338a 	add.w	r3, r3, #70656	@ 0x11400
 80004f8:	6a1a      	ldr	r2, [r3, #32]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PE9     ------> ADC_IN24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fa:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000500:	621a      	str	r2, [r3, #32]
 8000502:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	4815      	ldr	r0, [pc, #84]	@ (800055c <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000506:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	69da      	ldr	r2, [r3, #28]
 800051a:	f002 0201 	and.w	r2, r2, #1
 800051e:	9201      	str	r2, [sp, #4]
 8000520:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	f042 0210 	orr.w	r2, r2, #16
 8000528:	61da      	str	r2, [r3, #28]
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	9302      	str	r3, [sp, #8]
 8000532:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2301      	movs	r3, #1
 8000536:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f001 f825 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800053e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000542:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800054a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054e:	f001 f81b 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	b008      	add	sp, #32
 8000554:	bd10      	pop	{r4, pc}
 8000556:	bf00      	nop
 8000558:	40012400 	.word	0x40012400
 800055c:	40020000 	.word	0x40020000
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000564:	4b1c      	ldr	r3, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0x74>)
{
 8000566:	b086      	sub	sp, #24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	f042 0220 	orr.w	r2, r2, #32
 800056e:	61da      	str	r2, [r3, #28]
 8000570:	69da      	ldr	r2, [r3, #28]
 8000572:	f002 0220 	and.w	r2, r2, #32
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	f042 0201 	orr.w	r2, r2, #1
 8000580:	61da      	str	r2, [r3, #28]
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	f002 0201 	and.w	r2, r2, #1
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058c:	69da      	ldr	r2, [r3, #28]
 800058e:	f042 0210 	orr.w	r2, r2, #16
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	f002 0210 	and.w	r2, r2, #16
 800059a:	9202      	str	r2, [sp, #8]
 800059c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	69da      	ldr	r2, [r3, #28]
 80005a0:	f042 0202 	orr.w	r2, r2, #2
 80005a4:	61da      	str	r2, [r3, #28]
 80005a6:	69da      	ldr	r2, [r3, #28]
 80005a8:	f002 0202 	and.w	r2, r2, #2
 80005ac:	9203      	str	r2, [sp, #12]
 80005ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	f042 0208 	orr.w	r2, r2, #8
 80005b6:	61da      	str	r2, [r3, #28]
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	f002 0208 	and.w	r2, r2, #8
 80005be:	9204      	str	r2, [sp, #16]
 80005c0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	69da      	ldr	r2, [r3, #28]
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	61da      	str	r2, [r3, #28]
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	9305      	str	r3, [sp, #20]
 80005d2:	9b05      	ldr	r3, [sp, #20]

}
 80005d4:	b006      	add	sp, #24
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800

080005dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80005e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <MX_I2C1_Init+0x34>)
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_I2C1_Init+0x38>)
 80005e4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	f001 f89c 	bl	8001738 <HAL_I2C_Init>
 8000600:	b118      	cbz	r0, 800060a <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000606:	f000 ba9a 	b.w	8000b3e <Error_Handler>
}
 800060a:	bd08      	pop	{r3, pc}
 800060c:	2000015c 	.word	0x2000015c
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000618:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800061a:	480b      	ldr	r0, [pc, #44]	@ (8000648 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <MX_I2C2_Init+0x34>)
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C2_Init+0x38>)
 8000620:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800062a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000638:	f001 f87e 	bl	8001738 <HAL_I2C_Init>
 800063c:	b118      	cbz	r0, 8000646 <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800063e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000642:	f000 ba7c 	b.w	8000b3e <Error_Handler>
}
 8000646:	bd08      	pop	{r3, pc}
 8000648:	20000108 	.word	0x20000108
 800064c:	40005800 	.word	0x40005800
 8000650:	000186a0 	.word	0x000186a0

08000654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2214      	movs	r2, #20
{
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
 800065a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	eb0d 0002 	add.w	r0, sp, r2
 8000660:	2100      	movs	r1, #0
 8000662:	f002 f81d 	bl	80026a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <HAL_I2C_MspInit+0xa8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d121      	bne.n	80006b2 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4c24      	ldr	r4, [pc, #144]	@ (8000700 <HAL_I2C_MspInit+0xac>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000670:	20c0      	movs	r0, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000674:	f04f 0c03 	mov.w	ip, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	61e3      	str	r3, [r4, #28]
 800067e:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	2312      	movs	r3, #18
 800068c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000690:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	481c      	ldr	r0, [pc, #112]	@ (8000704 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000694:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f000 ff76 	bl	8001588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800069e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80006a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006aa:	9302      	str	r3, [sp, #8]
 80006ac:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006ae:	b00a      	add	sp, #40	@ 0x28
 80006b0:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <HAL_I2C_MspInit+0xb4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d1fa      	bne.n	80006ae <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4c11      	ldr	r4, [pc, #68]	@ (8000700 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ba:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006c0:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	61e3      	str	r3, [r4, #28]
 80006c8:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	9303      	str	r3, [sp, #12]
 80006d2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006da:	2304      	movs	r3, #4
 80006dc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	a905      	add	r1, sp, #20
 80006e2:	f000 ff51 	bl	8001588 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006f4:	9304      	str	r3, [sp, #16]
 80006f6:	9b04      	ldr	r3, [sp, #16]
}
 80006f8:	e7d9      	b.n	80006ae <HAL_I2C_MspInit+0x5a>
 80006fa:	bf00      	nop
 80006fc:	40005400 	.word	0x40005400
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40005800 	.word	0x40005800

0800070c <KBD_Init>:
	KBD1_PORT,	KBD2_PORT,	KBD3_PORT,	KBD4_PORT,	KBD5_PORT,
	KBD6_PORT,	KBD7_PORT,	KBD8_PORT,	KBD9_PORT,	KBD10_PORT
};

void KBD_Init(void)
{
 800070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	uint8_t ui8Index;

	/* KBD GPIO Configuration --------------------------------------------------*/

	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000710:	2400      	movs	r4, #0
	{
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
		GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000712:	2503      	movs	r5, #3
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000714:	4627      	mov	r7, r4
 8000716:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8000780 <KBD_Init+0x74>
 800071a:	4e1a      	ldr	r6, [pc, #104]	@ (8000784 <KBD_Init+0x78>)
{
 800071c:	b086      	sub	sp, #24
		GPIO_InitStructure.Pin = ui16KBDGpioPins[ui8Index];
 800071e:	f838 3b02 	ldrh.w	r3, [r8], #2
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000722:	3401      	adds	r4, #1
		GPIO_InitStructure.Pull = GPIO_NOPULL;
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000724:	f856 0b04 	ldr.w	r0, [r6], #4
 8000728:	a901      	add	r1, sp, #4
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 800072a:	b2e4      	uxtb	r4, r4
		GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800072c:	e9cd 3701 	strd	r3, r7, [sp, #4]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000730:	e9cd 7503 	strd	r7, r5, [sp, #12]
		HAL_GPIO_Init((GPIO_TypeDef *)ui32KBDGpioPorts[ui8Index], &GPIO_InitStructure);
 8000734:	f000 ff28 	bl	8001588 <HAL_GPIO_Init>
	for(ui8Index = 0; ui8Index < NUMBER_OF_BUTTONS; ui8Index++)
 8000738:	2c0a      	cmp	r4, #10
 800073a:	d1f0      	bne.n	800071e <KBD_Init+0x12>
	}

	GPIO_InitStructure.Pin = AC_LED_PIN;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2604      	movs	r6, #4
 800073e:	2401      	movs	r4, #1
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 8000740:	eb0d 0106 	add.w	r1, sp, r6
 8000744:	4810      	ldr	r0, [pc, #64]	@ (8000788 <KBD_Init+0x7c>)
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	e9cd 6401 	strd	r6, r4, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800074a:	e9cd 4503 	strd	r4, r5, [sp, #12]
	HAL_GPIO_Init(AC_LED_PORT, &GPIO_InitStructure);
 800074e:	f000 ff1b 	bl	8001588 <HAL_GPIO_Init>
	AC_LED_OFF;
 8000752:	4631      	mov	r1, r6

	GPIO_InitStructure.Pin = BATT_LED_PIN;
 8000754:	2608      	movs	r6, #8
	AC_LED_OFF;
 8000756:	2200      	movs	r2, #0
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <KBD_Init+0x7c>)
 800075a:	f000 ffe7 	bl	800172c <HAL_GPIO_WritePin>
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 800075e:	a901      	add	r1, sp, #4
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <KBD_Init+0x7c>)
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	e9cd 6401 	strd	r6, r4, [sp, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8000766:	e9cd 4503 	strd	r4, r5, [sp, #12]
	HAL_GPIO_Init(BATT_LED_PORT, &GPIO_InitStructure);
 800076a:	f000 ff0d 	bl	8001588 <HAL_GPIO_Init>
	BATT_LED_OFF;
 800076e:	2200      	movs	r2, #0
 8000770:	4631      	mov	r1, r6
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <KBD_Init+0x7c>)
 8000774:	f000 ffda 	bl	800172c <HAL_GPIO_WritePin>
}
 8000778:	b006      	add	sp, #24
 800077a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800077e:	bf00      	nop
 8000780:	20000028 	.word	0x20000028
 8000784:	20000000 	.word	0x20000000
 8000788:	40020800 	.word	0x40020800

0800078c <LCD_Initialization>:


void LCD_Initialization(void)
{
//	HAL_Delay(2000);
}
 800078c:	4770      	bx	lr
	...

08000790 <set_text>:
    }
    return NULL; // Return NULL if no label matches the coordinates
}

// Function to send set text command to a widget
void set_text(const char* widget_type, const char* widget_name, const char* text) {
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	460d      	mov	r5, r1
    // Construct JSON command
    char json_command[256] = {0};
 8000794:	2100      	movs	r1, #0
void set_text(const char* widget_type, const char* widget_name, const char* text) {
 8000796:	4604      	mov	r4, r0
 8000798:	4616      	mov	r6, r2
 800079a:	b0c8      	sub	sp, #288	@ 0x120
    char json_command[256] = {0};
 800079c:	22fc      	movs	r2, #252	@ 0xfc
 800079e:	a809      	add	r0, sp, #36	@ 0x24
 80007a0:	9108      	str	r1, [sp, #32]
 80007a2:	f001 ff7d 	bl	80026a0 <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s%s%s",
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <set_text+0x58>)
 80007a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ac:	e9cd 5304 	strd	r5, r3, [sp, #16]
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <set_text+0x5c>)
 80007b2:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <set_text+0x60>)
 80007b4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <set_text+0x64>)
 80007ba:	9606      	str	r6, [sp, #24]
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <set_text+0x68>)
 80007c0:	a808      	add	r0, sp, #32
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <set_text+0x6c>)
 80007c6:	f001 ff37 	bl	8002638 <sniprintf>
             CMD_PREFIX, CMD_CODE_SET_TEXT, CMD_SUFFIX_TYPE, widget_type,
             CMD_SUFFIX_WIDGET, widget_name, CMD_SUFFIX_TEXT, text);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 80007ca:	a808      	add	r0, sp, #32
 80007cc:	f7ff fcd6 	bl	800017c <strlen>
 80007d0:	490b      	ldr	r1, [pc, #44]	@ (8000800 <set_text+0x70>)
 80007d2:	f1c0 02ff 	rsb	r2, r0, #255	@ 0xff
 80007d6:	a808      	add	r0, sp, #32
 80007d8:	f001 ff6a 	bl	80026b0 <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 80007dc:	a808      	add	r0, sp, #32
 80007de:	f000 fc7d 	bl	80010dc <USART_SendCommand>
}
 80007e2:	b048      	add	sp, #288	@ 0x120
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	bf00      	nop
 80007e8:	08003032 	.word	0x08003032
 80007ec:	0800303d 	.word	0x0800303d
 80007f0:	08003021 	.word	0x08003021
 80007f4:	0800304a 	.word	0x0800304a
 80007f8:	08003055 	.word	0x08003055
 80007fc:	08003010 	.word	0x08003010
 8000800:	080030b7 	.word	0x080030b7

08000804 <get_window_name_from_index>:

};


const char* get_window_name_from_index(uint16_t index) {
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 8000804:	2300      	movs	r3, #0
const char* get_window_name_from_index(uint16_t index) {
 8000806:	b510      	push	{r4, lr}
        if (index_mapping[i].index == index) {
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <get_window_name_from_index+0x20>)
 800080a:	f832 4033 	ldrh.w	r4, [r2, r3, lsl #3]
 800080e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8000812:	4284      	cmp	r4, r0
 8000814:	d101      	bne.n	800081a <get_window_name_from_index+0x16>
            return index_mapping[i].window_name;
 8000816:	6848      	ldr	r0, [r1, #4]
        }
    }
    return NULL; // Return NULL if no matching window is found
}
 8000818:	bd10      	pop	{r4, pc}
    for (int i = 0; i < sizeof(index_mapping) / sizeof(index_mapping[0]); i++) {
 800081a:	3301      	adds	r3, #1
 800081c:	2b12      	cmp	r3, #18
 800081e:	d1f4      	bne.n	800080a <get_window_name_from_index+0x6>
    return NULL; // Return NULL if no matching window is found
 8000820:	2000      	movs	r0, #0
 8000822:	e7f9      	b.n	8000818 <get_window_name_from_index+0x14>
 8000824:	08003520 	.word	0x08003520

08000828 <open_win>:

// Function to send open window command for a specific widget
void open_win(const char* widget) {
    // Construct JSON command
    char json_command[256] = {0};
 8000828:	2100      	movs	r1, #0
void open_win(const char* widget) {
 800082a:	b510      	push	{r4, lr}
 800082c:	4604      	mov	r4, r0
 800082e:	b0c6      	sub	sp, #280	@ 0x118
    char json_command[256] = {0};
 8000830:	22fc      	movs	r2, #252	@ 0xfc
 8000832:	a807      	add	r0, sp, #28
 8000834:	9106      	str	r1, [sp, #24]
 8000836:	f001 ff33 	bl	80026a0 <memset>

    snprintf(json_command, sizeof(json_command), "%s%s%s%s%s%s",
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <open_win+0x50>)
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	9303      	str	r3, [sp, #12]
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <open_win+0x54>)
 8000844:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <open_win+0x58>)
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <open_win+0x5c>)
 800084a:	9404      	str	r4, [sp, #16]
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <open_win+0x60>)
 8000850:	a806      	add	r0, sp, #24
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <open_win+0x64>)
 8000856:	f001 feef 	bl	8002638 <sniprintf>
             CMD_PREFIX, CMD_CODE_OPEN_WINDOW, CMD_SUFFIX_TYPE, WIDGET_TYPE_WINDOW,
             CMD_SUFFIX_WIDGET, widget);
    strncat(json_command, CMD_SUFFIX_END, sizeof(json_command) - strlen(json_command) - 1);
 800085a:	a806      	add	r0, sp, #24
 800085c:	f7ff fc8e 	bl	800017c <strlen>
 8000860:	490b      	ldr	r1, [pc, #44]	@ (8000890 <open_win+0x68>)
 8000862:	f1c0 02ff 	rsb	r2, r0, #255	@ 0xff
 8000866:	a806      	add	r0, sp, #24
 8000868:	f001 ff22 	bl	80026b0 <strncat>

    // Send the constructed command over USART
    USART_SendCommand(json_command);
 800086c:	a806      	add	r0, sp, #24
 800086e:	f000 fc35 	bl	80010dc <USART_SendCommand>
}
 8000872:	b046      	add	sp, #280	@ 0x118
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	0800303d 	.word	0x0800303d
 800087c:	08003064 	.word	0x08003064
 8000880:	08003025 	.word	0x08003025
 8000884:	0800304a 	.word	0x0800304a
 8000888:	0800306b 	.word	0x0800306b
 800088c:	08003010 	.word	0x08003010
 8000890:	080030b7 	.word	0x080030b7

08000894 <set_image>:

void set_image(const char* widget_name, const char* image_name) {
 8000894:	b530      	push	{r4, r5, lr}
 8000896:	4604      	mov	r4, r0
 8000898:	460d      	mov	r5, r1
    char json_command[256] = {0}; // Buffer for the JSON command
 800089a:	2100      	movs	r1, #0
void set_image(const char* widget_name, const char* image_name) {
 800089c:	b0c3      	sub	sp, #268	@ 0x10c
    char json_command[256] = {0}; // Buffer for the JSON command
 800089e:	22fc      	movs	r2, #252	@ 0xfc
 80008a0:	a803      	add	r0, sp, #12
 80008a2:	9102      	str	r1, [sp, #8]
 80008a4:	f001 fefc 	bl	80026a0 <memset>

    // Construct the JSON command for setting the image
    snprintf(json_command, sizeof(json_command),
 80008a8:	4623      	mov	r3, r4
 80008aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <set_image+0x30>)
 80008b0:	9500      	str	r5, [sp, #0]
 80008b2:	a802      	add	r0, sp, #8
 80008b4:	f001 fec0 	bl	8002638 <sniprintf>
             "ST<{\"cmd_code\":\"set_image\",\"type\":\"image\",\"widget\":\"%s\",\"image\":\"%s\"}>ET",
             widget_name, image_name);

    // Send the JSON command using USART
    USART_SendCommand(json_command);
 80008b8:	a802      	add	r0, sp, #8
 80008ba:	f000 fc0f 	bl	80010dc <USART_SendCommand>
}
 80008be:	b043      	add	sp, #268	@ 0x10c
 80008c0:	bd30      	pop	{r4, r5, pc}
 80008c2:	bf00      	nop
 80008c4:	08003074 	.word	0x08003074

080008c8 <LCD_DisplayImage>:

void LCD_DisplayImage(uint16_t ui16index) {
 80008c8:	b508      	push	{r3, lr}
    // Get window name from index
    const char *window_name = get_window_name_from_index(ui16index);
 80008ca:	f7ff ff9b 	bl	8000804 <get_window_name_from_index>

    if (window_name == NULL) {
 80008ce:	b920      	cbnz	r0, 80008da <LCD_DisplayImage+0x12>
        return;
    }

    // Open the window using open_win
    open_win(window_name);
}
 80008d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        USART_SendCommand("ST<{\"cmd_code\":\"error\",\"message\":\"Invalid Index\"}>ET");
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <LCD_DisplayImage+0x1c>)
 80008d6:	f000 bc01 	b.w	80010dc <USART_SendCommand>
}
 80008da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    open_win(window_name);
 80008de:	f7ff bfa3 	b.w	8000828 <open_win>
 80008e2:	bf00      	nop
 80008e4:	080030bd 	.word	0x080030bd

080008e8 <LCD_IntToString>:
//		LCD_DisplayIcon(ROW_3_ICON_X, ROW_3_ICON_Y, ROW_BOX_ICON_INDEX);							//3rd Row with Box
//		ui8PrevRow = ROW2;
//	}
//}
void LCD_IntToString(char *pi8Str, uint16_t ui16Num, uint8_t ui8Format)
{
 80008e8:	b530      	push	{r4, r5, lr}

    ui16Length = 3;
    for(ui16Index = 0; ui16Index < ui16Length; ui16Index++)
    {
    	ui16Reminder = ui16Num % 10;
    	ui16Num = ui16Num / 10;
 80008ea:	240a      	movs	r4, #10
 80008ec:	fbb1 f3f4 	udiv	r3, r1, r4
    	ui16Reminder = ui16Num % 10;
 80008f0:	fb04 1113 	mls	r1, r4, r3, r1
        pi8Str[ui16Length - (ui16Index + 1)] = ui16Reminder + '0';
 80008f4:	3130      	adds	r1, #48	@ 0x30
 80008f6:	7081      	strb	r1, [r0, #2]
    	ui16Reminder = ui16Num % 10;
 80008f8:	fbb3 f1f4 	udiv	r1, r3, r4
 80008fc:	fbb1 f5f4 	udiv	r5, r1, r4
 8000900:	fb04 3311 	mls	r3, r4, r1, r3
 8000904:	fb04 1115 	mls	r1, r4, r5, r1
        pi8Str[ui16Length - (ui16Index + 1)] = ui16Reminder + '0';
 8000908:	3330      	adds	r3, #48	@ 0x30
 800090a:	3130      	adds	r1, #48	@ 0x30
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b2c9      	uxtb	r1, r1
    }

    if(ui8Format == TRUE)
 8000910:	2a01      	cmp	r2, #1
        pi8Str[ui16Length - (ui16Index + 1)] = ui16Reminder + '0';
 8000912:	7043      	strb	r3, [r0, #1]
 8000914:	7001      	strb	r1, [r0, #0]
    if(ui8Format == TRUE)
 8000916:	d106      	bne.n	8000926 <LCD_IntToString+0x3e>
    {
		if(pi8Str[0] == '0')
 8000918:	2930      	cmp	r1, #48	@ 0x30
 800091a:	d104      	bne.n	8000926 <LCD_IntToString+0x3e>
		{
			pi8Str[0] = ' ';
 800091c:	2220      	movs	r2, #32
			if(pi8Str[1] == '0')
 800091e:	2b30      	cmp	r3, #48	@ 0x30
			pi8Str[0] = ' ';
 8000920:	7002      	strb	r2, [r0, #0]
			{
				pi8Str[1] = ' ';
 8000922:	bf08      	it	eq
 8000924:	7042      	strbeq	r2, [r0, #1]
			}
		}
    }
}
 8000926:	bd30      	pop	{r4, r5, pc}

08000928 <LCD_DisplayNewPatientSelection>:

void LCD_DisplayNewPatientSelection(void)
{
	LCD_DisplayImage(NEW_PATIENT_IMAGE_INDEX);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff bfcd 	b.w	80008c8 <LCD_DisplayImage>

0800092e <LCD_DisplayConfirmNewPatient>:
	}
}

void LCD_DisplayConfirmNewPatient(void)
{
	LCD_DisplayImage(CONFIRM_NEW_PATIENT_IMAGE_INDEX);
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff bfca 	b.w	80008c8 <LCD_DisplayImage>

08000934 <LCD_DisplayBatteryCharge>:
		HAL_Delay(3000);  // Assuming delay_ms is a function that causes a delay in milliseconds
	}
//	LCD_DisplayNumber(FB_MODE, ALERT_NON_CLEARABLE_ERROR_CODE_X, ALERT_NON_CLEARABLE_ERROR_CODE_Y, ui8AlertMessage, LCD_24X48_FONT_INDEX, BLACK, CYAN);
}

void LCD_DisplayBatteryCharge(uint8_t ui8BatteryCharge) {
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	4604      	mov	r4, r0
 8000938:	2501      	movs	r5, #1
    char image_label_name[16], image_name[16],label_name[16];

    for (uint8_t widget_index = 1; widget_index <= 60; widget_index++) {
        snprintf(image_label_name, sizeof(image_label_name), "BATTERY%u", widget_index);
 800093a:	4e1d      	ldr	r6, [pc, #116]	@ (80009b0 <LCD_DisplayBatteryCharge+0x7c>)
        snprintf(label_name,sizeof(label_name),"BATTLABEL%u", widget_index);
 800093c:	4f1d      	ldr	r7, [pc, #116]	@ (80009b4 <LCD_DisplayBatteryCharge+0x80>)
void LCD_DisplayBatteryCharge(uint8_t ui8BatteryCharge) {
 800093e:	b08f      	sub	sp, #60	@ 0x3c
        snprintf(image_label_name, sizeof(image_label_name), "BATTERY%u", widget_index);
 8000940:	462b      	mov	r3, r5
 8000942:	4632      	mov	r2, r6
 8000944:	2110      	movs	r1, #16
 8000946:	a802      	add	r0, sp, #8
 8000948:	f001 fe76 	bl	8002638 <sniprintf>
        snprintf(label_name,sizeof(label_name),"BATTLABEL%u", widget_index);
 800094c:	462b      	mov	r3, r5
 800094e:	463a      	mov	r2, r7
 8000950:	2110      	movs	r1, #16
 8000952:	a80a      	add	r0, sp, #40	@ 0x28
 8000954:	f001 fe70 	bl	8002638 <sniprintf>

        if ((ui8BatteryCharge >= 0) && (ui8BatteryCharge <= 20)) {
 8000958:	2c14      	cmp	r4, #20
 800095a:	d816      	bhi.n	800098a <LCD_DisplayBatteryCharge+0x56>
            snprintf(image_name, sizeof(image_name), "bat1");
 800095c:	4916      	ldr	r1, [pc, #88]	@ (80009b8 <LCD_DisplayBatteryCharge+0x84>)
        } else if ((ui8BatteryCharge >= 41) && (ui8BatteryCharge <= 60)) {
            snprintf(image_name, sizeof(image_name), "bat3");
        } else if ((ui8BatteryCharge >= 61) && (ui8BatteryCharge <= 80)) {
            snprintf(image_name, sizeof(image_name), "bat4");
        } else {
            snprintf(image_name, sizeof(image_name), "bat5");
 800095e:	a806      	add	r0, sp, #24
 8000960:	f001 fee6 	bl	8002730 <strcpy>
        }

        // Update the battery icon
        set_image(image_label_name, image_name);
 8000964:	a906      	add	r1, sp, #24
 8000966:	a802      	add	r0, sp, #8
 8000968:	f7ff ff94 	bl	8000894 <set_image>
        char value_str[8]; // Buffer to store the number as a string
        LCD_IntToString(value_str, ui8BatteryCharge, TRUE);
 800096c:	4668      	mov	r0, sp
 800096e:	2201      	movs	r2, #1
 8000970:	4621      	mov	r1, r4
 8000972:	f7ff ffb9 	bl	80008e8 <LCD_IntToString>
    for (uint8_t widget_index = 1; widget_index <= 60; widget_index++) {
 8000976:	3501      	adds	r5, #1
//        snprintf(value_str, sizeof(value_str), "%u", ui8BatteryCharge); // Convert number to string
        set_text("label", label_name, value_str);
 8000978:	4602      	mov	r2, r0
 800097a:	a90a      	add	r1, sp, #40	@ 0x28
 800097c:	480f      	ldr	r0, [pc, #60]	@ (80009bc <LCD_DisplayBatteryCharge+0x88>)
 800097e:	f7ff ff07 	bl	8000790 <set_text>
    for (uint8_t widget_index = 1; widget_index <= 60; widget_index++) {
 8000982:	2d3d      	cmp	r5, #61	@ 0x3d
 8000984:	d1dc      	bne.n	8000940 <LCD_DisplayBatteryCharge+0xc>
    }
}
 8000986:	b00f      	add	sp, #60	@ 0x3c
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if ((ui8BatteryCharge >= 21) && (ui8BatteryCharge <= 40)) {
 800098a:	f1a4 0315 	sub.w	r3, r4, #21
 800098e:	2b13      	cmp	r3, #19
 8000990:	d801      	bhi.n	8000996 <LCD_DisplayBatteryCharge+0x62>
            snprintf(image_name, sizeof(image_name), "bat2");
 8000992:	490b      	ldr	r1, [pc, #44]	@ (80009c0 <LCD_DisplayBatteryCharge+0x8c>)
 8000994:	e7e3      	b.n	800095e <LCD_DisplayBatteryCharge+0x2a>
        } else if ((ui8BatteryCharge >= 41) && (ui8BatteryCharge <= 60)) {
 8000996:	f1a4 0329 	sub.w	r3, r4, #41	@ 0x29
 800099a:	2b13      	cmp	r3, #19
 800099c:	d801      	bhi.n	80009a2 <LCD_DisplayBatteryCharge+0x6e>
            snprintf(image_name, sizeof(image_name), "bat3");
 800099e:	4909      	ldr	r1, [pc, #36]	@ (80009c4 <LCD_DisplayBatteryCharge+0x90>)
 80009a0:	e7dd      	b.n	800095e <LCD_DisplayBatteryCharge+0x2a>
        } else if ((ui8BatteryCharge >= 61) && (ui8BatteryCharge <= 80)) {
 80009a2:	f1a4 033d 	sub.w	r3, r4, #61	@ 0x3d
 80009a6:	2b13      	cmp	r3, #19
            snprintf(image_name, sizeof(image_name), "bat4");
 80009a8:	bf94      	ite	ls
 80009aa:	4907      	ldrls	r1, [pc, #28]	@ (80009c8 <LCD_DisplayBatteryCharge+0x94>)
            snprintf(image_name, sizeof(image_name), "bat5");
 80009ac:	4907      	ldrhi	r1, [pc, #28]	@ (80009cc <LCD_DisplayBatteryCharge+0x98>)
 80009ae:	e7d6      	b.n	800095e <LCD_DisplayBatteryCharge+0x2a>
 80009b0:	080030f2 	.word	0x080030f2
 80009b4:	080030fc 	.word	0x080030fc
 80009b8:	08003108 	.word	0x08003108
 80009bc:	0800305e 	.word	0x0800305e
 80009c0:	0800310d 	.word	0x0800310d
 80009c4:	08003112 	.word	0x08003112
 80009c8:	08003117 	.word	0x08003117
 80009cc:	0800311c 	.word	0x0800311c

080009d0 <SystemClock_Config>:
  * @retval None
  */

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d0:	221c      	movs	r2, #28
{
 80009d2:	b530      	push	{r4, r5, lr}
 80009d4:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	2100      	movs	r1, #0
 80009d8:	eb0d 0002 	add.w	r0, sp, r2
 80009dc:	f001 fe60 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	2214      	movs	r2, #20
 80009e2:	2100      	movs	r1, #0
 80009e4:	4668      	mov	r0, sp
 80009e6:	f001 fe5b 	bl	80026a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ea:	4a17      	ldr	r2, [pc, #92]	@ (8000a48 <SystemClock_Config+0x78>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ee:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80009f0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80009f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009fc:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	2310      	movs	r3, #16
 8000a00:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a06:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000a0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0e:	2401      	movs	r4, #1
 8000a10:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000a12:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f000 ff73 	bl	8001908 <HAL_RCC_OscConfig>
 8000a22:	b108      	cbz	r0, 8000a28 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a30:	4621      	mov	r1, r4
 8000a32:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	e9cd 3500 	strd	r3, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a38:	f001 f9ac 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000a3c:	b108      	cbz	r0, 8000a42 <SystemClock_Config+0x72>
 8000a3e:	b672      	cpsid	i
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <SystemClock_Config+0x70>
}
 8000a42:	b013      	add	sp, #76	@ 0x4c
 8000a44:	bd30      	pop	{r4, r5, pc}
 8000a46:	bf00      	nop
 8000a48:	40007000 	.word	0x40007000

08000a4c <main>:
{
 8000a4c:	b508      	push	{r3, lr}
  HAL_Init();
 8000a4e:	f000 fba1 	bl	8001194 <HAL_Init>
  SystemClock_Config();
 8000a52:	f7ff ffbd 	bl	80009d0 <SystemClock_Config>
  MX_GPIO_Init();
 8000a56:	f7ff fd85 	bl	8000564 <MX_GPIO_Init>
  KBD_Init();
 8000a5a:	f7ff fe57 	bl	800070c <KBD_Init>
  LCD_Initialization();
 8000a5e:	f7ff fe95 	bl	800078c <LCD_Initialization>
  MX_ADC_Init();
 8000a62:	f7ff fd09 	bl	8000478 <MX_ADC_Init>
  MX_I2C1_Init();
 8000a66:	f7ff fdb9 	bl	80005dc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a6a:	f7ff fdd5 	bl	8000618 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000a6e:	f000 f869 	bl	8000b44 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000a72:	f000 f90b 	bl	8000c8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a76:	f000 f93d 	bl	8000cf4 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000a7a:	f000 f9cd 	bl	8000e18 <MX_TIM11_Init>
  MX_UART5_Init();
 8000a7e:	f000 fa0f 	bl	8000ea0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000a82:	f000 fa29 	bl	8000ed8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a86:	f000 fa43 	bl	8000f10 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a8a:	f000 fa5d 	bl	8000f48 <MX_USART3_UART_Init>
  HAL_Delay(5000); //Fixed Delay
 8000a8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a92:	f000 fba1 	bl	80011d8 <HAL_Delay>
  LCD_DisplayNewPatientSelection();
 8000a96:	f7ff ff47 	bl	8000928 <LCD_DisplayNewPatientSelection>
  HAL_Delay(3000);
 8000a9a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a9e:	f000 fb9b 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(20);
 8000aa2:	2014      	movs	r0, #20
 8000aa4:	f7ff ff46 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000aa8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000aac:	f000 fb94 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(65);
 8000ab0:	2041      	movs	r0, #65	@ 0x41
 8000ab2:	f7ff ff3f 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000ab6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000aba:	f000 fb8d 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(75);
 8000abe:	204b      	movs	r0, #75	@ 0x4b
 8000ac0:	f7ff ff38 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000ac4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ac8:	f000 fb86 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(85);
 8000acc:	2055      	movs	r0, #85	@ 0x55
 8000ace:	f7ff ff31 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000ad2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ad6:	f000 fb7f 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(100);
 8000ada:	2064      	movs	r0, #100	@ 0x64
 8000adc:	f7ff ff2a 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(5000);
 8000ae0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ae4:	f000 fb78 	bl	80011d8 <HAL_Delay>
  LCD_DisplayConfirmNewPatient();
 8000ae8:	f7ff ff21 	bl	800092e <LCD_DisplayConfirmNewPatient>
  HAL_Delay(3000);
 8000aec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000af0:	f000 fb72 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(20);
 8000af4:	2014      	movs	r0, #20
 8000af6:	f7ff ff1d 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000afa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000afe:	f000 fb6b 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(65);
 8000b02:	2041      	movs	r0, #65	@ 0x41
 8000b04:	f7ff ff16 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000b08:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b0c:	f000 fb64 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(75);
 8000b10:	204b      	movs	r0, #75	@ 0x4b
 8000b12:	f7ff ff0f 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000b16:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b1a:	f000 fb5d 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(85);
 8000b1e:	2055      	movs	r0, #85	@ 0x55
 8000b20:	f7ff ff08 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000b24:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b28:	f000 fb56 	bl	80011d8 <HAL_Delay>
  LCD_DisplayBatteryCharge(100);
 8000b2c:	2064      	movs	r0, #100	@ 0x64
 8000b2e:	f7ff ff01 	bl	8000934 <LCD_DisplayBatteryCharge>
  HAL_Delay(3000);
 8000b32:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b36:	f000 fb4f 	bl	80011d8 <HAL_Delay>
}
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	bd08      	pop	{r3, pc}

08000b3e <Error_Handler>:
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x2>
	...

08000b44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b44:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b46:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8000b4a:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <MX_SPI1_Init+0x40>)
 8000b4e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b60:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b64:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6e:	f001 f9f3 	bl	8001f58 <HAL_SPI_Init>
 8000b72:	b118      	cbz	r0, 8000b7c <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000b78:	f7ff bfe1 	b.w	8000b3e <Error_Handler>
}
 8000b7c:	bd08      	pop	{r3, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001b0 	.word	0x200001b0
 8000b84:	40013000 	.word	0x40013000

08000b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	2214      	movs	r2, #20
 8000b90:	2100      	movs	r1, #0
 8000b92:	a803      	add	r0, sp, #12
 8000b94:	f001 fd84 	bl	80026a0 <memset>
  if(spiHandle->Instance==SPI1)
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <HAL_SPI_MspInit+0x60>)
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d120      	bne.n	8000be2 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba0:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8000ba4:	6a1a      	ldr	r2, [r3, #32]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba6:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	480e      	ldr	r0, [pc, #56]	@ (8000bec <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	f042 0210 	orr.w	r2, r2, #16
 8000bc0:	61da      	str	r2, [r3, #28]
 8000bc2:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bdc:	a903      	add	r1, sp, #12
 8000bde:	f000 fcd3 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000be2:	b008      	add	sp, #32
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop
 8000be8:	40013000 	.word	0x40013000
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_MspInit+0x40>)
{
 8000bf2:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8000bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bf6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bfe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8000c02:	9201      	str	r2, [sp, #4]
 8000c04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	6a1a      	ldr	r2, [r3, #32]
 8000c08:	f042 0201 	orr.w	r2, r2, #1
 8000c0c:	621a      	str	r2, [r3, #32]
 8000c0e:	6a1a      	ldr	r2, [r3, #32]
 8000c10:	f002 0201 	and.w	r2, r2, #1
 8000c14:	9202      	str	r2, [sp, #8]
 8000c16:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	9303      	str	r3, [sp, #12]
 8000c28:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler>

08000c36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler>

08000c38 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler>

08000c3a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler>

08000c3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler>

08000c3e <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 bab6 	b.w	80011b4 <HAL_IncTick>

08000c48 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <_sbrk+0x30>)
{
 8000c4a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000c4c:	6811      	ldr	r1, [r2, #0]
{
 8000c4e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000c50:	b909      	cbnz	r1, 8000c56 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000c52:	490a      	ldr	r1, [pc, #40]	@ (8000c7c <_sbrk+0x34>)
 8000c54:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	6810      	ldr	r0, [r2, #0]
 8000c58:	4909      	ldr	r1, [pc, #36]	@ (8000c80 <_sbrk+0x38>)
 8000c5a:	4c0a      	ldr	r4, [pc, #40]	@ (8000c84 <_sbrk+0x3c>)
 8000c5c:	4403      	add	r3, r0
 8000c5e:	1b09      	subs	r1, r1, r4
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d906      	bls.n	8000c72 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000c64:	f001 fd38 	bl	80026d8 <__errno>
 8000c68:	230c      	movs	r3, #12
 8000c6a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000c70:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000c72:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000c74:	e7fc      	b.n	8000c70 <_sbrk+0x28>
 8000c76:	bf00      	nop
 8000c78:	20000208 	.word	0x20000208
 8000c7c:	20000538 	.word	0x20000538
 8000c80:	20014000 	.word	0x20014000
 8000c84:	00000400 	.word	0x00000400

08000c88 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	4770      	bx	lr
	...

08000c8c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	2210      	movs	r2, #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	a802      	add	r0, sp, #8
 8000c94:	f001 fd04 	bl	80026a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9a:	4814      	ldr	r0, [pc, #80]	@ (8000cec <MX_TIM3_Init+0x60>)
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.Prescaler = 0;
 8000ca2:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8000ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb0:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb2:	f001 fa21 	bl	80020f8 <HAL_TIM_Base_Init>
 8000cb6:	b108      	cbz	r0, 8000cbc <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8000cb8:	f7ff ff41 	bl	8000b3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <MX_TIM3_Init+0x60>)
 8000cc2:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc6:	f001 fae0 	bl	800228a <HAL_TIM_ConfigClockSource>
 8000cca:	b108      	cbz	r0, 8000cd0 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 8000ccc:	f7ff ff37 	bl	8000b3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd2:	4669      	mov	r1, sp
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cda:	f001 fb7b 	bl	80023d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	b108      	cbz	r0, 8000ce4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f7ff ff2d 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ce4:	b007      	add	sp, #28
 8000ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cea:	bf00      	nop
 8000cec:	2000028c 	.word	0x2000028c
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	a802      	add	r0, sp, #8
 8000cfc:	f001 fcd0 	bl	80026a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d02:	4814      	ldr	r0, [pc, #80]	@ (8000d54 <MX_TIM4_Init+0x60>)
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.Prescaler = 0;
 8000d0a:	e9c0 2300 	strd	r2, r3, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
 8000d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d1a:	f001 f9ed 	bl	80020f8 <HAL_TIM_Base_Init>
 8000d1e:	b108      	cbz	r0, 8000d24 <MX_TIM4_Init+0x30>
  {
    Error_Handler();
 8000d20:	f7ff ff0d 	bl	8000b3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d28:	480a      	ldr	r0, [pc, #40]	@ (8000d54 <MX_TIM4_Init+0x60>)
 8000d2a:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f001 faac 	bl	800228a <HAL_TIM_ConfigClockSource>
 8000d32:	b108      	cbz	r0, 8000d38 <MX_TIM4_Init+0x44>
  {
    Error_Handler();
 8000d34:	f7ff ff03 	bl	8000b3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d38:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3a:	4669      	mov	r1, sp
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d42:	f001 fb47 	bl	80023d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	b108      	cbz	r0, 8000d4c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d48:	f7ff fef9 	bl	8000b3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d4c:	b007      	add	sp, #28
 8000d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d52:	bf00      	nop
 8000d54:	2000024c 	.word	0x2000024c
 8000d58:	40000800 	.word	0x40000800

08000d5c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8000d5c:	6803      	ldr	r3, [r0, #0]
 8000d5e:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <HAL_TIM_Base_MspInit+0x5c>)
{
 8000d60:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM3)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d10b      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d6a:	f042 0202 	orr.w	r2, r2, #2
 8000d6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM4)
 8000d7e:	4a10      	ldr	r2, [pc, #64]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x64>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d10a      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d84:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000d86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d88:	f042 0204 	orr.w	r2, r2, #4
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	9302      	str	r3, [sp, #8]
 8000d96:	9b02      	ldr	r3, [sp, #8]
 8000d98:	e7ef      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM11)
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x68>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d1ec      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_TIM_Base_MspInit+0x60>)
 8000da2:	6a1a      	ldr	r2, [r3, #32]
 8000da4:	f042 0210 	orr.w	r2, r2, #16
 8000da8:	621a      	str	r2, [r3, #32]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	9b03      	ldr	r3, [sp, #12]
}
 8000db4:	e7e1      	b.n	8000d7a <HAL_TIM_Base_MspInit+0x1e>
 8000db6:	bf00      	nop
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40000800 	.word	0x40000800
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dc8:	b510      	push	{r4, lr}
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	2214      	movs	r2, #20
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	a801      	add	r0, sp, #4
 8000dd4:	f001 fc64 	bl	80026a0 <memset>
  if(timHandle->Instance==TIM11)
 8000dd8:	6822      	ldr	r2, [r4, #0]
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_TIM_MspPostInit+0x48>)
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d115      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8000de4:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	f042 0202 	orr.w	r2, r2, #2
 8000dec:	61da      	str	r2, [r3, #28]
 8000dee:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e02:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f000 fbbe 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8000e0c:	b006      	add	sp, #24
 8000e0e:	bd10      	pop	{r4, pc}
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40020400 	.word	0x40020400

08000e18 <MX_TIM11_Init>:
{
 8000e18:	b500      	push	{lr}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4668      	mov	r0, sp
 8000e22:	f001 fc3d 	bl	80026a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	2210      	movs	r2, #16
 8000e28:	2100      	movs	r1, #0
 8000e2a:	eb0d 0002 	add.w	r0, sp, r2
 8000e2e:	f001 fc37 	bl	80026a0 <memset>
  htim11.Init.Prescaler = 0;
 8000e32:	2300      	movs	r3, #0
  htim11.Instance = TIM11;
 8000e34:	4818      	ldr	r0, [pc, #96]	@ (8000e98 <MX_TIM11_Init+0x80>)
  htim11.Init.Prescaler = 0;
 8000e36:	4a19      	ldr	r2, [pc, #100]	@ (8000e9c <MX_TIM11_Init+0x84>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	6083      	str	r3, [r0, #8]
  htim11.Init.Prescaler = 0;
 8000e3a:	e9c0 2300 	strd	r2, r3, [r0]
  htim11.Init.Period = 65535;
 8000e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	6143      	str	r3, [r0, #20]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e48:	f001 f956 	bl	80020f8 <HAL_TIM_Base_Init>
 8000e4c:	b108      	cbz	r0, 8000e52 <MX_TIM11_Init+0x3a>
    Error_Handler();
 8000e4e:	f7ff fe76 	bl	8000b3e <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8000e56:	4669      	mov	r1, sp
 8000e58:	480f      	ldr	r0, [pc, #60]	@ (8000e98 <MX_TIM11_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5a:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f001 fa15 	bl	800228a <HAL_TIM_ConfigClockSource>
 8000e60:	b108      	cbz	r0, 8000e66 <MX_TIM11_Init+0x4e>
    Error_Handler();
 8000e62:	f7ff fe6c 	bl	8000b3e <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000e66:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_TIM11_Init+0x80>)
 8000e68:	f001 f96b 	bl	8002142 <HAL_TIM_PWM_Init>
 8000e6c:	b108      	cbz	r0, 8000e72 <MX_TIM11_Init+0x5a>
    Error_Handler();
 8000e6e:	f7ff fe66 	bl	8000b3e <Error_Handler>
  sConfigOC.Pulse = 0;
 8000e72:	2200      	movs	r2, #0
 8000e74:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_TIM11_Init+0x80>)
 8000e78:	a904      	add	r1, sp, #16
  sConfigOC.Pulse = 0;
 8000e7a:	e9cd 3204 	strd	r3, r2, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7e:	e9cd 2206 	strd	r2, r2, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	f001 f982 	bl	800218a <HAL_TIM_PWM_ConfigChannel>
 8000e86:	b108      	cbz	r0, 8000e8c <MX_TIM11_Init+0x74>
    Error_Handler();
 8000e88:	f7ff fe59 	bl	8000b3e <Error_Handler>
  HAL_TIM_MspPostInit(&htim11);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <MX_TIM11_Init+0x80>)
 8000e8e:	f7ff ff9b 	bl	8000dc8 <HAL_TIM_MspPostInit>
}
 8000e92:	b009      	add	sp, #36	@ 0x24
 8000e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e98:	2000020c 	.word	0x2000020c
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <MX_UART5_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000ea0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 9600;
 8000ea2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart5.Instance = UART5;
 8000ea6:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <MX_UART5_Init+0x30>)
  huart5.Init.BaudRate = 9600;
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <MX_UART5_Init+0x34>)
 8000eaa:	e9c0 2300 	strd	r2, r3, [r0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	2300      	movs	r3, #0
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	220c      	movs	r2, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000eb2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000eba:	6103      	str	r3, [r0, #16]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ebe:	f001 fb41 	bl	8002544 <HAL_UART_Init>
 8000ec2:	b118      	cbz	r0, 8000ecc <MX_UART5_Init+0x2c>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000ec8:	f7ff be39 	b.w	8000b3e <Error_Handler>
}
 8000ecc:	bd08      	pop	{r3, pc}
 8000ece:	bf00      	nop
 8000ed0:	200003a4 	.word	0x200003a4
 8000ed4:	40005000 	.word	0x40005000

08000ed8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8000eda:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <MX_USART1_UART_Init+0x34>)
 8000ee2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	f001 fb25 	bl	8002544 <HAL_UART_Init>
 8000efa:	b118      	cbz	r0, 8000f04 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f00:	f7ff be1d 	b.w	8000b3e <Error_Handler>
}
 8000f04:	bd08      	pop	{r3, pc}
 8000f06:	bf00      	nop
 8000f08:	2000035c 	.word	0x2000035c
 8000f0c:	40013800 	.word	0x40013800

08000f10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f10:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000f12:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart2.Instance = USART2;
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <MX_USART2_UART_Init+0x34>)
 8000f1a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f22:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	f001 fb09 	bl	8002544 <HAL_UART_Init>
 8000f32:	b118      	cbz	r0, 8000f3c <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f38:	f7ff be01 	b.w	8000b3e <Error_Handler>
}
 8000f3c:	bd08      	pop	{r3, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000314 	.word	0x20000314
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f48:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8000f4a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Instance = USART3;
 8000f4e:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <MX_USART3_UART_Init+0x34>)
 8000f52:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f58:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f62:	6103      	str	r3, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f66:	f001 faed 	bl	8002544 <HAL_UART_Init>
 8000f6a:	b118      	cbz	r0, 8000f74 <MX_USART3_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f70:	f7ff bde5 	b.w	8000b3e <Error_Handler>
}
 8000f74:	bd08      	pop	{r3, pc}
 8000f76:	bf00      	nop
 8000f78:	200002cc 	.word	0x200002cc
 8000f7c:	40004800 	.word	0x40004800

08000f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	2214      	movs	r2, #20
 8000f88:	2100      	movs	r1, #0
 8000f8a:	a809      	add	r0, sp, #36	@ 0x24
 8000f8c:	f001 fb88 	bl	80026a0 <memset>
  if(uartHandle->Instance==UART5)
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	4a4a      	ldr	r2, [pc, #296]	@ (80010bc <HAL_UART_MspInit+0x13c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d133      	bne.n	8001000 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f98:	4b49      	ldr	r3, [pc, #292]	@ (80010c0 <HAL_UART_MspInit+0x140>)
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2702      	movs	r7, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2601      	movs	r6, #1
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fa0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2503      	movs	r5, #3
    __HAL_RCC_UART5_CLK_ENABLE();
 8000faa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fb4:	2408      	movs	r4, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	f042 0204 	orr.w	r2, r2, #4
 8000fba:	61da      	str	r2, [r3, #28]
 8000fbc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	4841      	ldr	r0, [pc, #260]	@ (80010c4 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	f002 0204 	and.w	r2, r2, #4
 8000fc4:	9201      	str	r2, [sp, #4]
 8000fc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	a909      	add	r1, sp, #36	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	f042 0208 	orr.w	r2, r2, #8
 8000fd0:	61da      	str	r2, [r3, #28]
 8000fd2:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fe4:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f000 facd 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fee:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ff8:	940d      	str	r4, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffa:	4833      	ldr	r0, [pc, #204]	@ (80010c8 <HAL_UART_MspInit+0x148>)
 8000ffc:	a909      	add	r1, sp, #36	@ 0x24
 8000ffe:	e020      	b.n	8001042 <HAL_UART_MspInit+0xc2>
  else if(uartHandle->Instance==USART1)
 8001000:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_UART_MspInit+0x14c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d121      	bne.n	800104a <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    __HAL_RCC_USART1_CLK_ENABLE();
 800100c:	6a1a      	ldr	r2, [r3, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800100e:	2403      	movs	r4, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001014:	621a      	str	r2, [r3, #32]
 8001016:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	a909      	add	r1, sp, #36	@ 0x24
    __HAL_RCC_USART1_CLK_ENABLE();
 800101a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800101e:	9203      	str	r2, [sp, #12]
 8001020:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	61da      	str	r2, [r3, #28]
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	9304      	str	r3, [sp, #16]
 8001032:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103a:	2307      	movs	r3, #7
 800103c:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001042:	f000 faa1 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001046:	b00f      	add	sp, #60	@ 0x3c
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART2)
 800104a:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_UART_MspInit+0x154>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d11b      	bne.n	8001088 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <HAL_UART_MspInit+0x140>)
 8001052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001054:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
 800105a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800105c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001060:	9205      	str	r2, [sp, #20]
 8001062:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	69da      	ldr	r2, [r3, #28]
 8001066:	f042 0208 	orr.w	r2, r2, #8
 800106a:	61da      	str	r2, [r3, #28]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	9306      	str	r3, [sp, #24]
 8001074:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001076:	2360      	movs	r3, #96	@ 0x60
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001078:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800107c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	930a      	str	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001080:	2307      	movs	r3, #7
 8001082:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
 8001086:	e7b8      	b.n	8000ffa <HAL_UART_MspInit+0x7a>
  else if(uartHandle->Instance==USART3)
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <HAL_UART_MspInit+0x158>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d1db      	bne.n	8001046 <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_UART_MspInit+0x140>)
 8001090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001092:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001096:	625a      	str	r2, [r3, #36]	@ 0x24
 8001098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800109a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800109e:	9207      	str	r2, [sp, #28]
 80010a0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	f042 0208 	orr.w	r2, r2, #8
 80010a8:	61da      	str	r2, [r3, #28]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	9308      	str	r3, [sp, #32]
 80010b2:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b8:	e7de      	b.n	8001078 <HAL_UART_MspInit+0xf8>
 80010ba:	bf00      	nop
 80010bc:	40005000 	.word	0x40005000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40004400 	.word	0x40004400
 80010d8:	40004800 	.word	0x40004800

080010dc <USART_SendCommand>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USART_SendCommand(const char *command) {
 80010dc:	b510      	push	{r4, lr}
 80010de:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80010e0:	f7ff f84c 	bl	800017c <strlen>
 80010e4:	4621      	mov	r1, r4
}
 80010e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80010ea:	b282      	uxth	r2, r0
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	4801      	ldr	r0, [pc, #4]	@ (80010f8 <USART_SendCommand+0x1c>)
 80010f2:	f001 ba56 	b.w	80025a2 <HAL_UART_Transmit>
 80010f6:	bf00      	nop
 80010f8:	20000314 	.word	0x20000314

080010fc <Reset_Handler>:
 80010fc:	f7ff fdc4 	bl	8000c88 <SystemInit>
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <LoopFillZerobss+0xe>)
 8001102:	490c      	ldr	r1, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
 8001104:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <LoopFillZerobss+0x16>)
 8001106:	2300      	movs	r3, #0
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:
 800110a:	58d4      	ldr	r4, [r2, r3]
 800110c:	50c4      	str	r4, [r0, r3]
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:
 8001110:	18c4      	adds	r4, r0, r3
 8001112:	428c      	cmp	r4, r1
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <LoopFillZerobss+0x1a>)
 8001118:	4c09      	ldr	r4, [pc, #36]	@ (8001140 <LoopFillZerobss+0x1e>)
 800111a:	2300      	movs	r3, #0
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:
 8001122:	42a2      	cmp	r2, r4
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>
 8001126:	f001 fadd 	bl	80026e4 <__libc_init_array>
 800112a:	f7ff fc8f 	bl	8000a4c <main>
 800112e:	4770      	bx	lr
 8001130:	20000000 	.word	0x20000000
 8001134:	20000098 	.word	0x20000098
 8001138:	08003614 	.word	0x08003614
 800113c:	20000098 	.word	0x20000098
 8001140:	20000538 	.word	0x20000538

08001144 <ADC1_IRQHandler>:
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_InitTick+0x40>)
{
 800114c:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	b90a      	cbnz	r2, 8001156 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001152:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001154:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	fbb3 f3f2 	udiv	r3, r3, r2
 800115e:	4a0b      	ldr	r2, [pc, #44]	@ (800118c <HAL_InitTick+0x44>)
 8001160:	6810      	ldr	r0, [r2, #0]
 8001162:	fbb0 f0f3 	udiv	r0, r0, r3
 8001166:	f000 f9fb 	bl	8001560 <HAL_SYSTICK_Config>
 800116a:	4604      	mov	r4, r0
 800116c:	2800      	cmp	r0, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001170:	2d0f      	cmp	r5, #15
 8001172:	d8ee      	bhi.n	8001152 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	4602      	mov	r2, r0
 8001176:	4629      	mov	r1, r5
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f9c0 	bl	8001500 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_InitTick+0x48>)
 8001182:	4620      	mov	r0, r4
 8001184:	601d      	str	r5, [r3, #0]
  return status;
 8001186:	e7e5      	b.n	8001154 <HAL_InitTick+0xc>
 8001188:	20000040 	.word	0x20000040
 800118c:	2000003c 	.word	0x2000003c
 8001190:	20000044 	.word	0x20000044

08001194 <HAL_Init>:
{
 8001194:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f9a0 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119c:	200f      	movs	r0, #15
 800119e:	f7ff ffd3 	bl	8001148 <HAL_InitTick>
 80011a2:	4604      	mov	r4, r0
 80011a4:	b918      	cbnz	r0, 80011ae <HAL_Init+0x1a>
    HAL_MspInit();
 80011a6:	f7ff fd23 	bl	8000bf0 <HAL_MspInit>
}
 80011aa:	4620      	mov	r0, r4
 80011ac:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80011ae:	2401      	movs	r4, #1
 80011b0:	e7fb      	b.n	80011aa <HAL_Init+0x16>
	...

080011b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011b4:	4a03      	ldr	r2, [pc, #12]	@ (80011c4 <HAL_IncTick+0x10>)
 80011b6:	4904      	ldr	r1, [pc, #16]	@ (80011c8 <HAL_IncTick+0x14>)
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	6809      	ldr	r1, [r1, #0]
 80011bc:	440b      	add	r3, r1
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200003ec 	.word	0x200003ec
 80011c8:	20000040 	.word	0x20000040

080011cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011cc:	4b01      	ldr	r3, [pc, #4]	@ (80011d4 <HAL_GetTick+0x8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200003ec 	.word	0x200003ec

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fff6 	bl	80011cc <HAL_GetTick>
 80011e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011e4:	bf1e      	ittt	ne
 80011e6:	4b04      	ldrne	r3, [pc, #16]	@ (80011f8 <HAL_Delay+0x20>)
 80011e8:	681b      	ldrne	r3, [r3, #0]
 80011ea:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	1b43      	subs	r3, r0, r5
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	d3fa      	bcc.n	80011ec <HAL_Delay+0x14>
  {
  }
}
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
 80011f8:	20000040 	.word	0x20000040

080011fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011fe:	4604      	mov	r4, r0
 8001200:	2800      	cmp	r0, #0
 8001202:	f000 80b4 	beq.w	800136e <HAL_ADC_Init+0x172>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001206:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001208:	b973      	cbnz	r3, 8001228 <HAL_ADC_Init+0x2c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800120a:	6503      	str	r3, [r0, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800120c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	4b58      	ldr	r3, [pc, #352]	@ (8001374 <HAL_ADC_Init+0x178>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	f042 0201 	orr.w	r2, r2, #1
 8001218:	621a      	str	r2, [r3, #32]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9b01      	ldr	r3, [sp, #4]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001224:	f7ff f95a 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800122a:	06d9      	lsls	r1, r3, #27
 800122c:	f100 809f 	bmi.w	800136e <HAL_ADC_Init+0x172>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001230:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001232:	4a51      	ldr	r2, [pc, #324]	@ (8001378 <HAL_ADC_Init+0x17c>)
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64e3      	str	r3, [r4, #76]	@ 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001242:	6853      	ldr	r3, [r2, #4]
 8001244:	6861      	ldr	r1, [r4, #4]
 8001246:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800124a:	430b      	orrs	r3, r1
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001250:	6053      	str	r3, [r2, #4]
 8001252:	fa90 f0a0 	rbit	r0, r0
 8001256:	2202      	movs	r2, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001258:	fab0 f080 	clz	r0, r0
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800125c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	fab2 f282 	clz	r2, r2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001268:	6965      	ldr	r5, [r4, #20]
 800126a:	68e3      	ldr	r3, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001270:	432b      	orrs	r3, r5
 8001272:	6a25      	ldr	r5, [r4, #32]
 8001274:	432b      	orrs	r3, r5
 8001276:	f894 503c 	ldrb.w	r5, [r4, #60]	@ 0x3c
 800127a:	fa05 f000 	lsl.w	r0, r5, r0
 800127e:	4303      	orrs	r3, r0
                hadc->Init.ChannelsBank                                        |
 8001280:	4313      	orrs	r3, r2
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001284:	6925      	ldr	r5, [r4, #16]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001286:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001288:	bf1c      	itt	ne
 800128a:	6ba0      	ldrne	r0, [r4, #56]	@ 0x38
 800128c:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800128e:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001290:	bf18      	it	ne
 8001292:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	0652      	lsls	r2, r2, #25
 8001298:	d427      	bmi.n	80012ea <HAL_ADC_Init+0xee>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800129a:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800129c:	69e6      	ldr	r6, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800129e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80012a0:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80012a2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80012a6:	ea42 0206 	orr.w	r2, r2, r6
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80012aa:	d047      	beq.n	800133c <HAL_ADC_Init+0x140>
 80012ac:	f105 3cff 	add.w	ip, r5, #4294967295
 80012b0:	f1dc 0600 	rsbs	r6, ip, #0
 80012b4:	eb46 060c 	adc.w	r6, r6, ip
 80012b8:	0236      	lsls	r6, r6, #8
                  hadc->Init.LowPowerAutoPowerOff           |
 80012ba:	4332      	orrs	r2, r6
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
 80012c0:	2e01      	cmp	r6, #1
 80012c2:	d10d      	bne.n	80012e0 <HAL_ADC_Init+0xe4>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c4:	2900      	cmp	r1, #0
 80012c6:	d13b      	bne.n	8001340 <HAL_ADC_Init+0x144>
 80012c8:	f44f 4660 	mov.w	r6, #57344	@ 0xe000
 80012cc:	fa96 f6a6 	rbit	r6, r6
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012d0:	fab6 f686 	clz	r6, r6
 80012d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80012d6:	3901      	subs	r1, #1
 80012d8:	40b1      	lsls	r1, r6
 80012da:	4311      	orrs	r1, r2
 80012dc:	f441 6200 	orr.w	r2, r1, #2048	@ 0x800
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80012e0:	6846      	ldr	r6, [r0, #4]
 80012e2:	4926      	ldr	r1, [pc, #152]	@ (800137c <HAL_ADC_Init+0x180>)
 80012e4:	4031      	ands	r1, r6
 80012e6:	4311      	orrs	r1, r2
 80012e8:	6041      	str	r1, [r0, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80012ea:	6881      	ldr	r1, [r0, #8]
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <HAL_ADC_Init+0x184>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012ee:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80012f2:	ea02 0201 	and.w	r2, r2, r1
 80012f6:	ea42 0203 	orr.w	r2, r2, r3
 80012fa:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012fc:	d001      	beq.n	8001302 <HAL_ADC_Init+0x106>
 80012fe:	2d01      	cmp	r5, #1
 8001300:	d127      	bne.n	8001352 <HAL_ADC_Init+0x156>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001302:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8001304:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8001308:	fa91 f1a1 	rbit	r1, r1
 800130c:	fab1 f181 	clz	r1, r1
 8001310:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001312:	3a01      	subs	r2, #1
 8001314:	408a      	lsls	r2, r1
 8001316:	f025 71f8 	bic.w	r1, r5, #32505856	@ 0x1f00000
 800131a:	430a      	orrs	r2, r1
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800131c:	6302      	str	r2, [r0, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800131e:	6881      	ldr	r1, [r0, #8]
 8001320:	4a18      	ldr	r2, [pc, #96]	@ (8001384 <HAL_ADC_Init+0x188>)
 8001322:	400a      	ands	r2, r1
 8001324:	429a      	cmp	r2, r3
 8001326:	d118      	bne.n	800135a <HAL_ADC_Init+0x15e>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001328:	2000      	movs	r0, #0
 800132a:	6520      	str	r0, [r4, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800132c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800132e:	f023 0303 	bic.w	r3, r3, #3
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	64e3      	str	r3, [r4, #76]	@ 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001338:	b002      	add	sp, #8
 800133a:	bd70      	pop	{r4, r5, r6, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800133c:	462e      	mov	r6, r5
 800133e:	e7bc      	b.n	80012ba <HAL_ADC_Init+0xbe>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001340:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001342:	f041 0120 	orr.w	r1, r1, #32
 8001346:	64e1      	str	r1, [r4, #76]	@ 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001348:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800134a:	f041 0101 	orr.w	r1, r1, #1
 800134e:	6521      	str	r1, [r4, #80]	@ 0x50
 8001350:	e7c6      	b.n	80012e0 <HAL_ADC_Init+0xe4>
      MODIFY_REG(hadc->Instance->SQR1,
 8001352:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8001354:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001358:	e7e0      	b.n	800131c <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800135a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800135c:	f023 0312 	bic.w	r3, r3, #18
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	64e3      	str	r3, [r4, #76]	@ 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001366:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
 8001370:	e7e2      	b.n	8001338 <HAL_ADC_Init+0x13c>
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40012700 	.word	0x40012700
 800137c:	fcfc16ff 	.word	0xfcfc16ff
 8001380:	c0fff189 	.word	0xc0fff189
 8001384:	bf80fffe 	.word	0xbf80fffe

08001388 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8001388:	2300      	movs	r3, #0
{
 800138a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800138c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
{
 8001392:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001394:	2b01      	cmp	r3, #1
 8001396:	f000 8098 	beq.w	80014ca <HAL_ADC_ConfigChannel+0x142>
 800139a:	2301      	movs	r3, #1
 800139c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013a0:	6848      	ldr	r0, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80013a2:	682a      	ldr	r2, [r5, #0]
  if (sConfig->Rank < 7)
 80013a4:	2806      	cmp	r0, #6
    MODIFY_REG(hadc->Instance->SQR5,
 80013a6:	680c      	ldr	r4, [r1, #0]
 80013a8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  if (sConfig->Rank < 7)
 80013ac:	d81c      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0x60>
    MODIFY_REG(hadc->Instance->SQR5,
 80013ae:	261f      	movs	r6, #31
 80013b0:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 80013b2:	3b05      	subs	r3, #5
 80013b4:	409e      	lsls	r6, r3
 80013b6:	ea20 0006 	bic.w	r0, r0, r6
 80013ba:	fa04 f303 	lsl.w	r3, r4, r3
 80013be:	4303      	orrs	r3, r0
 80013c0:	6413      	str	r3, [r2, #64]	@ 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80013c2:	2c09      	cmp	r4, #9
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80013c4:	6889      	ldr	r1, [r1, #8]
 80013c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  if (sConfig->Channel < ADC_CHANNEL_10)
 80013ca:	d83f      	bhi.n	800144c <HAL_ADC_ConfigChannel+0xc4>
    MODIFY_REG(hadc->Instance->SMPR3,
 80013cc:	2407      	movs	r4, #7
 80013ce:	6950      	ldr	r0, [r2, #20]
 80013d0:	409c      	lsls	r4, r3
 80013d2:	ea20 0004 	bic.w	r0, r0, r4
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	4303      	orrs	r3, r0
 80013dc:	6153      	str	r3, [r2, #20]
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013de:	2000      	movs	r0, #0
 80013e0:	f885 0048 	strb.w	r0, [r5, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
}
 80013e4:	b002      	add	sp, #8
 80013e6:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 80013e8:	280c      	cmp	r0, #12
 80013ea:	d80a      	bhi.n	8001402 <HAL_ADC_ConfigChannel+0x7a>
    MODIFY_REG(hadc->Instance->SQR4,
 80013ec:	261f      	movs	r6, #31
 80013ee:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 80013f0:	3b23      	subs	r3, #35	@ 0x23
 80013f2:	409e      	lsls	r6, r3
 80013f4:	ea20 0006 	bic.w	r0, r0, r6
 80013f8:	fa04 f303 	lsl.w	r3, r4, r3
 80013fc:	4303      	orrs	r3, r0
 80013fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001400:	e7df      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8001402:	2812      	cmp	r0, #18
 8001404:	d80a      	bhi.n	800141c <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SQR3,
 8001406:	261f      	movs	r6, #31
 8001408:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 800140a:	3b41      	subs	r3, #65	@ 0x41
 800140c:	409e      	lsls	r6, r3
 800140e:	ea20 0006 	bic.w	r0, r0, r6
 8001412:	fa04 f303 	lsl.w	r3, r4, r3
 8001416:	4303      	orrs	r3, r0
 8001418:	6393      	str	r3, [r2, #56]	@ 0x38
 800141a:	e7d2      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 800141c:	2818      	cmp	r0, #24
 800141e:	f04f 001f 	mov.w	r0, #31
 8001422:	d809      	bhi.n	8001438 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR2,
 8001424:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8001426:	3b5f      	subs	r3, #95	@ 0x5f
 8001428:	4098      	lsls	r0, r3
 800142a:	ea26 0000 	bic.w	r0, r6, r0
 800142e:	fa04 f303 	lsl.w	r3, r4, r3
 8001432:	4303      	orrs	r3, r0
 8001434:	6353      	str	r3, [r2, #52]	@ 0x34
 8001436:	e7c4      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8001438:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800143a:	3b7d      	subs	r3, #125	@ 0x7d
 800143c:	4098      	lsls	r0, r3
 800143e:	ea26 0000 	bic.w	r0, r6, r0
 8001442:	fa04 f303 	lsl.w	r3, r4, r3
 8001446:	4303      	orrs	r3, r0
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	e7ba      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800144c:	2c13      	cmp	r4, #19
 800144e:	d825      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR2,
 8001450:	2607      	movs	r6, #7
 8001452:	6910      	ldr	r0, [r2, #16]
 8001454:	3b1e      	subs	r3, #30
 8001456:	409e      	lsls	r6, r3
 8001458:	ea20 0006 	bic.w	r0, r0, r6
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4303      	orrs	r3, r0
 8001462:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001464:	f1a4 0310 	sub.w	r3, r4, #16
 8001468:	2b01      	cmp	r3, #1
 800146a:	d8b8      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x56>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_ADC_ConfigChannel+0x148>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	0212      	lsls	r2, r2, #8
 8001472:	d4b4      	bmi.n	80013de <HAL_ADC_ConfigChannel+0x56>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001474:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001476:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001478:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800147c:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147e:	d1ae      	bne.n	80013de <HAL_ADC_ConfigChannel+0x56>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <HAL_ADC_ConfigChannel+0x14c>)
 8001482:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <HAL_ADC_ConfigChannel+0x150>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fbb3 f3f2 	udiv	r3, r3, r2
 800148a:	220a      	movs	r2, #10
 800148c:	4353      	muls	r3, r2
            wait_loop_index--;
 800148e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001490:	9b01      	ldr	r3, [sp, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0a3      	beq.n	80013de <HAL_ADC_ConfigChannel+0x56>
            wait_loop_index--;
 8001496:	9b01      	ldr	r3, [sp, #4]
 8001498:	3b01      	subs	r3, #1
 800149a:	e7f8      	b.n	800148e <HAL_ADC_ConfigChannel+0x106>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800149c:	2c1d      	cmp	r4, #29
 800149e:	f04f 0007 	mov.w	r0, #7
 80014a2:	d809      	bhi.n	80014b8 <HAL_ADC_ConfigChannel+0x130>
    MODIFY_REG(hadc->Instance->SMPR1,
 80014a4:	68d4      	ldr	r4, [r2, #12]
 80014a6:	3b3c      	subs	r3, #60	@ 0x3c
 80014a8:	4098      	lsls	r0, r3
 80014aa:	ea24 0000 	bic.w	r0, r4, r0
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	4303      	orrs	r3, r0
 80014b4:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014b6:	e792      	b.n	80013de <HAL_ADC_ConfigChannel+0x56>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80014b8:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
 80014ba:	3b5a      	subs	r3, #90	@ 0x5a
 80014bc:	4098      	lsls	r0, r3
 80014be:	ea24 0000 	bic.w	r0, r4, r0
 80014c2:	4099      	lsls	r1, r3
 80014c4:	4301      	orrs	r1, r0
 80014c6:	65d1      	str	r1, [r2, #92]	@ 0x5c
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014c8:	e789      	b.n	80013de <HAL_ADC_ConfigChannel+0x56>
  __HAL_LOCK(hadc);
 80014ca:	2002      	movs	r0, #2
 80014cc:	e78a      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x5c>
 80014ce:	bf00      	nop
 80014d0:	40012700 	.word	0x40012700
 80014d4:	2000003c 	.word	0x2000003c
 80014d8:	000f4240 	.word	0x000f4240

080014dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4907      	ldr	r1, [pc, #28]	@ (80014fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014de:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80014ea:	0412      	lsls	r2, r2, #16
 80014ec:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80014f8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001502:	b530      	push	{r4, r5, lr}
 8001504:	68dc      	ldr	r4, [r3, #12]
 8001506:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	2b04      	cmp	r3, #4
 8001512:	bf28      	it	cs
 8001514:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151c:	bf94      	ite	ls
 800151e:	2400      	movls	r4, #0
 8001520:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001522:	fa05 f303 	lsl.w	r3, r5, r3
 8001526:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152a:	40a5      	lsls	r5, r4
 800152c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001532:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	bfac      	ite	ge
 800153a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	4a07      	ldrlt	r2, [pc, #28]	@ (800155c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001544:	b2db      	uxtb	r3, r3
 8001546:	bfab      	itete	ge
 8001548:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001556:	bd30      	pop	{r4, r5, pc}
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	e000ed14 	.word	0xe000ed14

08001560 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	3801      	subs	r0, #1
 8001562:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001566:	d20b      	bcs.n	8001580 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	21f0      	movs	r1, #240	@ 0xf0
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001570:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001576:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001578:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001580:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001588:	2300      	movs	r3, #0
{
 800158a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8001720 <HAL_GPIO_Init+0x198>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4c64      	ldr	r4, [pc, #400]	@ (8001724 <HAL_GPIO_Init+0x19c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001594:	680a      	ldr	r2, [r1, #0]
 8001596:	fa32 f503 	lsrs.w	r5, r2, r3
 800159a:	d102      	bne.n	80015a2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 800159c:	b003      	add	sp, #12
 800159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015a2:	2501      	movs	r5, #1
 80015a4:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent)
 80015a8:	ea18 0202 	ands.w	r2, r8, r2
 80015ac:	f000 80a9 	beq.w	8001702 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015b0:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b2:	684e      	ldr	r6, [r1, #4]
 80015b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80015b8:	f006 0503 	and.w	r5, r6, #3
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015bc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c0:	1e6f      	subs	r7, r5, #1
 80015c2:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015c4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015c8:	d834      	bhi.n	8001634 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80015ca:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015cc:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80015d0:	68cf      	ldr	r7, [r1, #12]
 80015d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80015d6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80015da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80015dc:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80015de:	ea27 0808 	bic.w	r8, r7, r8
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e2:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80015e6:	409f      	lsls	r7, r3
 80015e8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80015ec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80015ee:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80015f2:	ea07 080c 	and.w	r8, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80015f6:	688f      	ldr	r7, [r1, #8]
 80015f8:	fa07 f70e 	lsl.w	r7, r7, lr
 80015fc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001600:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	d119      	bne.n	8001638 <HAL_GPIO_Init+0xb0>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001604:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3];
 8001608:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800160c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001610:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001614:	f8d8 7020 	ldr.w	r7, [r8, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001618:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800161c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001620:	ea27 0b0b 	bic.w	fp, r7, fp
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001624:	690f      	ldr	r7, [r1, #16]
 8001626:	fa07 f70a 	lsl.w	r7, r7, sl
 800162a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800162e:	f8c8 7020 	str.w	r7, [r8, #32]
 8001632:	e001      	b.n	8001638 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	2d03      	cmp	r5, #3
 8001636:	d1da      	bne.n	80015ee <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8001638:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800163a:	fa05 f50e 	lsl.w	r5, r5, lr
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800163e:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001642:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001644:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001648:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164a:	d05a      	beq.n	8001702 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800164c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001654:	f023 0703 	bic.w	r7, r3, #3
 8001658:	f045 0501 	orr.w	r5, r5, #1
 800165c:	f8c9 5020 	str.w	r5, [r9, #32]
 8001660:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001664:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001668:	f005 0501 	and.w	r5, r5, #1
 800166c:	9501      	str	r5, [sp, #4]
 800166e:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001672:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001678:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 800167c:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800167e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001682:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001686:	4d28      	ldr	r5, [pc, #160]	@ (8001728 <HAL_GPIO_Init+0x1a0>)
 8001688:	42a8      	cmp	r0, r5
 800168a:	d03c      	beq.n	8001706 <HAL_GPIO_Init+0x17e>
 800168c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001690:	42a8      	cmp	r0, r5
 8001692:	d03a      	beq.n	800170a <HAL_GPIO_Init+0x182>
 8001694:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001698:	42a8      	cmp	r0, r5
 800169a:	d038      	beq.n	800170e <HAL_GPIO_Init+0x186>
 800169c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80016a0:	42a8      	cmp	r0, r5
 80016a2:	d036      	beq.n	8001712 <HAL_GPIO_Init+0x18a>
 80016a4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80016a8:	42a8      	cmp	r0, r5
 80016aa:	d034      	beq.n	8001716 <HAL_GPIO_Init+0x18e>
 80016ac:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80016b0:	42a8      	cmp	r0, r5
 80016b2:	d032      	beq.n	800171a <HAL_GPIO_Init+0x192>
 80016b4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80016b8:	42a8      	cmp	r0, r5
 80016ba:	bf14      	ite	ne
 80016bc:	2507      	movne	r5, #7
 80016be:	2506      	moveq	r5, #6
 80016c0:	fa05 f50c 	lsl.w	r5, r5, ip
 80016c4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80016c8:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016ca:	43d7      	mvns	r7, r2
        temp = EXTI->RTSR;
 80016cc:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ce:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016d2:	bf0c      	ite	eq
 80016d4:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 80016d6:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80016d8:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80016da:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016dc:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016e0:	bf0c      	ite	eq
 80016e2:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 80016e4:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80016e6:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80016e8:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ea:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016ee:	bf0c      	ite	eq
 80016f0:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 80016f2:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80016f4:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80016f6:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	03f6      	lsls	r6, r6, #15
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016fa:	bf54      	ite	pl
 80016fc:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 80016fe:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8001700:	6025      	str	r5, [r4, #0]
    position++;
 8001702:	3301      	adds	r3, #1
 8001704:	e746      	b.n	8001594 <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001706:	2500      	movs	r5, #0
 8001708:	e7da      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 800170a:	2501      	movs	r5, #1
 800170c:	e7d8      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 800170e:	2502      	movs	r5, #2
 8001710:	e7d6      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 8001712:	2503      	movs	r5, #3
 8001714:	e7d4      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 8001716:	2504      	movs	r5, #4
 8001718:	e7d2      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 800171a:	2505      	movs	r5, #5
 800171c:	e7d0      	b.n	80016c0 <HAL_GPIO_Init+0x138>
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40010400 	.word	0x40010400
 8001728:	40020000 	.word	0x40020000

0800172c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800172c:	b10a      	cbz	r2, 8001732 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800172e:	6181      	str	r1, [r0, #24]
  }
}
 8001730:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001732:	0409      	lsls	r1, r1, #16
 8001734:	e7fb      	b.n	800172e <HAL_GPIO_WritePin+0x2>
	...

08001738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001738:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173a:	4604      	mov	r4, r0
 800173c:	b908      	cbnz	r0, 8001742 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001740:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001746:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800174a:	b91b      	cbnz	r3, 8001754 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800174c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001750:	f7fe ff80 	bl	8000654 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001754:	2324      	movs	r3, #36	@ 0x24
 8001756:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800176a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001772:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001774:	f000 fbd0 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001778:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <HAL_I2C_Init+0x140>)
 800177a:	6865      	ldr	r5, [r4, #4]
 800177c:	429d      	cmp	r5, r3
 800177e:	bf94      	ite	ls
 8001780:	4b3e      	ldrls	r3, [pc, #248]	@ (800187c <HAL_I2C_Init+0x144>)
 8001782:	4b3f      	ldrhi	r3, [pc, #252]	@ (8001880 <HAL_I2C_Init+0x148>)
 8001784:	4298      	cmp	r0, r3
 8001786:	bf8c      	ite	hi
 8001788:	2300      	movhi	r3, #0
 800178a:	2301      	movls	r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1d6      	bne.n	800173e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001790:	4e39      	ldr	r6, [pc, #228]	@ (8001878 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001792:	4b3c      	ldr	r3, [pc, #240]	@ (8001884 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001794:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	bf88      	it	hi
 800179c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	6851      	ldr	r1, [r2, #4]
 80017a4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80017a8:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ac:	bf82      	ittt	hi
 80017ae:	4373      	mulhi	r3, r6
 80017b0:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80017b4:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ba:	6a11      	ldr	r1, [r2, #32]
 80017bc:	3301      	adds	r3, #1
 80017be:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c6:	69d1      	ldr	r1, [r2, #28]
 80017c8:	1e43      	subs	r3, r0, #1
 80017ca:	482b      	ldr	r0, [pc, #172]	@ (8001878 <HAL_I2C_Init+0x140>)
 80017cc:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80017d0:	4285      	cmp	r5, r0
 80017d2:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80017d6:	d832      	bhi.n	800183e <HAL_I2C_Init+0x106>
 80017d8:	006d      	lsls	r5, r5, #1
 80017da:	fbb3 f3f5 	udiv	r3, r3, r5
 80017de:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80017e2:	3301      	adds	r3, #1
 80017e4:	4203      	tst	r3, r0
 80017e6:	d042      	beq.n	800186e <HAL_I2C_Init+0x136>
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	4319      	orrs	r1, r3
 80017ee:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f0:	6811      	ldr	r1, [r2, #0]
 80017f2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80017f6:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80017fa:	4303      	orrs	r3, r0
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001800:	6891      	ldr	r1, [r2, #8]
 8001802:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001806:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800180a:	4303      	orrs	r3, r0
 800180c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001814:	68d1      	ldr	r1, [r2, #12]
 8001816:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800181a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800181e:	4303      	orrs	r3, r0
 8001820:	430b      	orrs	r3, r1
 8001822:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001824:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001826:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800182e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001830:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001832:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001836:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 800183c:	e780      	b.n	8001740 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800183e:	68a0      	ldr	r0, [r4, #8]
 8001840:	b950      	cbnz	r0, 8001858 <HAL_I2C_Init+0x120>
 8001842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001846:	fbb3 f3f5 	udiv	r3, r3, r5
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	b17b      	cbz	r3, 8001872 <HAL_I2C_Init+0x13a>
 8001852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001856:	e7c9      	b.n	80017ec <HAL_I2C_Init+0xb4>
 8001858:	2019      	movs	r0, #25
 800185a:	4368      	muls	r0, r5
 800185c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001860:	3301      	adds	r3, #1
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001866:	b123      	cbz	r3, 8001872 <HAL_I2C_Init+0x13a>
 8001868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800186c:	e7be      	b.n	80017ec <HAL_I2C_Init+0xb4>
 800186e:	2304      	movs	r3, #4
 8001870:	e7bc      	b.n	80017ec <HAL_I2C_Init+0xb4>
 8001872:	2301      	movs	r3, #1
 8001874:	e7ba      	b.n	80017ec <HAL_I2C_Init+0xb4>
 8001876:	bf00      	nop
 8001878:	000186a0 	.word	0x000186a0
 800187c:	001e847f 	.word	0x001e847f
 8001880:	003d08ff 	.word	0x003d08ff
 8001884:	000f4240 	.word	0x000f4240

08001888 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001888:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800188a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8001892:	d00c      	beq.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001894:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001896:	491a      	ldr	r1, [pc, #104]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001898:	680b      	ldr	r3, [r1, #0]
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018a2:	6808      	ldr	r0, [r1, #0]
 80018a4:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80018a8:	4050      	eors	r0, r2
 80018aa:	b002      	add	sp, #8
 80018ac:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018b0:	4914      	ldr	r1, [pc, #80]	@ (8001904 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80018b2:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 80018b6:	d00f      	beq.n	80018d8 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018b8:	680a      	ldr	r2, [r1, #0]
 80018ba:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80018be:	f5b2 5fc0 	cmp.w	r2, #6144	@ 0x1800
 80018c2:	d1e7      	bne.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80018c4:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 80018c8:	d1e4      	bne.n	8001894 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80018ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80018d4:	2201      	movs	r2, #1
 80018d6:	e7de      	b.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24
 80018e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018e2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80018e6:	9201      	str	r2, [sp, #4]
 80018e8:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018ea:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80018ee:	f402 52c0 	and.w	r2, r2, #6144	@ 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	f021 5180 	bic.w	r1, r1, #268435456	@ 0x10000000
 80018f6:	6259      	str	r1, [r3, #36]	@ 0x24
 80018f8:	e7e1      	b.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x36>
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40023c00 	.word	0x40023c00
 8001904:	40007000 	.word	0x40007000

08001908 <HAL_RCC_OscConfig>:
{
 8001908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800190c:	4604      	mov	r4, r0
 800190e:	2800      	cmp	r0, #0
 8001910:	d05f      	beq.n	80019d2 <HAL_RCC_OscConfig+0xca>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001912:	4b9a      	ldr	r3, [pc, #616]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001914:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001918:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191c:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	f407 3780 	and.w	r7, r7, #65536	@ 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	d44a      	bmi.n	80019bc <HAL_RCC_OscConfig+0xb4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	0799      	lsls	r1, r3, #30
 800192a:	f100 8093 	bmi.w	8001a54 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	06d8      	lsls	r0, r3, #27
 8001932:	d535      	bpl.n	80019a0 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001934:	2e00      	cmp	r6, #0
 8001936:	f040 80dd 	bne.w	8001af4 <HAL_RCC_OscConfig+0x1ec>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800193a:	4f90      	ldr	r7, [pc, #576]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	0599      	lsls	r1, r3, #22
 8001940:	d502      	bpl.n	8001948 <HAL_RCC_OscConfig+0x40>
 8001942:	69a3      	ldr	r3, [r4, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d044      	beq.n	80019d2 <HAL_RCC_OscConfig+0xca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a25      	ldr	r5, [r4, #32]
 800194c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001950:	429d      	cmp	r5, r3
 8001952:	f240 80bc 	bls.w	8001ace <HAL_RCC_OscConfig+0x1c6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001956:	4628      	mov	r0, r5
 8001958:	f7ff ff96 	bl	8001888 <RCC_SetFlashLatencyFromMSIRange>
 800195c:	2800      	cmp	r0, #0
 800195e:	d138      	bne.n	80019d2 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001966:	432b      	orrs	r3, r5
 8001968:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69e2      	ldr	r2, [r4, #28]
 800196e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001972:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001976:	607b      	str	r3, [r7, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001978:	4b80      	ldr	r3, [pc, #512]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 800197a:	4981      	ldr	r1, [pc, #516]	@ (8001b80 <HAL_RCC_OscConfig+0x278>)
 800197c:	689a      	ldr	r2, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800197e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001982:	0b6d      	lsrs	r5, r5, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001984:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001988:	5c8a      	ldrb	r2, [r1, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800198a:	3501      	adds	r5, #1
 800198c:	40ab      	lsls	r3, r5
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800198e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001990:	4a7c      	ldr	r2, [pc, #496]	@ (8001b84 <HAL_RCC_OscConfig+0x27c>)
 8001992:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8001994:	4b7c      	ldr	r3, [pc, #496]	@ (8001b88 <HAL_RCC_OscConfig+0x280>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f7ff fbd6 	bl	8001148 <HAL_InitTick>
        if(status != HAL_OK)
 800199c:	2800      	cmp	r0, #0
 800199e:	d131      	bne.n	8001a04 <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	0718      	lsls	r0, r3, #28
 80019a4:	f100 80d5 	bmi.w	8001b52 <HAL_RCC_OscConfig+0x24a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	0759      	lsls	r1, r3, #29
 80019ac:	f100 8100 	bmi.w	8001bb0 <HAL_RCC_OscConfig+0x2a8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8168 	bne.w	8001c88 <HAL_RCC_OscConfig+0x380>
  return HAL_OK;
 80019b8:	2000      	movs	r0, #0
 80019ba:	e023      	b.n	8001a04 <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	2e08      	cmp	r6, #8
 80019be:	d002      	beq.n	80019c6 <HAL_RCC_OscConfig+0xbe>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c0:	2e0c      	cmp	r6, #12
 80019c2:	d108      	bne.n	80019d6 <HAL_RCC_OscConfig+0xce>
 80019c4:	b13f      	cbz	r7, 80019d6 <HAL_RCC_OscConfig+0xce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	039a      	lsls	r2, r3, #14
 80019ca:	d5ac      	bpl.n	8001926 <HAL_RCC_OscConfig+0x1e>
 80019cc:	6863      	ldr	r3, [r4, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1a9      	bne.n	8001926 <HAL_RCC_OscConfig+0x1e>
    return HAL_ERROR;
 80019d2:	2001      	movs	r0, #1
 80019d4:	e016      	b.n	8001a04 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d6:	6863      	ldr	r3, [r4, #4]
 80019d8:	4d68      	ldr	r5, [pc, #416]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_OscConfig+0x102>
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019e6:	f7ff fbf1 	bl	80011cc <HAL_GetTick>
 80019ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ec:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001b7c <HAL_RCC_OscConfig+0x274>
 80019f0:	f8d8 3000 	ldr.w	r3, [r8]
 80019f4:	039b      	lsls	r3, r3, #14
 80019f6:	d496      	bmi.n	8001926 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fbe8 	bl	80011cc <HAL_GetTick>
 80019fc:	1b40      	subs	r0, r0, r5
 80019fe:	2864      	cmp	r0, #100	@ 0x64
 8001a00:	d9f6      	bls.n	80019f0 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8001a02:	2003      	movs	r0, #3
}
 8001a04:	b003      	add	sp, #12
 8001a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	b9ab      	cbnz	r3, 8001a38 <HAL_RCC_OscConfig+0x130>
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fbd6 	bl	80011cc <HAL_GetTick>
 8001a20:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	0398      	lsls	r0, r3, #14
 8001a26:	f57f af7e 	bpl.w	8001926 <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fbcf 	bl	80011cc <HAL_GetTick>
 8001a2e:	eba0 0008 	sub.w	r0, r0, r8
 8001a32:	2864      	cmp	r0, #100	@ 0x64
 8001a34:	d9f5      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11a>
 8001a36:	e7e4      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	d103      	bne.n	8001a46 <HAL_RCC_OscConfig+0x13e>
 8001a3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a42:	602b      	str	r3, [r5, #0]
 8001a44:	e7cb      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4a:	602b      	str	r3, [r5, #0]
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a52:	e7c7      	b.n	80019e4 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a54:	2e04      	cmp	r6, #4
 8001a56:	d002      	beq.n	8001a5e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a58:	2e0c      	cmp	r6, #12
 8001a5a:	d10f      	bne.n	8001a7c <HAL_RCC_OscConfig+0x174>
 8001a5c:	b977      	cbnz	r7, 8001a7c <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4a47      	ldr	r2, [pc, #284]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001a60:	6813      	ldr	r3, [r2, #0]
 8001a62:	0799      	lsls	r1, r3, #30
 8001a64:	d502      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x164>
 8001a66:	68e3      	ldr	r3, [r4, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d1b2      	bne.n	80019d2 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	6853      	ldr	r3, [r2, #4]
 8001a6e:	6921      	ldr	r1, [r4, #16]
 8001a70:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001a74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a78:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	e758      	b.n	800192e <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7c:	68e2      	ldr	r2, [r4, #12]
 8001a7e:	4b43      	ldr	r3, [pc, #268]	@ (8001b8c <HAL_RCC_OscConfig+0x284>)
 8001a80:	b1b2      	cbz	r2, 8001ab0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a86:	f7ff fba1 	bl	80011cc <HAL_GetTick>
 8001a8a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8c:	4d3b      	ldr	r5, [pc, #236]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	079a      	lsls	r2, r3, #30
 8001a92:	d507      	bpl.n	8001aa4 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	686b      	ldr	r3, [r5, #4]
 8001a96:	6922      	ldr	r2, [r4, #16]
 8001a98:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001aa0:	606b      	str	r3, [r5, #4]
 8001aa2:	e744      	b.n	800192e <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fb92 	bl	80011cc <HAL_GetTick>
 8001aa8:	1bc0      	subs	r0, r0, r7
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9ef      	bls.n	8001a8e <HAL_RCC_OscConfig+0x186>
 8001aae:	e7a8      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8001ab0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fb8b 	bl	80011cc <HAL_GetTick>
 8001ab6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ab8:	4f30      	ldr	r7, [pc, #192]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	f57f af36 	bpl.w	800192e <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fb83 	bl	80011cc <HAL_GetTick>
 8001ac6:	1b40      	subs	r0, r0, r5
 8001ac8:	2802      	cmp	r0, #2
 8001aca:	d9f6      	bls.n	8001aba <HAL_RCC_OscConfig+0x1b2>
 8001acc:	e799      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ace:	687b      	ldr	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad0:	4628      	mov	r0, r5
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001ad6:	432b      	orrs	r3, r5
 8001ad8:	607b      	str	r3, [r7, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69e2      	ldr	r2, [r4, #28]
 8001ade:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ae2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ae6:	607b      	str	r3, [r7, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae8:	f7ff fece 	bl	8001888 <RCC_SetFlashLatencyFromMSIRange>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f43f af43 	beq.w	8001978 <HAL_RCC_OscConfig+0x70>
 8001af2:	e76e      	b.n	80019d2 <HAL_RCC_OscConfig+0xca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af4:	69a2      	ldr	r2, [r4, #24]
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_RCC_OscConfig+0x284>)
 8001af8:	b1e2      	cbz	r2, 8001b34 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_ENABLE();
 8001afa:	2201      	movs	r2, #1
 8001afc:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb65 	bl	80011cc <HAL_GetTick>
 8001b02:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b04:	4d1d      	ldr	r5, [pc, #116]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	059a      	lsls	r2, r3, #22
 8001b0a:	d50d      	bpl.n	8001b28 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0c:	686b      	ldr	r3, [r5, #4]
 8001b0e:	6a22      	ldr	r2, [r4, #32]
 8001b10:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001b14:	4313      	orrs	r3, r2
 8001b16:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b18:	686b      	ldr	r3, [r5, #4]
 8001b1a:	69e2      	ldr	r2, [r4, #28]
 8001b1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b24:	606b      	str	r3, [r5, #4]
 8001b26:	e73b      	b.n	80019a0 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b28:	f7ff fb50 	bl	80011cc <HAL_GetTick>
 8001b2c:	1bc0      	subs	r0, r0, r7
 8001b2e:	2802      	cmp	r0, #2
 8001b30:	d9e9      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1fe>
 8001b32:	e766      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8001b34:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb49 	bl	80011cc <HAL_GetTick>
 8001b3a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b3c:	4f0f      	ldr	r7, [pc, #60]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	059b      	lsls	r3, r3, #22
 8001b42:	f57f af2d 	bpl.w	80019a0 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b46:	f7ff fb41 	bl	80011cc <HAL_GetTick>
 8001b4a:	1b40      	subs	r0, r0, r5
 8001b4c:	2802      	cmp	r0, #2
 8001b4e:	d9f6      	bls.n	8001b3e <HAL_RCC_OscConfig+0x236>
 8001b50:	e757      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	6962      	ldr	r2, [r4, #20]
 8001b54:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_RCC_OscConfig+0x284>)
 8001b56:	b1da      	cbz	r2, 8001b90 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fb35 	bl	80011cc <HAL_GetTick>
 8001b62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b64:	4f05      	ldr	r7, [pc, #20]	@ (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b68:	079a      	lsls	r2, r3, #30
 8001b6a:	f53f af1d 	bmi.w	80019a8 <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fb2d 	bl	80011cc <HAL_GetTick>
 8001b72:	1b40      	subs	r0, r0, r5
 8001b74:	2802      	cmp	r0, #2
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x25e>
 8001b78:	e743      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080035b8 	.word	0x080035b8
 8001b84:	2000003c 	.word	0x2000003c
 8001b88:	20000044 	.word	0x20000044
 8001b8c:	42470000 	.word	0x42470000
      __HAL_RCC_LSI_DISABLE();
 8001b90:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
      tickstart = HAL_GetTick();
 8001b94:	f7ff fb1a 	bl	80011cc <HAL_GetTick>
 8001b98:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b9a:	4f66      	ldr	r7, [pc, #408]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9e:	079b      	lsls	r3, r3, #30
 8001ba0:	f57f af02 	bpl.w	80019a8 <HAL_RCC_OscConfig+0xa0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fb12 	bl	80011cc <HAL_GetTick>
 8001ba8:	1b40      	subs	r0, r0, r5
 8001baa:	2802      	cmp	r0, #2
 8001bac:	d9f6      	bls.n	8001b9c <HAL_RCC_OscConfig+0x294>
 8001bae:	e728      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb0:	4b60      	ldr	r3, [pc, #384]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001bb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb4:	00d0      	lsls	r0, r2, #3
 8001bb6:	d429      	bmi.n	8001c0c <HAL_RCC_OscConfig+0x304>
      pwrclkchanged = SET;
 8001bb8:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bbe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4d5a      	ldr	r5, [pc, #360]	@ (8001d38 <HAL_RCC_OscConfig+0x430>)
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	05d9      	lsls	r1, r3, #23
 8001bd4:	d51d      	bpl.n	8001c12 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd6:	68a3      	ldr	r3, [r4, #8]
 8001bd8:	4d56      	ldr	r5, [pc, #344]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d129      	bne.n	8001c32 <HAL_RCC_OscConfig+0x32a>
 8001bde:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001be6:	f7ff faf1 	bl	80011cc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bee:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf0:	4f50      	ldr	r7, [pc, #320]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf4:	059b      	lsls	r3, r3, #22
 8001bf6:	d541      	bpl.n	8001c7c <HAL_RCC_OscConfig+0x374>
    if(pwrclkchanged == SET)
 8001bf8:	f1b8 0f00 	cmp.w	r8, #0
 8001bfc:	f43f aed8 	beq.w	80019b0 <HAL_RCC_OscConfig+0xa8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4a4c      	ldr	r2, [pc, #304]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001c02:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c0a:	e6d1      	b.n	80019b0 <HAL_RCC_OscConfig+0xa8>
    FlagStatus       pwrclkchanged = RESET;
 8001c0c:	f04f 0800 	mov.w	r8, #0
 8001c10:	e7dd      	b.n	8001bce <HAL_RCC_OscConfig+0x2c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c12:	682b      	ldr	r3, [r5, #0]
 8001c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c18:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fad7 	bl	80011cc <HAL_GetTick>
 8001c1e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	05da      	lsls	r2, r3, #23
 8001c24:	d4d7      	bmi.n	8001bd6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff fad1 	bl	80011cc <HAL_GetTick>
 8001c2a:	1bc0      	subs	r0, r0, r7
 8001c2c:	2864      	cmp	r0, #100	@ 0x64
 8001c2e:	d9f7      	bls.n	8001c20 <HAL_RCC_OscConfig+0x318>
 8001c30:	e6e7      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c32:	b9ab      	cbnz	r3, 8001c60 <HAL_RCC_OscConfig+0x358>
 8001c34:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c3e:	636b      	str	r3, [r5, #52]	@ 0x34
 8001c40:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c46:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001c48:	f7ff fac0 	bl	80011cc <HAL_GetTick>
 8001c4c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c4e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c50:	0598      	lsls	r0, r3, #22
 8001c52:	d5d1      	bpl.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7ff faba 	bl	80011cc <HAL_GetTick>
 8001c58:	1bc0      	subs	r0, r0, r7
 8001c5a:	4548      	cmp	r0, r9
 8001c5c:	d9f7      	bls.n	8001c4e <HAL_RCC_OscConfig+0x346>
 8001c5e:	e6d0      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c64:	d103      	bne.n	8001c6e <HAL_RCC_OscConfig+0x366>
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6a:	636b      	str	r3, [r5, #52]	@ 0x34
 8001c6c:	e7b7      	b.n	8001bde <HAL_RCC_OscConfig+0x2d6>
 8001c6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c72:	636b      	str	r3, [r5, #52]	@ 0x34
 8001c74:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001c76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c7a:	e7b3      	b.n	8001be4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7ff faa6 	bl	80011cc <HAL_GetTick>
 8001c80:	1b40      	subs	r0, r0, r5
 8001c82:	4548      	cmp	r0, r9
 8001c84:	d9b5      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x2ea>
 8001c86:	e6bc      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	2e0c      	cmp	r6, #12
 8001c8a:	d03a      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_DISABLE();
 8001c92:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	d127      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3de>
        tickstart = HAL_GetTick();
 8001c96:	f7ff fa99 	bl	80011cc <HAL_GetTick>
 8001c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c9c:	4d25      	ldr	r5, [pc, #148]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	0199      	lsls	r1, r3, #6
 8001ca2:	d41a      	bmi.n	8001cda <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	68aa      	ldr	r2, [r5, #8]
 8001ca6:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	@ 0x28
 8001caa:	f422 027d 	bic.w	r2, r2, #16580608	@ 0xfd0000
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001cb4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001cb6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_RCC_OscConfig+0x434>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cbc:	4d1d      	ldr	r5, [pc, #116]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
        __HAL_RCC_PLL_ENABLE();
 8001cbe:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa84 	bl	80011cc <HAL_GetTick>
 8001cc4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	019a      	lsls	r2, r3, #6
 8001cca:	f53f ae75 	bmi.w	80019b8 <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa7d 	bl	80011cc <HAL_GetTick>
 8001cd2:	1b00      	subs	r0, r0, r4
 8001cd4:	2802      	cmp	r0, #2
 8001cd6:	d9f6      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3be>
 8001cd8:	e693      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fa77 	bl	80011cc <HAL_GetTick>
 8001cde:	1b80      	subs	r0, r0, r6
 8001ce0:	2802      	cmp	r0, #2
 8001ce2:	d9dc      	bls.n	8001c9e <HAL_RCC_OscConfig+0x396>
 8001ce4:	e68d      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fa71 	bl	80011cc <HAL_GetTick>
 8001cea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cec:	4d11      	ldr	r5, [pc, #68]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	f57f ae61 	bpl.w	80019b8 <HAL_RCC_OscConfig+0xb0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fa69 	bl	80011cc <HAL_GetTick>
 8001cfa:	1b00      	subs	r0, r0, r4
 8001cfc:	2802      	cmp	r0, #2
 8001cfe:	d9f6      	bls.n	8001cee <HAL_RCC_OscConfig+0x3e6>
 8001d00:	e67f      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	f43f ae65 	beq.w	80019d2 <HAL_RCC_OscConfig+0xca>
        pll_config = RCC->CFGR;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_RCC_OscConfig+0x42c>)
 8001d0a:	6898      	ldr	r0, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d0e:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001d12:	429a      	cmp	r2, r3
 8001d14:	f47f ae5d 	bne.w	80019d2 <HAL_RCC_OscConfig+0xca>
 8001d18:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d1a:	f400 1370 	and.w	r3, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f47f ae57 	bne.w	80019d2 <HAL_RCC_OscConfig+0xca>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d26:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d2a:	1ac0      	subs	r0, r0, r3
 8001d2c:	bf18      	it	ne
 8001d2e:	2001      	movne	r0, #1
 8001d30:	e668      	b.n	8001a04 <HAL_RCC_OscConfig+0xfc>
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42470000 	.word	0x42470000

08001d40 <HAL_RCC_GetSysClockFreq>:
{
 8001d40:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x48>)
 8001d44:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d46:	f002 010c 	and.w	r1, r2, #12
 8001d4a:	2908      	cmp	r1, #8
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x16>
 8001d4e:	290c      	cmp	r1, #12
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x1a>
 8001d52:	2904      	cmp	r1, #4
 8001d54:	d110      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x38>
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x4c>)
  return sysclockfreq;
 8001d58:	e00d      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x36>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5a:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x50>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5c:	689b      	ldr	r3, [r3, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d5e:	f3c2 4383 	ubfx	r3, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d62:	5cc9      	ldrb	r1, [r1, r3]
 8001d64:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <HAL_RCC_GetSysClockFreq+0x4c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d66:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	fba1 0100 	umull	r0, r1, r1, r0
 8001d70:	3201      	adds	r2, #1
 8001d72:	f7fe fa0b 	bl	800018c <__aeabi_uldivmod>
}
 8001d76:	bd08      	pop	{r3, pc}
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d82:	3301      	adds	r3, #1
 8001d84:	4098      	lsls	r0, r3
      break;
 8001d86:	e7f6      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x36>
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	080035c8 	.word	0x080035c8

08001d94 <HAL_RCC_ClockConfig>:
{
 8001d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d98:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b910      	cbnz	r0, 8001da4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
}
 8001da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_RCC_ClockConfig+0x170>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f002 0201 	and.w	r2, r2, #1
 8001dac:	428a      	cmp	r2, r1
 8001dae:	d32a      	bcc.n	8001e06 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	0796      	lsls	r6, r2, #30
 8001db4:	d438      	bmi.n	8001e28 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	07d0      	lsls	r0, r2, #31
 8001db8:	d43e      	bmi.n	8001e38 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dba:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <HAL_RCC_ClockConfig+0x170>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f002 0201 	and.w	r2, r2, #1
 8001dc2:	42aa      	cmp	r2, r5
 8001dc4:	f200 808c 	bhi.w	8001ee0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	6822      	ldr	r2, [r4, #0]
 8001dca:	0751      	lsls	r1, r2, #29
 8001dcc:	f100 8091 	bmi.w	8001ef2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	0713      	lsls	r3, r2, #28
 8001dd2:	d507      	bpl.n	8001de4 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
 8001dd6:	6921      	ldr	r1, [r4, #16]
 8001dd8:	6893      	ldr	r3, [r2, #8]
 8001dda:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001dde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001de2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de4:	f7ff ffac 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
}
 8001de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dec:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
 8001dee:	4a47      	ldr	r2, [pc, #284]	@ (8001f0c <HAL_RCC_ClockConfig+0x178>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	40d8      	lsrs	r0, r3
 8001dfa:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <HAL_RCC_ClockConfig+0x17c>)
 8001dfc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001dfe:	4b45      	ldr	r3, [pc, #276]	@ (8001f14 <HAL_RCC_ClockConfig+0x180>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	f7ff b9a1 	b.w	8001148 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	2901      	cmp	r1, #1
 8001e08:	bf02      	ittt	eq
 8001e0a:	681a      	ldreq	r2, [r3, #0]
 8001e0c:	f042 0204 	orreq.w	r2, r2, #4
 8001e10:	601a      	streq	r2, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	428b      	cmp	r3, r1
 8001e24:	d1bb      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xa>
 8001e26:	e7c3      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4937      	ldr	r1, [pc, #220]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
 8001e2a:	68a0      	ldr	r0, [r4, #8]
 8001e2c:	688b      	ldr	r3, [r1, #8]
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e32:	4303      	orrs	r3, r0
 8001e34:	608b      	str	r3, [r1, #8]
 8001e36:	e7be      	b.n	8001db6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e38:	6861      	ldr	r1, [r4, #4]
 8001e3a:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
 8001e3c:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e3e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e42:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e46:	d0aa      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e48:	689a      	ldr	r2, [r3, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	f022 0203 	bic.w	r2, r2, #3
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001e56:	f7ff f9b9 	bl	80011cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001e5c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	2b02      	cmp	r3, #2
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e60:	4f29      	ldr	r7, [pc, #164]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	d118      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d0a5      	beq.n	8001dba <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7ff f9ad 	bl	80011cc <HAL_GetTick>
 8001e72:	1b80      	subs	r0, r0, r6
 8001e74:	4540      	cmp	r0, r8
 8001e76:	d9f5      	bls.n	8001e64 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8001e78:	2003      	movs	r0, #3
 8001e7a:	e791      	b.n	8001da0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7c:	2903      	cmp	r1, #3
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e80:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001e84:	e7df      	b.n	8001e46 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e86:	2901      	cmp	r1, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8a:	f012 0f02 	tst.w	r2, #2
 8001e8e:	e7da      	b.n	8001e46 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e90:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8001e94:	e7d7      	b.n	8001e46 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d10a      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b0c      	cmp	r3, #12
 8001ea2:	d08a      	beq.n	8001dba <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f992 	bl	80011cc <HAL_GetTick>
 8001ea8:	1b80      	subs	r0, r0, r6
 8001eaa:	4540      	cmp	r0, r8
 8001eac:	d9f5      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x106>
 8001eae:	e7e3      	b.n	8001e78 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d110      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	f43f af7d 	beq.w	8001dba <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f984 	bl	80011cc <HAL_GetTick>
 8001ec4:	1b80      	subs	r0, r0, r6
 8001ec6:	4540      	cmp	r0, r8
 8001ec8:	d9f4      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
 8001eca:	e7d5      	b.n	8001e78 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff f97e 	bl	80011cc <HAL_GetTick>
 8001ed0:	1b80      	subs	r0, r0, r6
 8001ed2:	4540      	cmp	r0, r8
 8001ed4:	d8d0      	bhi.n	8001e78 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f013 0f0c 	tst.w	r3, #12
 8001edc:	d1f6      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x138>
 8001ede:	e76c      	b.n	8001dba <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	07da      	lsls	r2, r3, #31
 8001eec:	f57f af6c 	bpl.w	8001dc8 <HAL_RCC_ClockConfig+0x34>
 8001ef0:	e755      	b.n	8001d9e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef2:	4905      	ldr	r1, [pc, #20]	@ (8001f08 <HAL_RCC_ClockConfig+0x174>)
 8001ef4:	68e0      	ldr	r0, [r4, #12]
 8001ef6:	688b      	ldr	r3, [r1, #8]
 8001ef8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001efc:	4303      	orrs	r3, r0
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	e766      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	080035b8 	.word	0x080035b8
 8001f10:	2000003c 	.word	0x2000003c
 8001f14:	20000044 	.word	0x20000044

08001f18 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	4a03      	ldr	r2, [pc, #12]	@ (8001f34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f26:	6810      	ldr	r0, [r2, #0]
}
 8001f28:	40d8      	lsrs	r0, r3
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	080035b0 	.word	0x080035b0
 8001f34:	2000003c 	.word	0x2000003c

08001f38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	4a03      	ldr	r2, [pc, #12]	@ (8001f54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f46:	6810      	ldr	r0, [r2, #0]
}
 8001f48:	40d8      	lsrs	r0, r3
 8001f4a:	4770      	bx	lr
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	080035b0 	.word	0x080035b0
 8001f54:	2000003c 	.word	0x2000003c

08001f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f58:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d055      	beq.n	800200c <HAL_SPI_Init+0xb4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d14e      	bne.n	8002004 <HAL_SPI_Init+0xac>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f66:	6842      	ldr	r2, [r0, #4]
 8001f68:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001f6c:	d000      	beq.n	8001f70 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f6e:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f74:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001f78:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001f7c:	b923      	cbnz	r3, 8001f88 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f7e:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001f80:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8001f84:	f7fe fe00 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f88:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f8a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f8c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f90:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f92:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f98:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f9a:	6863      	ldr	r3, [r4, #4]
 8001f9c:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8001fa0:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8001fa4:	4303      	orrs	r3, r0
 8001fa6:	68e0      	ldr	r0, [r4, #12]
 8001fa8:	69a2      	ldr	r2, [r4, #24]
 8001faa:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8001fae:	4303      	orrs	r3, r0
 8001fb0:	6920      	ldr	r0, [r4, #16]
 8001fb2:	f000 0002 	and.w	r0, r0, #2
 8001fb6:	4303      	orrs	r3, r0
 8001fb8:	6960      	ldr	r0, [r4, #20]
 8001fba:	f000 0001 	and.w	r0, r0, #1
 8001fbe:	4303      	orrs	r3, r0
 8001fc0:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8001fc4:	4303      	orrs	r3, r0
 8001fc6:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fc8:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fca:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fd2:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fd6:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8001fda:	4303      	orrs	r3, r0
 8001fdc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001fde:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fe6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fe8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ff2:	69cb      	ldr	r3, [r1, #28]
 8001ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ff8:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001ffa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ffc:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ffe:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8002002:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002004:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800200a:	e7b1      	b.n	8001f70 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800200c:	2001      	movs	r0, #1
 800200e:	e7f8      	b.n	8002002 <HAL_SPI_Init+0xaa>

08002010 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  tmpcr1 = TIMx->CR1;
 8002014:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002016:	d00e      	beq.n	8002036 <TIM_Base_SetConfig+0x26>
 8002018:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <TIM_Base_SetConfig+0x84>)
 800201a:	4290      	cmp	r0, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0x26>
 800201e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002022:	4290      	cmp	r0, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0x26>
 8002026:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800202a:	4290      	cmp	r0, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0x26>
 800202e:	f502 427c 	add.w	r2, r2, #64512	@ 0xfc00
 8002032:	4290      	cmp	r0, r2
 8002034:	d116      	bne.n	8002064 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002036:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8002040:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002044:	d015      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 8002046:	4a13      	ldr	r2, [pc, #76]	@ (8002094 <TIM_Base_SetConfig+0x84>)
 8002048:	4290      	cmp	r0, r2
 800204a:	d012      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 800204c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002050:	4290      	cmp	r0, r2
 8002052:	d00e      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 8002054:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002058:	4290      	cmp	r0, r2
 800205a:	d00a      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 800205c:	f502 427c 	add.w	r2, r2, #64512	@ 0xfc00
 8002060:	4290      	cmp	r0, r2
 8002062:	d006      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <TIM_Base_SetConfig+0x88>)
 8002066:	4290      	cmp	r0, r2
 8002068:	d003      	beq.n	8002072 <TIM_Base_SetConfig+0x62>
 800206a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800206e:	4290      	cmp	r0, r2
 8002070:	d103      	bne.n	800207a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002078:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207a:	690a      	ldr	r2, [r1, #16]
 800207c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002080:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002082:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	688b      	ldr	r3, [r1, #8]
 8002086:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002088:	680b      	ldr	r3, [r1, #0]
 800208a:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800208c:	2301      	movs	r3, #1
 800208e:	6143      	str	r3, [r0, #20]
}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40000400 	.word	0x40000400
 8002098:	40010c00 	.word	0x40010c00

0800209c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209e:	6a02      	ldr	r2, [r0, #32]
{
 80020a0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020aa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020ae:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80020b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80020b6:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020be:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80020c0:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80020c2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c4:	6203      	str	r3, [r0, #32]
}
 80020c6:	bd30      	pop	{r4, r5, pc}

080020c8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ca:	6a02      	ldr	r2, [r0, #32]
{
 80020cc:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ce:	f022 0210 	bic.w	r2, r2, #16
 80020d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020d6:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020da:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80020e4:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020ea:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020ec:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 80020f2:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f4:	6203      	str	r3, [r0, #32]
}
 80020f6:	bd30      	pop	{r4, r5, pc}

080020f8 <HAL_TIM_Base_Init>:
{
 80020f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020fa:	4604      	mov	r4, r0
 80020fc:	b1f0      	cbz	r0, 800213c <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002102:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002106:	b91b      	cbnz	r3, 8002110 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002108:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_TIM_Base_MspInit(htim);
 800210c:	f7fe fe26 	bl	8000d5c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002112:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002114:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	1d21      	adds	r1, r4, #4
 800211a:	f7ff ff79 	bl	8002010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800211e:	2301      	movs	r3, #1
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002122:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 800212a:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
 800212e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002132:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8002136:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 800213a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800213c:	2001      	movs	r0, #1
 800213e:	e7fc      	b.n	800213a <HAL_TIM_Base_Init+0x42>

08002140 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_PWM_Init>:
{
 8002142:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002144:	4604      	mov	r4, r0
 8002146:	b1f0      	cbz	r0, 8002186 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002148:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800214c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002150:	b91b      	cbnz	r3, 800215a <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002152:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002156:	f7ff fff3 	bl	8002140 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800215a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800215e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002162:	1d21      	adds	r1, r4, #4
 8002164:	f7ff ff54 	bl	8002010 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002168:	2301      	movs	r3, #1
  return HAL_OK;
 800216a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800216c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
 8002174:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
 8002178:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 800217c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8002180:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8002184:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
 8002188:	e7fc      	b.n	8002184 <HAL_TIM_PWM_Init+0x42>

0800218a <HAL_TIM_PWM_ConfigChannel>:
{
 800218a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800218c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 8002190:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8002192:	2b01      	cmp	r3, #1
{
 8002194:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8002196:	d076      	beq.n	8002286 <HAL_TIM_PWM_ConfigChannel+0xfc>
 8002198:	2001      	movs	r0, #1
  switch (Channel)
 800219a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800219c:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
  switch (Channel)
 80021a0:	d04e      	beq.n	8002240 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80021a2:	d806      	bhi.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x28>
 80021a4:	b35a      	cbz	r2, 80021fe <HAL_TIM_PWM_ConfigChannel+0x74>
 80021a6:	2a04      	cmp	r2, #4
 80021a8:	d03a      	beq.n	8002220 <HAL_TIM_PWM_ConfigChannel+0x96>
  __HAL_UNLOCK(htim);
 80021aa:	2300      	movs	r3, #0
 80021ac:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
}
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80021b2:	2a0c      	cmp	r2, #12
 80021b4:	d1f9      	bne.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021b6:	682b      	ldr	r3, [r5, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b8:	6826      	ldr	r6, [r4, #0]
  tmpccer = TIMx->CCER;
 80021ba:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021bc:	6a19      	ldr	r1, [r3, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021c2:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80021c6:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80021c8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80021ca:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021cc:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021d0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021d4:	68a6      	ldr	r6, [r4, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021d6:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021d8:	61d9      	str	r1, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021da:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021dc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 80021e0:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021e2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021e6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021fc:	e041      	b.n	8002282 <HAL_TIM_PWM_ConfigChannel+0xf8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021fe:	6828      	ldr	r0, [r5, #0]
 8002200:	f7ff ff4c 	bl	800209c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002204:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002206:	68ca      	ldr	r2, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800220e:	6983      	ldr	r3, [r0, #24]
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002216:	6983      	ldr	r3, [r0, #24]
 8002218:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800221a:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800221c:	2000      	movs	r0, #0
 800221e:	e7c4      	b.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002220:	6828      	ldr	r0, [r5, #0]
 8002222:	f7ff ff51 	bl	80020c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002226:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002228:	68ca      	ldr	r2, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800222a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800222e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002230:	6983      	ldr	r3, [r0, #24]
 8002232:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002236:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002238:	6983      	ldr	r3, [r0, #24]
 800223a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800223e:	e7ec      	b.n	800221a <HAL_TIM_PWM_ConfigChannel+0x90>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002240:	682b      	ldr	r3, [r5, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002242:	6826      	ldr	r6, [r4, #0]
  tmpccer = TIMx->CCER;
 8002244:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002246:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 8002248:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800224c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8002250:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002252:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002254:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002256:	f021 0173 	bic.w	r1, r1, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800225a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800225c:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800225e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002260:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002262:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002264:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002268:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800226a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800226c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800226e:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002270:	f042 0208 	orr.w	r2, r2, #8
 8002274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	f022 0204 	bic.w	r2, r2, #4
 800227c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002282:	61da      	str	r2, [r3, #28]
      break;
 8002284:	e7ca      	b.n	800221c <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8002286:	2002      	movs	r0, #2
 8002288:	e792      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x26>

0800228a <HAL_TIM_ConfigClockSource>:
{
 800228a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800228c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 8002290:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002292:	2b01      	cmp	r3, #1
 8002294:	f04f 0002 	mov.w	r0, #2
 8002298:	f000 809a 	beq.w	80023d0 <HAL_TIM_ConfigClockSource+0x146>
 800229c:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 800229e:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(htim);
 80022a0:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
  tmpsmcr = htim->Instance->SMCR;
 80022a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022aa:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80022ae:	f022 0277 	bic.w	r2, r2, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80022b2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80022b4:	680a      	ldr	r2, [r1, #0]
 80022b6:	2a60      	cmp	r2, #96	@ 0x60
 80022b8:	d05b      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0xe8>
 80022ba:	d832      	bhi.n	8002322 <HAL_TIM_ConfigClockSource+0x98>
 80022bc:	2a40      	cmp	r2, #64	@ 0x40
 80022be:	d070      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0x118>
 80022c0:	d816      	bhi.n	80022f0 <HAL_TIM_ConfigClockSource+0x66>
 80022c2:	2a20      	cmp	r2, #32
 80022c4:	d00d      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x58>
 80022c6:	d80a      	bhi.n	80022de <HAL_TIM_ConfigClockSource+0x54>
 80022c8:	f032 0110 	bics.w	r1, r2, #16
 80022cc:	d009      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  __HAL_UNLOCK(htim);
 80022d4:	2300      	movs	r3, #0
 80022d6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 80022da:	4628      	mov	r0, r5
 80022dc:	bd30      	pop	{r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80022de:	2a30      	cmp	r2, #48	@ 0x30
 80022e0:	d1f5      	bne.n	80022ce <HAL_TIM_ConfigClockSource+0x44>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022e2:	6899      	ldr	r1, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022e4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022e8:	430a      	orrs	r2, r1
 80022ea:	f042 0207 	orr.w	r2, r2, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ee:	e02e      	b.n	800234e <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 80022f0:	2a50      	cmp	r2, #80	@ 0x50
 80022f2:	d1ec      	bne.n	80022ce <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 80022f4:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80022f6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80022f8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022fc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002306:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002308:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800230e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002314:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002316:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002318:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800231c:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002320:	e015      	b.n	800234e <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8002322:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8002326:	d013      	beq.n	8002350 <HAL_TIM_ConfigClockSource+0xc6>
 8002328:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800232c:	d012      	beq.n	8002354 <HAL_TIM_ConfigClockSource+0xca>
 800232e:	2a70      	cmp	r2, #112	@ 0x70
 8002330:	d1cd      	bne.n	80022ce <HAL_TIM_ConfigClockSource+0x44>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002332:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002336:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002338:	68c9      	ldr	r1, [r1, #12]
 800233a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233c:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002340:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002344:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002346:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002348:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800234a:	f042 0277 	orr.w	r2, r2, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800234e:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2500      	movs	r5, #0
 8002352:	e7bc      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8002354:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002356:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800235a:	68c9      	ldr	r1, [r1, #12]
 800235c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235e:	f420 407f 	bic.w	r0, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002362:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002366:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8002368:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002370:	e7ed      	b.n	800234e <HAL_TIM_ConfigClockSource+0xc4>
  tmpccer = TIMx->CCER;
 8002372:	6a1a      	ldr	r2, [r3, #32]
                               sClockSourceConfig->ClockPolarity,
 8002374:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002376:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002378:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237e:	f021 0110 	bic.w	r1, r1, #16
 8002382:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002384:	6999      	ldr	r1, [r3, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002386:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800238a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800238e:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002392:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002394:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002396:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002398:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800239c:	f042 0267 	orr.w	r2, r2, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80023a0:	e7d5      	b.n	800234e <HAL_TIM_ConfigClockSource+0xc4>
                               sClockSourceConfig->ClockPolarity,
 80023a2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80023a4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80023a6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a8:	6a1a      	ldr	r2, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023aa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80023b6:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80023c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c2:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80023c4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ca:	f042 0247 	orr.w	r2, r2, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80023ce:	e7be      	b.n	800234e <HAL_TIM_ConfigClockSource+0xc4>
  __HAL_LOCK(htim);
 80023d0:	4605      	mov	r5, r0
 80023d2:	e782      	b.n	80022da <HAL_TIM_ConfigClockSource+0x50>

080023d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023d6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
{
 80023da:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f04f 0002 	mov.w	r0, #2
 80023e2:	d022      	beq.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023e4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023e6:	f882 0039 	strb.w	r0, [r2, #57]	@ 0x39
  tmpcr2 = htim->Instance->CR2;
 80023ea:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023ec:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ee:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023f2:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 80023f8:	6898      	ldr	r0, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80023fa:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	d00a      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80023fe:	4c0b      	ldr	r4, [pc, #44]	@ (800242c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002400:	42a3      	cmp	r3, r4
 8002402:	d007      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002404:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002408:	42a3      	cmp	r3, r4
 800240a:	d003      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800240c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8002410:	42a3      	cmp	r3, r4
 8002412:	d104      	bne.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002414:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002416:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800241c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800241e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002420:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002422:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
  __HAL_UNLOCK(htim);
 8002426:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38

  return HAL_OK;
}
 800242a:	bd30      	pop	{r4, r5, pc}
 800242c:	40000400 	.word	0x40000400

08002430 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002430:	b510      	push	{r4, lr}
 8002432:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002434:	6802      	ldr	r2, [r0, #0]
 8002436:	68c1      	ldr	r1, [r0, #12]
 8002438:	6913      	ldr	r3, [r2, #16]
 800243a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800243e:	430b      	orrs	r3, r1
 8002440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002442:	6883      	ldr	r3, [r0, #8]
 8002444:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002446:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002448:	4303      	orrs	r3, r0
 800244a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800244c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002450:	4303      	orrs	r3, r0
 8002452:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002454:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002458:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245e:	6953      	ldr	r3, [r2, #20]
 8002460:	69a1      	ldr	r1, [r4, #24]
 8002462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002466:	430b      	orrs	r3, r1
 8002468:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <UART_SetConfig+0xa4>)
 800246c:	429a      	cmp	r2, r3
 800246e:	d120      	bne.n	80024b2 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002470:	f7ff fd62 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002474:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002476:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002478:	4358      	muls	r0, r3
 800247a:	e9d4 2300 	ldrd	r2, r3, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8002482:	f04f 0164 	mov.w	r1, #100	@ 0x64
 8002486:	d117      	bne.n	80024b8 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fbb0 f0f3 	udiv	r0, r0, r3
 800248e:	fbb0 f4f1 	udiv	r4, r0, r1
 8002492:	fb01 0014 	mls	r0, r1, r4, r0
 8002496:	00c3      	lsls	r3, r0, #3
 8002498:	3332      	adds	r3, #50	@ 0x32
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	f003 0107 	and.w	r1, r3, #7
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80024a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024ac:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ae:	6093      	str	r3, [r2, #8]
  }
}
 80024b0:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80024b2:	f7ff fd31 	bl	8001f18 <HAL_RCC_GetPCLK1Freq>
 80024b6:	e7dd      	b.n	8002474 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80024be:	fbb0 f4f1 	udiv	r4, r0, r1
 80024c2:	fb01 0314 	mls	r3, r1, r4, r0
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	3332      	adds	r3, #50	@ 0x32
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80024d2:	e7ec      	b.n	80024ae <UART_SetConfig+0x7e>
 80024d4:	40013800 	.word	0x40013800

080024d8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	460e      	mov	r6, r1
 80024de:	4617      	mov	r7, r2
 80024e0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	6813      	ldr	r3, [r2, #0]
 80024e6:	ea36 0303 	bics.w	r3, r6, r3
 80024ea:	d101      	bne.n	80024f0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80024ec:	2000      	movs	r0, #0
 80024ee:	e028      	b.n	8002542 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	1c6b      	adds	r3, r5, #1
 80024f2:	d0f7      	beq.n	80024e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024f4:	b125      	cbz	r5, 8002500 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80024f6:	f7fe fe69 	bl	80011cc <HAL_GetTick>
 80024fa:	1bc0      	subs	r0, r0, r7
 80024fc:	4285      	cmp	r5, r0
 80024fe:	d2f0      	bcs.n	80024e2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002500:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002502:	f102 030c 	add.w	r3, r2, #12
 8002506:	e853 3f00 	ldrex	r3, [r3]
 800250a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	320c      	adds	r2, #12
 8002510:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002514:	6821      	ldr	r1, [r4, #0]
 8002516:	2800      	cmp	r0, #0
 8002518:	d1f2      	bne.n	8002500 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	f101 0314 	add.w	r3, r1, #20
 800251e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002522:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002526:	f101 0014 	add.w	r0, r1, #20
 800252a:	e840 3200 	strex	r2, r3, [r0]
 800252e:	2a00      	cmp	r2, #0
 8002530:	d1f3      	bne.n	800251a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002532:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002534:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002536:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(huart);
 800253a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800253e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8002542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002544 <HAL_UART_Init>:
{
 8002544:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002546:	4604      	mov	r4, r0
 8002548:	b348      	cbz	r0, 800259e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800254e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002552:	b91b      	cbnz	r3, 800255c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002554:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002558:	f7fe fd12 	bl	8000f80 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800255c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800255e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002560:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002564:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002566:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002568:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800256c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800256e:	f7ff ff5f 	bl	8002430 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002572:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800257c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002584:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800258c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800258e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002592:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002596:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800259a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800259c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	e7fc      	b.n	800259c <HAL_UART_Init+0x58>

080025a2 <HAL_UART_Transmit>:
{
 80025a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025a6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80025a8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80025ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80025ae:	2b20      	cmp	r3, #32
{
 80025b0:	460e      	mov	r6, r1
 80025b2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80025b4:	d13c      	bne.n	8002630 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d03c      	beq.n	8002634 <HAL_UART_Transmit+0x92>
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d03a      	beq.n	8002634 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025be:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	2500      	movs	r5, #0
 80025c2:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025c4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80025c8:	f7fe fe00 	bl	80011cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025cc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80025ce:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 80025d4:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025d6:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	d103      	bne.n	80025e2 <HAL_UART_Transmit+0x40>
 80025da:	6923      	ldr	r3, [r4, #16]
 80025dc:	b90b      	cbnz	r3, 80025e2 <HAL_UART_Transmit+0x40>
 80025de:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80025e0:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80025e2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b953      	cbnz	r3, 80025fe <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e8:	4643      	mov	r3, r8
 80025ea:	464a      	mov	r2, r9
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff ff72 	bl	80024d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80025f4:	b950      	cbnz	r0, 800260c <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80025f6:	2320      	movs	r3, #32
 80025f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80025fc:	e007      	b.n	800260e <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	4643      	mov	r3, r8
 8002600:	464a      	mov	r2, r9
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff ff67 	bl	80024d8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800260a:	b110      	cbz	r0, 8002612 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 800260c:	2003      	movs	r0, #3
}
 800260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002612:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002614:	b94e      	cbnz	r6, 800262a <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002616:	f835 3b02 	ldrh.w	r3, [r5], #2
 800261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800261e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002620:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8002622:	3901      	subs	r1, #1
 8002624:	b289      	uxth	r1, r1
 8002626:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002628:	e7db      	b.n	80025e2 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800262a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800262e:	e7f6      	b.n	800261e <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8002630:	2002      	movs	r0, #2
 8002632:	e7ec      	b.n	800260e <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8002634:	2001      	movs	r0, #1
 8002636:	e7ea      	b.n	800260e <HAL_UART_Transmit+0x6c>

08002638 <sniprintf>:
 8002638:	b40c      	push	{r2, r3}
 800263a:	b530      	push	{r4, r5, lr}
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <sniprintf+0x64>)
 800263e:	1e0c      	subs	r4, r1, #0
 8002640:	681d      	ldr	r5, [r3, #0]
 8002642:	b09d      	sub	sp, #116	@ 0x74
 8002644:	da08      	bge.n	8002658 <sniprintf+0x20>
 8002646:	238b      	movs	r3, #139	@ 0x8b
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	602b      	str	r3, [r5, #0]
 800264e:	b01d      	add	sp, #116	@ 0x74
 8002650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002654:	b002      	add	sp, #8
 8002656:	4770      	bx	lr
 8002658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800265c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002660:	bf0c      	ite	eq
 8002662:	4623      	moveq	r3, r4
 8002664:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002668:	9304      	str	r3, [sp, #16]
 800266a:	9307      	str	r3, [sp, #28]
 800266c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002670:	9002      	str	r0, [sp, #8]
 8002672:	9006      	str	r0, [sp, #24]
 8002674:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002678:	4628      	mov	r0, r5
 800267a:	ab21      	add	r3, sp, #132	@ 0x84
 800267c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800267e:	a902      	add	r1, sp, #8
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	f000 f9af 	bl	80029e4 <_svfiprintf_r>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	bfbc      	itt	lt
 800268a:	238b      	movlt	r3, #139	@ 0x8b
 800268c:	602b      	strlt	r3, [r5, #0]
 800268e:	2c00      	cmp	r4, #0
 8002690:	d0dd      	beq.n	800264e <sniprintf+0x16>
 8002692:	2200      	movs	r2, #0
 8002694:	9b02      	ldr	r3, [sp, #8]
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e7d9      	b.n	800264e <sniprintf+0x16>
 800269a:	bf00      	nop
 800269c:	20000048 	.word	0x20000048

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <strncat>:
 80026b0:	b530      	push	{r4, r5, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	7825      	ldrb	r5, [r4, #0]
 80026b6:	4623      	mov	r3, r4
 80026b8:	3401      	adds	r4, #1
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d1fa      	bne.n	80026b4 <strncat+0x4>
 80026be:	3a01      	subs	r2, #1
 80026c0:	d304      	bcc.n	80026cc <strncat+0x1c>
 80026c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026c6:	f803 4b01 	strb.w	r4, [r3], #1
 80026ca:	b904      	cbnz	r4, 80026ce <strncat+0x1e>
 80026cc:	bd30      	pop	{r4, r5, pc}
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d1f5      	bne.n	80026be <strncat+0xe>
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e7f3      	b.n	80026be <strncat+0xe>
	...

080026d8 <__errno>:
 80026d8:	4b01      	ldr	r3, [pc, #4]	@ (80026e0 <__errno+0x8>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000048 	.word	0x20000048

080026e4 <__libc_init_array>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	2600      	movs	r6, #0
 80026e8:	4d0c      	ldr	r5, [pc, #48]	@ (800271c <__libc_init_array+0x38>)
 80026ea:	4c0d      	ldr	r4, [pc, #52]	@ (8002720 <__libc_init_array+0x3c>)
 80026ec:	1b64      	subs	r4, r4, r5
 80026ee:	10a4      	asrs	r4, r4, #2
 80026f0:	42a6      	cmp	r6, r4
 80026f2:	d109      	bne.n	8002708 <__libc_init_array+0x24>
 80026f4:	f000 fc80 	bl	8002ff8 <_init>
 80026f8:	2600      	movs	r6, #0
 80026fa:	4d0a      	ldr	r5, [pc, #40]	@ (8002724 <__libc_init_array+0x40>)
 80026fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002728 <__libc_init_array+0x44>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	42a6      	cmp	r6, r4
 8002704:	d105      	bne.n	8002712 <__libc_init_array+0x2e>
 8002706:	bd70      	pop	{r4, r5, r6, pc}
 8002708:	f855 3b04 	ldr.w	r3, [r5], #4
 800270c:	4798      	blx	r3
 800270e:	3601      	adds	r6, #1
 8002710:	e7ee      	b.n	80026f0 <__libc_init_array+0xc>
 8002712:	f855 3b04 	ldr.w	r3, [r5], #4
 8002716:	4798      	blx	r3
 8002718:	3601      	adds	r6, #1
 800271a:	e7f2      	b.n	8002702 <__libc_init_array+0x1e>
 800271c:	0800360c 	.word	0x0800360c
 8002720:	0800360c 	.word	0x0800360c
 8002724:	0800360c 	.word	0x0800360c
 8002728:	08003610 	.word	0x08003610

0800272c <__retarget_lock_acquire_recursive>:
 800272c:	4770      	bx	lr

0800272e <__retarget_lock_release_recursive>:
 800272e:	4770      	bx	lr

08002730 <strcpy>:
 8002730:	4603      	mov	r3, r0
 8002732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002736:	f803 2b01 	strb.w	r2, [r3], #1
 800273a:	2a00      	cmp	r2, #0
 800273c:	d1f9      	bne.n	8002732 <strcpy+0x2>
 800273e:	4770      	bx	lr

08002740 <_free_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4605      	mov	r5, r0
 8002744:	2900      	cmp	r1, #0
 8002746:	d040      	beq.n	80027ca <_free_r+0x8a>
 8002748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800274c:	1f0c      	subs	r4, r1, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	18e4      	addlt	r4, r4, r3
 8002754:	f000 f8de 	bl	8002914 <__malloc_lock>
 8002758:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <_free_r+0x8c>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	b933      	cbnz	r3, 800276c <_free_r+0x2c>
 800275e:	6063      	str	r3, [r4, #4]
 8002760:	6014      	str	r4, [r2, #0]
 8002762:	4628      	mov	r0, r5
 8002764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002768:	f000 b8da 	b.w	8002920 <__malloc_unlock>
 800276c:	42a3      	cmp	r3, r4
 800276e:	d908      	bls.n	8002782 <_free_r+0x42>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	1821      	adds	r1, r4, r0
 8002774:	428b      	cmp	r3, r1
 8002776:	bf01      	itttt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	1809      	addeq	r1, r1, r0
 800277e:	6021      	streq	r1, [r4, #0]
 8002780:	e7ed      	b.n	800275e <_free_r+0x1e>
 8002782:	461a      	mov	r2, r3
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b10b      	cbz	r3, 800278c <_free_r+0x4c>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d9fa      	bls.n	8002782 <_free_r+0x42>
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	1850      	adds	r0, r2, r1
 8002790:	42a0      	cmp	r0, r4
 8002792:	d10b      	bne.n	80027ac <_free_r+0x6c>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	4401      	add	r1, r0
 8002798:	1850      	adds	r0, r2, r1
 800279a:	4283      	cmp	r3, r0
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	d1e0      	bne.n	8002762 <_free_r+0x22>
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4408      	add	r0, r1
 80027a6:	6010      	str	r0, [r2, #0]
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	e7da      	b.n	8002762 <_free_r+0x22>
 80027ac:	d902      	bls.n	80027b4 <_free_r+0x74>
 80027ae:	230c      	movs	r3, #12
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	e7d6      	b.n	8002762 <_free_r+0x22>
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	1821      	adds	r1, r4, r0
 80027b8:	428b      	cmp	r3, r1
 80027ba:	bf01      	itttt	eq
 80027bc:	6819      	ldreq	r1, [r3, #0]
 80027be:	685b      	ldreq	r3, [r3, #4]
 80027c0:	1809      	addeq	r1, r1, r0
 80027c2:	6021      	streq	r1, [r4, #0]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	6054      	str	r4, [r2, #4]
 80027c8:	e7cb      	b.n	8002762 <_free_r+0x22>
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	20000534 	.word	0x20000534

080027d0 <sbrk_aligned>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4e0f      	ldr	r6, [pc, #60]	@ (8002810 <sbrk_aligned+0x40>)
 80027d4:	460c      	mov	r4, r1
 80027d6:	6831      	ldr	r1, [r6, #0]
 80027d8:	4605      	mov	r5, r0
 80027da:	b911      	cbnz	r1, 80027e2 <sbrk_aligned+0x12>
 80027dc:	f000 fbaa 	bl	8002f34 <_sbrk_r>
 80027e0:	6030      	str	r0, [r6, #0]
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f000 fba5 	bl	8002f34 <_sbrk_r>
 80027ea:	1c43      	adds	r3, r0, #1
 80027ec:	d103      	bne.n	80027f6 <sbrk_aligned+0x26>
 80027ee:	f04f 34ff 	mov.w	r4, #4294967295
 80027f2:	4620      	mov	r0, r4
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
 80027f6:	1cc4      	adds	r4, r0, #3
 80027f8:	f024 0403 	bic.w	r4, r4, #3
 80027fc:	42a0      	cmp	r0, r4
 80027fe:	d0f8      	beq.n	80027f2 <sbrk_aligned+0x22>
 8002800:	1a21      	subs	r1, r4, r0
 8002802:	4628      	mov	r0, r5
 8002804:	f000 fb96 	bl	8002f34 <_sbrk_r>
 8002808:	3001      	adds	r0, #1
 800280a:	d1f2      	bne.n	80027f2 <sbrk_aligned+0x22>
 800280c:	e7ef      	b.n	80027ee <sbrk_aligned+0x1e>
 800280e:	bf00      	nop
 8002810:	20000530 	.word	0x20000530

08002814 <_malloc_r>:
 8002814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002818:	1ccd      	adds	r5, r1, #3
 800281a:	f025 0503 	bic.w	r5, r5, #3
 800281e:	3508      	adds	r5, #8
 8002820:	2d0c      	cmp	r5, #12
 8002822:	bf38      	it	cc
 8002824:	250c      	movcc	r5, #12
 8002826:	2d00      	cmp	r5, #0
 8002828:	4606      	mov	r6, r0
 800282a:	db01      	blt.n	8002830 <_malloc_r+0x1c>
 800282c:	42a9      	cmp	r1, r5
 800282e:	d904      	bls.n	800283a <_malloc_r+0x26>
 8002830:	230c      	movs	r3, #12
 8002832:	6033      	str	r3, [r6, #0]
 8002834:	2000      	movs	r0, #0
 8002836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800283a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002910 <_malloc_r+0xfc>
 800283e:	f000 f869 	bl	8002914 <__malloc_lock>
 8002842:	f8d8 3000 	ldr.w	r3, [r8]
 8002846:	461c      	mov	r4, r3
 8002848:	bb44      	cbnz	r4, 800289c <_malloc_r+0x88>
 800284a:	4629      	mov	r1, r5
 800284c:	4630      	mov	r0, r6
 800284e:	f7ff ffbf 	bl	80027d0 <sbrk_aligned>
 8002852:	1c43      	adds	r3, r0, #1
 8002854:	4604      	mov	r4, r0
 8002856:	d158      	bne.n	800290a <_malloc_r+0xf6>
 8002858:	f8d8 4000 	ldr.w	r4, [r8]
 800285c:	4627      	mov	r7, r4
 800285e:	2f00      	cmp	r7, #0
 8002860:	d143      	bne.n	80028ea <_malloc_r+0xd6>
 8002862:	2c00      	cmp	r4, #0
 8002864:	d04b      	beq.n	80028fe <_malloc_r+0xea>
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	4639      	mov	r1, r7
 800286a:	4630      	mov	r0, r6
 800286c:	eb04 0903 	add.w	r9, r4, r3
 8002870:	f000 fb60 	bl	8002f34 <_sbrk_r>
 8002874:	4581      	cmp	r9, r0
 8002876:	d142      	bne.n	80028fe <_malloc_r+0xea>
 8002878:	6821      	ldr	r1, [r4, #0]
 800287a:	4630      	mov	r0, r6
 800287c:	1a6d      	subs	r5, r5, r1
 800287e:	4629      	mov	r1, r5
 8002880:	f7ff ffa6 	bl	80027d0 <sbrk_aligned>
 8002884:	3001      	adds	r0, #1
 8002886:	d03a      	beq.n	80028fe <_malloc_r+0xea>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	442b      	add	r3, r5
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	f8d8 3000 	ldr.w	r3, [r8]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	bb62      	cbnz	r2, 80028f0 <_malloc_r+0xdc>
 8002896:	f8c8 7000 	str.w	r7, [r8]
 800289a:	e00f      	b.n	80028bc <_malloc_r+0xa8>
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	1b52      	subs	r2, r2, r5
 80028a0:	d420      	bmi.n	80028e4 <_malloc_r+0xd0>
 80028a2:	2a0b      	cmp	r2, #11
 80028a4:	d917      	bls.n	80028d6 <_malloc_r+0xc2>
 80028a6:	1961      	adds	r1, r4, r5
 80028a8:	42a3      	cmp	r3, r4
 80028aa:	6025      	str	r5, [r4, #0]
 80028ac:	bf18      	it	ne
 80028ae:	6059      	strne	r1, [r3, #4]
 80028b0:	6863      	ldr	r3, [r4, #4]
 80028b2:	bf08      	it	eq
 80028b4:	f8c8 1000 	streq.w	r1, [r8]
 80028b8:	5162      	str	r2, [r4, r5]
 80028ba:	604b      	str	r3, [r1, #4]
 80028bc:	4630      	mov	r0, r6
 80028be:	f000 f82f 	bl	8002920 <__malloc_unlock>
 80028c2:	f104 000b 	add.w	r0, r4, #11
 80028c6:	1d23      	adds	r3, r4, #4
 80028c8:	f020 0007 	bic.w	r0, r0, #7
 80028cc:	1ac2      	subs	r2, r0, r3
 80028ce:	bf1c      	itt	ne
 80028d0:	1a1b      	subne	r3, r3, r0
 80028d2:	50a3      	strne	r3, [r4, r2]
 80028d4:	e7af      	b.n	8002836 <_malloc_r+0x22>
 80028d6:	6862      	ldr	r2, [r4, #4]
 80028d8:	42a3      	cmp	r3, r4
 80028da:	bf0c      	ite	eq
 80028dc:	f8c8 2000 	streq.w	r2, [r8]
 80028e0:	605a      	strne	r2, [r3, #4]
 80028e2:	e7eb      	b.n	80028bc <_malloc_r+0xa8>
 80028e4:	4623      	mov	r3, r4
 80028e6:	6864      	ldr	r4, [r4, #4]
 80028e8:	e7ae      	b.n	8002848 <_malloc_r+0x34>
 80028ea:	463c      	mov	r4, r7
 80028ec:	687f      	ldr	r7, [r7, #4]
 80028ee:	e7b6      	b.n	800285e <_malloc_r+0x4a>
 80028f0:	461a      	mov	r2, r3
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	42a3      	cmp	r3, r4
 80028f6:	d1fb      	bne.n	80028f0 <_malloc_r+0xdc>
 80028f8:	2300      	movs	r3, #0
 80028fa:	6053      	str	r3, [r2, #4]
 80028fc:	e7de      	b.n	80028bc <_malloc_r+0xa8>
 80028fe:	230c      	movs	r3, #12
 8002900:	4630      	mov	r0, r6
 8002902:	6033      	str	r3, [r6, #0]
 8002904:	f000 f80c 	bl	8002920 <__malloc_unlock>
 8002908:	e794      	b.n	8002834 <_malloc_r+0x20>
 800290a:	6005      	str	r5, [r0, #0]
 800290c:	e7d6      	b.n	80028bc <_malloc_r+0xa8>
 800290e:	bf00      	nop
 8002910:	20000534 	.word	0x20000534

08002914 <__malloc_lock>:
 8002914:	4801      	ldr	r0, [pc, #4]	@ (800291c <__malloc_lock+0x8>)
 8002916:	f7ff bf09 	b.w	800272c <__retarget_lock_acquire_recursive>
 800291a:	bf00      	nop
 800291c:	2000052c 	.word	0x2000052c

08002920 <__malloc_unlock>:
 8002920:	4801      	ldr	r0, [pc, #4]	@ (8002928 <__malloc_unlock+0x8>)
 8002922:	f7ff bf04 	b.w	800272e <__retarget_lock_release_recursive>
 8002926:	bf00      	nop
 8002928:	2000052c 	.word	0x2000052c

0800292c <__ssputs_r>:
 800292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002930:	461f      	mov	r7, r3
 8002932:	688e      	ldr	r6, [r1, #8]
 8002934:	4682      	mov	sl, r0
 8002936:	42be      	cmp	r6, r7
 8002938:	460c      	mov	r4, r1
 800293a:	4690      	mov	r8, r2
 800293c:	680b      	ldr	r3, [r1, #0]
 800293e:	d82d      	bhi.n	800299c <__ssputs_r+0x70>
 8002940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002948:	d026      	beq.n	8002998 <__ssputs_r+0x6c>
 800294a:	6965      	ldr	r5, [r4, #20]
 800294c:	6909      	ldr	r1, [r1, #16]
 800294e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002952:	eba3 0901 	sub.w	r9, r3, r1
 8002956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800295a:	1c7b      	adds	r3, r7, #1
 800295c:	444b      	add	r3, r9
 800295e:	106d      	asrs	r5, r5, #1
 8002960:	429d      	cmp	r5, r3
 8002962:	bf38      	it	cc
 8002964:	461d      	movcc	r5, r3
 8002966:	0553      	lsls	r3, r2, #21
 8002968:	d527      	bpl.n	80029ba <__ssputs_r+0x8e>
 800296a:	4629      	mov	r1, r5
 800296c:	f7ff ff52 	bl	8002814 <_malloc_r>
 8002970:	4606      	mov	r6, r0
 8002972:	b360      	cbz	r0, 80029ce <__ssputs_r+0xa2>
 8002974:	464a      	mov	r2, r9
 8002976:	6921      	ldr	r1, [r4, #16]
 8002978:	f000 fafa 	bl	8002f70 <memcpy>
 800297c:	89a3      	ldrh	r3, [r4, #12]
 800297e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002986:	81a3      	strh	r3, [r4, #12]
 8002988:	6126      	str	r6, [r4, #16]
 800298a:	444e      	add	r6, r9
 800298c:	6026      	str	r6, [r4, #0]
 800298e:	463e      	mov	r6, r7
 8002990:	6165      	str	r5, [r4, #20]
 8002992:	eba5 0509 	sub.w	r5, r5, r9
 8002996:	60a5      	str	r5, [r4, #8]
 8002998:	42be      	cmp	r6, r7
 800299a:	d900      	bls.n	800299e <__ssputs_r+0x72>
 800299c:	463e      	mov	r6, r7
 800299e:	4632      	mov	r2, r6
 80029a0:	4641      	mov	r1, r8
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	f000 faac 	bl	8002f00 <memmove>
 80029a8:	2000      	movs	r0, #0
 80029aa:	68a3      	ldr	r3, [r4, #8]
 80029ac:	1b9b      	subs	r3, r3, r6
 80029ae:	60a3      	str	r3, [r4, #8]
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	4433      	add	r3, r6
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ba:	462a      	mov	r2, r5
 80029bc:	f000 fae6 	bl	8002f8c <_realloc_r>
 80029c0:	4606      	mov	r6, r0
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d1e0      	bne.n	8002988 <__ssputs_r+0x5c>
 80029c6:	4650      	mov	r0, sl
 80029c8:	6921      	ldr	r1, [r4, #16]
 80029ca:	f7ff feb9 	bl	8002740 <_free_r>
 80029ce:	230c      	movs	r3, #12
 80029d0:	f8ca 3000 	str.w	r3, [sl]
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029de:	81a3      	strh	r3, [r4, #12]
 80029e0:	e7e9      	b.n	80029b6 <__ssputs_r+0x8a>
	...

080029e4 <_svfiprintf_r>:
 80029e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e8:	4698      	mov	r8, r3
 80029ea:	898b      	ldrh	r3, [r1, #12]
 80029ec:	4607      	mov	r7, r0
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	460d      	mov	r5, r1
 80029f2:	4614      	mov	r4, r2
 80029f4:	b09d      	sub	sp, #116	@ 0x74
 80029f6:	d510      	bpl.n	8002a1a <_svfiprintf_r+0x36>
 80029f8:	690b      	ldr	r3, [r1, #16]
 80029fa:	b973      	cbnz	r3, 8002a1a <_svfiprintf_r+0x36>
 80029fc:	2140      	movs	r1, #64	@ 0x40
 80029fe:	f7ff ff09 	bl	8002814 <_malloc_r>
 8002a02:	6028      	str	r0, [r5, #0]
 8002a04:	6128      	str	r0, [r5, #16]
 8002a06:	b930      	cbnz	r0, 8002a16 <_svfiprintf_r+0x32>
 8002a08:	230c      	movs	r3, #12
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a10:	b01d      	add	sp, #116	@ 0x74
 8002a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a16:	2340      	movs	r3, #64	@ 0x40
 8002a18:	616b      	str	r3, [r5, #20]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a1e:	2320      	movs	r3, #32
 8002a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a24:	2330      	movs	r3, #48	@ 0x30
 8002a26:	f04f 0901 	mov.w	r9, #1
 8002a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002bc8 <_svfiprintf_r+0x1e4>
 8002a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a36:	4623      	mov	r3, r4
 8002a38:	469a      	mov	sl, r3
 8002a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a3e:	b10a      	cbz	r2, 8002a44 <_svfiprintf_r+0x60>
 8002a40:	2a25      	cmp	r2, #37	@ 0x25
 8002a42:	d1f9      	bne.n	8002a38 <_svfiprintf_r+0x54>
 8002a44:	ebba 0b04 	subs.w	fp, sl, r4
 8002a48:	d00b      	beq.n	8002a62 <_svfiprintf_r+0x7e>
 8002a4a:	465b      	mov	r3, fp
 8002a4c:	4622      	mov	r2, r4
 8002a4e:	4629      	mov	r1, r5
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff ff6b 	bl	800292c <__ssputs_r>
 8002a56:	3001      	adds	r0, #1
 8002a58:	f000 80a7 	beq.w	8002baa <_svfiprintf_r+0x1c6>
 8002a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a5e:	445a      	add	r2, fp
 8002a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a62:	f89a 3000 	ldrb.w	r3, [sl]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 809f 	beq.w	8002baa <_svfiprintf_r+0x1c6>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a76:	f10a 0a01 	add.w	sl, sl, #1
 8002a7a:	9304      	str	r3, [sp, #16]
 8002a7c:	9307      	str	r3, [sp, #28]
 8002a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a84:	4654      	mov	r4, sl
 8002a86:	2205      	movs	r2, #5
 8002a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a8c:	484e      	ldr	r0, [pc, #312]	@ (8002bc8 <_svfiprintf_r+0x1e4>)
 8002a8e:	f000 fa61 	bl	8002f54 <memchr>
 8002a92:	9a04      	ldr	r2, [sp, #16]
 8002a94:	b9d8      	cbnz	r0, 8002ace <_svfiprintf_r+0xea>
 8002a96:	06d0      	lsls	r0, r2, #27
 8002a98:	bf44      	itt	mi
 8002a9a:	2320      	movmi	r3, #32
 8002a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aa0:	0711      	lsls	r1, r2, #28
 8002aa2:	bf44      	itt	mi
 8002aa4:	232b      	movmi	r3, #43	@ 0x2b
 8002aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8002aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ab0:	d015      	beq.n	8002ade <_svfiprintf_r+0xfa>
 8002ab2:	4654      	mov	r4, sl
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f04f 0c0a 	mov.w	ip, #10
 8002aba:	9a07      	ldr	r2, [sp, #28]
 8002abc:	4621      	mov	r1, r4
 8002abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ac2:	3b30      	subs	r3, #48	@ 0x30
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d94b      	bls.n	8002b60 <_svfiprintf_r+0x17c>
 8002ac8:	b1b0      	cbz	r0, 8002af8 <_svfiprintf_r+0x114>
 8002aca:	9207      	str	r2, [sp, #28]
 8002acc:	e014      	b.n	8002af8 <_svfiprintf_r+0x114>
 8002ace:	eba0 0308 	sub.w	r3, r0, r8
 8002ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	46a2      	mov	sl, r4
 8002ada:	9304      	str	r3, [sp, #16]
 8002adc:	e7d2      	b.n	8002a84 <_svfiprintf_r+0xa0>
 8002ade:	9b03      	ldr	r3, [sp, #12]
 8002ae0:	1d19      	adds	r1, r3, #4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	9103      	str	r1, [sp, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bfbb      	ittet	lt
 8002aea:	425b      	neglt	r3, r3
 8002aec:	f042 0202 	orrlt.w	r2, r2, #2
 8002af0:	9307      	strge	r3, [sp, #28]
 8002af2:	9307      	strlt	r3, [sp, #28]
 8002af4:	bfb8      	it	lt
 8002af6:	9204      	strlt	r2, [sp, #16]
 8002af8:	7823      	ldrb	r3, [r4, #0]
 8002afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8002afc:	d10a      	bne.n	8002b14 <_svfiprintf_r+0x130>
 8002afe:	7863      	ldrb	r3, [r4, #1]
 8002b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b02:	d132      	bne.n	8002b6a <_svfiprintf_r+0x186>
 8002b04:	9b03      	ldr	r3, [sp, #12]
 8002b06:	3402      	adds	r4, #2
 8002b08:	1d1a      	adds	r2, r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b12:	9305      	str	r3, [sp, #20]
 8002b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002bcc <_svfiprintf_r+0x1e8>
 8002b18:	2203      	movs	r2, #3
 8002b1a:	4650      	mov	r0, sl
 8002b1c:	7821      	ldrb	r1, [r4, #0]
 8002b1e:	f000 fa19 	bl	8002f54 <memchr>
 8002b22:	b138      	cbz	r0, 8002b34 <_svfiprintf_r+0x150>
 8002b24:	2240      	movs	r2, #64	@ 0x40
 8002b26:	9b04      	ldr	r3, [sp, #16]
 8002b28:	eba0 000a 	sub.w	r0, r0, sl
 8002b2c:	4082      	lsls	r2, r0
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	3401      	adds	r4, #1
 8002b32:	9304      	str	r3, [sp, #16]
 8002b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b38:	2206      	movs	r2, #6
 8002b3a:	4825      	ldr	r0, [pc, #148]	@ (8002bd0 <_svfiprintf_r+0x1ec>)
 8002b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b40:	f000 fa08 	bl	8002f54 <memchr>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d036      	beq.n	8002bb6 <_svfiprintf_r+0x1d2>
 8002b48:	4b22      	ldr	r3, [pc, #136]	@ (8002bd4 <_svfiprintf_r+0x1f0>)
 8002b4a:	bb1b      	cbnz	r3, 8002b94 <_svfiprintf_r+0x1b0>
 8002b4c:	9b03      	ldr	r3, [sp, #12]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	f023 0307 	bic.w	r3, r3, #7
 8002b54:	3308      	adds	r3, #8
 8002b56:	9303      	str	r3, [sp, #12]
 8002b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b5a:	4433      	add	r3, r6
 8002b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b5e:	e76a      	b.n	8002a36 <_svfiprintf_r+0x52>
 8002b60:	460c      	mov	r4, r1
 8002b62:	2001      	movs	r0, #1
 8002b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b68:	e7a8      	b.n	8002abc <_svfiprintf_r+0xd8>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f04f 0c0a 	mov.w	ip, #10
 8002b70:	4619      	mov	r1, r3
 8002b72:	3401      	adds	r4, #1
 8002b74:	9305      	str	r3, [sp, #20]
 8002b76:	4620      	mov	r0, r4
 8002b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b7c:	3a30      	subs	r2, #48	@ 0x30
 8002b7e:	2a09      	cmp	r2, #9
 8002b80:	d903      	bls.n	8002b8a <_svfiprintf_r+0x1a6>
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0c6      	beq.n	8002b14 <_svfiprintf_r+0x130>
 8002b86:	9105      	str	r1, [sp, #20]
 8002b88:	e7c4      	b.n	8002b14 <_svfiprintf_r+0x130>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b92:	e7f0      	b.n	8002b76 <_svfiprintf_r+0x192>
 8002b94:	ab03      	add	r3, sp, #12
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	462a      	mov	r2, r5
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd8 <_svfiprintf_r+0x1f4>)
 8002b9e:	a904      	add	r1, sp, #16
 8002ba0:	f3af 8000 	nop.w
 8002ba4:	1c42      	adds	r2, r0, #1
 8002ba6:	4606      	mov	r6, r0
 8002ba8:	d1d6      	bne.n	8002b58 <_svfiprintf_r+0x174>
 8002baa:	89ab      	ldrh	r3, [r5, #12]
 8002bac:	065b      	lsls	r3, r3, #25
 8002bae:	f53f af2d 	bmi.w	8002a0c <_svfiprintf_r+0x28>
 8002bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bb4:	e72c      	b.n	8002a10 <_svfiprintf_r+0x2c>
 8002bb6:	ab03      	add	r3, sp, #12
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	462a      	mov	r2, r5
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <_svfiprintf_r+0x1f4>)
 8002bc0:	a904      	add	r1, sp, #16
 8002bc2:	f000 f87d 	bl	8002cc0 <_printf_i>
 8002bc6:	e7ed      	b.n	8002ba4 <_svfiprintf_r+0x1c0>
 8002bc8:	080035d1 	.word	0x080035d1
 8002bcc:	080035d7 	.word	0x080035d7
 8002bd0:	080035db 	.word	0x080035db
 8002bd4:	00000000 	.word	0x00000000
 8002bd8:	0800292d 	.word	0x0800292d

08002bdc <_printf_common>:
 8002bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be0:	4616      	mov	r6, r2
 8002be2:	4698      	mov	r8, r3
 8002be4:	688a      	ldr	r2, [r1, #8]
 8002be6:	690b      	ldr	r3, [r1, #16]
 8002be8:	4607      	mov	r7, r0
 8002bea:	4293      	cmp	r3, r2
 8002bec:	bfb8      	it	lt
 8002bee:	4613      	movlt	r3, r2
 8002bf0:	6033      	str	r3, [r6, #0]
 8002bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bfc:	b10a      	cbz	r2, 8002c02 <_printf_common+0x26>
 8002bfe:	3301      	adds	r3, #1
 8002c00:	6033      	str	r3, [r6, #0]
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	0699      	lsls	r1, r3, #26
 8002c06:	bf42      	ittt	mi
 8002c08:	6833      	ldrmi	r3, [r6, #0]
 8002c0a:	3302      	addmi	r3, #2
 8002c0c:	6033      	strmi	r3, [r6, #0]
 8002c0e:	6825      	ldr	r5, [r4, #0]
 8002c10:	f015 0506 	ands.w	r5, r5, #6
 8002c14:	d106      	bne.n	8002c24 <_printf_common+0x48>
 8002c16:	f104 0a19 	add.w	sl, r4, #25
 8002c1a:	68e3      	ldr	r3, [r4, #12]
 8002c1c:	6832      	ldr	r2, [r6, #0]
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	42ab      	cmp	r3, r5
 8002c22:	dc2b      	bgt.n	8002c7c <_printf_common+0xa0>
 8002c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c28:	6822      	ldr	r2, [r4, #0]
 8002c2a:	3b00      	subs	r3, #0
 8002c2c:	bf18      	it	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	0692      	lsls	r2, r2, #26
 8002c32:	d430      	bmi.n	8002c96 <_printf_common+0xba>
 8002c34:	4641      	mov	r1, r8
 8002c36:	4638      	mov	r0, r7
 8002c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c3c:	47c8      	blx	r9
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d023      	beq.n	8002c8a <_printf_common+0xae>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	6922      	ldr	r2, [r4, #16]
 8002c46:	f003 0306 	and.w	r3, r3, #6
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf14      	ite	ne
 8002c4e:	2500      	movne	r5, #0
 8002c50:	6833      	ldreq	r3, [r6, #0]
 8002c52:	f04f 0600 	mov.w	r6, #0
 8002c56:	bf08      	it	eq
 8002c58:	68e5      	ldreq	r5, [r4, #12]
 8002c5a:	f104 041a 	add.w	r4, r4, #26
 8002c5e:	bf08      	it	eq
 8002c60:	1aed      	subeq	r5, r5, r3
 8002c62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c66:	bf08      	it	eq
 8002c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bfc4      	itt	gt
 8002c70:	1a9b      	subgt	r3, r3, r2
 8002c72:	18ed      	addgt	r5, r5, r3
 8002c74:	42b5      	cmp	r5, r6
 8002c76:	d11a      	bne.n	8002cae <_printf_common+0xd2>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e008      	b.n	8002c8e <_printf_common+0xb2>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4652      	mov	r2, sl
 8002c80:	4641      	mov	r1, r8
 8002c82:	4638      	mov	r0, r7
 8002c84:	47c8      	blx	r9
 8002c86:	3001      	adds	r0, #1
 8002c88:	d103      	bne.n	8002c92 <_printf_common+0xb6>
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c92:	3501      	adds	r5, #1
 8002c94:	e7c1      	b.n	8002c1a <_printf_common+0x3e>
 8002c96:	2030      	movs	r0, #48	@ 0x30
 8002c98:	18e1      	adds	r1, r4, r3
 8002c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ca4:	4422      	add	r2, r4
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cac:	e7c2      	b.n	8002c34 <_printf_common+0x58>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	47c8      	blx	r9
 8002cb8:	3001      	adds	r0, #1
 8002cba:	d0e6      	beq.n	8002c8a <_printf_common+0xae>
 8002cbc:	3601      	adds	r6, #1
 8002cbe:	e7d9      	b.n	8002c74 <_printf_common+0x98>

08002cc0 <_printf_i>:
 8002cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc4:	7e0f      	ldrb	r7, [r1, #24]
 8002cc6:	4691      	mov	r9, r2
 8002cc8:	2f78      	cmp	r7, #120	@ 0x78
 8002cca:	4680      	mov	r8, r0
 8002ccc:	460c      	mov	r4, r1
 8002cce:	469a      	mov	sl, r3
 8002cd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cd6:	d807      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cd8:	2f62      	cmp	r7, #98	@ 0x62
 8002cda:	d80a      	bhi.n	8002cf2 <_printf_i+0x32>
 8002cdc:	2f00      	cmp	r7, #0
 8002cde:	f000 80d3 	beq.w	8002e88 <_printf_i+0x1c8>
 8002ce2:	2f58      	cmp	r7, #88	@ 0x58
 8002ce4:	f000 80ba 	beq.w	8002e5c <_printf_i+0x19c>
 8002ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002cf0:	e03a      	b.n	8002d68 <_printf_i+0xa8>
 8002cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cf6:	2b15      	cmp	r3, #21
 8002cf8:	d8f6      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8002d00 <_printf_i+0x40>)
 8002cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d00:	08002d59 	.word	0x08002d59
 8002d04:	08002d6d 	.word	0x08002d6d
 8002d08:	08002ce9 	.word	0x08002ce9
 8002d0c:	08002ce9 	.word	0x08002ce9
 8002d10:	08002ce9 	.word	0x08002ce9
 8002d14:	08002ce9 	.word	0x08002ce9
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002ce9 	.word	0x08002ce9
 8002d20:	08002ce9 	.word	0x08002ce9
 8002d24:	08002ce9 	.word	0x08002ce9
 8002d28:	08002ce9 	.word	0x08002ce9
 8002d2c:	08002e6f 	.word	0x08002e6f
 8002d30:	08002d97 	.word	0x08002d97
 8002d34:	08002e29 	.word	0x08002e29
 8002d38:	08002ce9 	.word	0x08002ce9
 8002d3c:	08002ce9 	.word	0x08002ce9
 8002d40:	08002e91 	.word	0x08002e91
 8002d44:	08002ce9 	.word	0x08002ce9
 8002d48:	08002d97 	.word	0x08002d97
 8002d4c:	08002ce9 	.word	0x08002ce9
 8002d50:	08002ce9 	.word	0x08002ce9
 8002d54:	08002e31 	.word	0x08002e31
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6032      	str	r2, [r6, #0]
 8002d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e09e      	b.n	8002eaa <_printf_i+0x1ea>
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	1d19      	adds	r1, r3, #4
 8002d72:	6031      	str	r1, [r6, #0]
 8002d74:	0606      	lsls	r6, r0, #24
 8002d76:	d501      	bpl.n	8002d7c <_printf_i+0xbc>
 8002d78:	681d      	ldr	r5, [r3, #0]
 8002d7a:	e003      	b.n	8002d84 <_printf_i+0xc4>
 8002d7c:	0645      	lsls	r5, r0, #25
 8002d7e:	d5fb      	bpl.n	8002d78 <_printf_i+0xb8>
 8002d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	da03      	bge.n	8002d90 <_printf_i+0xd0>
 8002d88:	232d      	movs	r3, #45	@ 0x2d
 8002d8a:	426d      	negs	r5, r5
 8002d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d90:	230a      	movs	r3, #10
 8002d92:	4859      	ldr	r0, [pc, #356]	@ (8002ef8 <_printf_i+0x238>)
 8002d94:	e011      	b.n	8002dba <_printf_i+0xfa>
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	6833      	ldr	r3, [r6, #0]
 8002d9a:	0608      	lsls	r0, r1, #24
 8002d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002da0:	d402      	bmi.n	8002da8 <_printf_i+0xe8>
 8002da2:	0649      	lsls	r1, r1, #25
 8002da4:	bf48      	it	mi
 8002da6:	b2ad      	uxthmi	r5, r5
 8002da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002daa:	6033      	str	r3, [r6, #0]
 8002dac:	bf14      	ite	ne
 8002dae:	230a      	movne	r3, #10
 8002db0:	2308      	moveq	r3, #8
 8002db2:	4851      	ldr	r0, [pc, #324]	@ (8002ef8 <_printf_i+0x238>)
 8002db4:	2100      	movs	r1, #0
 8002db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dba:	6866      	ldr	r6, [r4, #4]
 8002dbc:	2e00      	cmp	r6, #0
 8002dbe:	bfa8      	it	ge
 8002dc0:	6821      	ldrge	r1, [r4, #0]
 8002dc2:	60a6      	str	r6, [r4, #8]
 8002dc4:	bfa4      	itt	ge
 8002dc6:	f021 0104 	bicge.w	r1, r1, #4
 8002dca:	6021      	strge	r1, [r4, #0]
 8002dcc:	b90d      	cbnz	r5, 8002dd2 <_printf_i+0x112>
 8002dce:	2e00      	cmp	r6, #0
 8002dd0:	d04b      	beq.n	8002e6a <_printf_i+0x1aa>
 8002dd2:	4616      	mov	r6, r2
 8002dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8002ddc:	5dc7      	ldrb	r7, [r0, r7]
 8002dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002de2:	462f      	mov	r7, r5
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	460d      	mov	r5, r1
 8002de8:	d9f4      	bls.n	8002dd4 <_printf_i+0x114>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d10b      	bne.n	8002e06 <_printf_i+0x146>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	07df      	lsls	r7, r3, #31
 8002df2:	d508      	bpl.n	8002e06 <_printf_i+0x146>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	6861      	ldr	r1, [r4, #4]
 8002df8:	4299      	cmp	r1, r3
 8002dfa:	bfde      	ittt	le
 8002dfc:	2330      	movle	r3, #48	@ 0x30
 8002dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e06:	1b92      	subs	r2, r2, r6
 8002e08:	6122      	str	r2, [r4, #16]
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f8cd a000 	str.w	sl, [sp]
 8002e14:	aa03      	add	r2, sp, #12
 8002e16:	f7ff fee1 	bl	8002bdc <_printf_common>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d14a      	bne.n	8002eb4 <_printf_i+0x1f4>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	b004      	add	sp, #16
 8002e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	f043 0320 	orr.w	r3, r3, #32
 8002e2e:	6023      	str	r3, [r4, #0]
 8002e30:	2778      	movs	r7, #120	@ 0x78
 8002e32:	4832      	ldr	r0, [pc, #200]	@ (8002efc <_printf_i+0x23c>)
 8002e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	6831      	ldr	r1, [r6, #0]
 8002e3c:	061f      	lsls	r7, r3, #24
 8002e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e42:	d402      	bmi.n	8002e4a <_printf_i+0x18a>
 8002e44:	065f      	lsls	r7, r3, #25
 8002e46:	bf48      	it	mi
 8002e48:	b2ad      	uxthmi	r5, r5
 8002e4a:	6031      	str	r1, [r6, #0]
 8002e4c:	07d9      	lsls	r1, r3, #31
 8002e4e:	bf44      	itt	mi
 8002e50:	f043 0320 	orrmi.w	r3, r3, #32
 8002e54:	6023      	strmi	r3, [r4, #0]
 8002e56:	b11d      	cbz	r5, 8002e60 <_printf_i+0x1a0>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	e7ab      	b.n	8002db4 <_printf_i+0xf4>
 8002e5c:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <_printf_i+0x238>)
 8002e5e:	e7e9      	b.n	8002e34 <_printf_i+0x174>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	f023 0320 	bic.w	r3, r3, #32
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	e7f6      	b.n	8002e58 <_printf_i+0x198>
 8002e6a:	4616      	mov	r6, r2
 8002e6c:	e7bd      	b.n	8002dea <_printf_i+0x12a>
 8002e6e:	6833      	ldr	r3, [r6, #0]
 8002e70:	6825      	ldr	r5, [r4, #0]
 8002e72:	1d18      	adds	r0, r3, #4
 8002e74:	6961      	ldr	r1, [r4, #20]
 8002e76:	6030      	str	r0, [r6, #0]
 8002e78:	062e      	lsls	r6, r5, #24
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	d501      	bpl.n	8002e82 <_printf_i+0x1c2>
 8002e7e:	6019      	str	r1, [r3, #0]
 8002e80:	e002      	b.n	8002e88 <_printf_i+0x1c8>
 8002e82:	0668      	lsls	r0, r5, #25
 8002e84:	d5fb      	bpl.n	8002e7e <_printf_i+0x1be>
 8002e86:	8019      	strh	r1, [r3, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4616      	mov	r6, r2
 8002e8c:	6123      	str	r3, [r4, #16]
 8002e8e:	e7bc      	b.n	8002e0a <_printf_i+0x14a>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	2100      	movs	r1, #0
 8002e94:	1d1a      	adds	r2, r3, #4
 8002e96:	6032      	str	r2, [r6, #0]
 8002e98:	681e      	ldr	r6, [r3, #0]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f859 	bl	8002f54 <memchr>
 8002ea2:	b108      	cbz	r0, 8002ea8 <_printf_i+0x1e8>
 8002ea4:	1b80      	subs	r0, r0, r6
 8002ea6:	6060      	str	r0, [r4, #4]
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	6123      	str	r3, [r4, #16]
 8002eac:	2300      	movs	r3, #0
 8002eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eb2:	e7aa      	b.n	8002e0a <_printf_i+0x14a>
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4640      	mov	r0, r8
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	47d0      	blx	sl
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0ad      	beq.n	8002e1e <_printf_i+0x15e>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	079b      	lsls	r3, r3, #30
 8002ec6:	d413      	bmi.n	8002ef0 <_printf_i+0x230>
 8002ec8:	68e0      	ldr	r0, [r4, #12]
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	bfb8      	it	lt
 8002ed0:	4618      	movlt	r0, r3
 8002ed2:	e7a6      	b.n	8002e22 <_printf_i+0x162>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4640      	mov	r0, r8
 8002edc:	47d0      	blx	sl
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d09d      	beq.n	8002e1e <_printf_i+0x15e>
 8002ee2:	3501      	adds	r5, #1
 8002ee4:	68e3      	ldr	r3, [r4, #12]
 8002ee6:	9903      	ldr	r1, [sp, #12]
 8002ee8:	1a5b      	subs	r3, r3, r1
 8002eea:	42ab      	cmp	r3, r5
 8002eec:	dcf2      	bgt.n	8002ed4 <_printf_i+0x214>
 8002eee:	e7eb      	b.n	8002ec8 <_printf_i+0x208>
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	f104 0619 	add.w	r6, r4, #25
 8002ef6:	e7f5      	b.n	8002ee4 <_printf_i+0x224>
 8002ef8:	080035e2 	.word	0x080035e2
 8002efc:	080035f3 	.word	0x080035f3

08002f00 <memmove>:
 8002f00:	4288      	cmp	r0, r1
 8002f02:	b510      	push	{r4, lr}
 8002f04:	eb01 0402 	add.w	r4, r1, r2
 8002f08:	d902      	bls.n	8002f10 <memmove+0x10>
 8002f0a:	4284      	cmp	r4, r0
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	d807      	bhi.n	8002f20 <memmove+0x20>
 8002f10:	1e43      	subs	r3, r0, #1
 8002f12:	42a1      	cmp	r1, r4
 8002f14:	d008      	beq.n	8002f28 <memmove+0x28>
 8002f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f1e:	e7f8      	b.n	8002f12 <memmove+0x12>
 8002f20:	4601      	mov	r1, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	428a      	cmp	r2, r1
 8002f26:	d100      	bne.n	8002f2a <memmove+0x2a>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f32:	e7f7      	b.n	8002f24 <memmove+0x24>

08002f34 <_sbrk_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	2300      	movs	r3, #0
 8002f38:	4d05      	ldr	r5, [pc, #20]	@ (8002f50 <_sbrk_r+0x1c>)
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fe82 	bl	8000c48 <_sbrk>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_sbrk_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_sbrk_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	20000528 	.word	0x20000528

08002f54 <memchr>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	b510      	push	{r4, lr}
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	4402      	add	r2, r0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	d101      	bne.n	8002f66 <memchr+0x12>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e003      	b.n	8002f6e <memchr+0x1a>
 8002f66:	7804      	ldrb	r4, [r0, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	428c      	cmp	r4, r1
 8002f6c:	d1f6      	bne.n	8002f5c <memchr+0x8>
 8002f6e:	bd10      	pop	{r4, pc}

08002f70 <memcpy>:
 8002f70:	440a      	add	r2, r1
 8002f72:	4291      	cmp	r1, r2
 8002f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f78:	d100      	bne.n	8002f7c <memcpy+0xc>
 8002f7a:	4770      	bx	lr
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f82:	4291      	cmp	r1, r2
 8002f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f88:	d1f9      	bne.n	8002f7e <memcpy+0xe>
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <_realloc_r>:
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	4680      	mov	r8, r0
 8002f92:	4615      	mov	r5, r2
 8002f94:	460c      	mov	r4, r1
 8002f96:	b921      	cbnz	r1, 8002fa2 <_realloc_r+0x16>
 8002f98:	4611      	mov	r1, r2
 8002f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	f7ff bc39 	b.w	8002814 <_malloc_r>
 8002fa2:	b92a      	cbnz	r2, 8002fb0 <_realloc_r+0x24>
 8002fa4:	f7ff fbcc 	bl	8002740 <_free_r>
 8002fa8:	2400      	movs	r4, #0
 8002faa:	4620      	mov	r0, r4
 8002fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb0:	f000 f81a 	bl	8002fe8 <_malloc_usable_size_r>
 8002fb4:	4285      	cmp	r5, r0
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	d802      	bhi.n	8002fc0 <_realloc_r+0x34>
 8002fba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002fbe:	d8f4      	bhi.n	8002faa <_realloc_r+0x1e>
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f7ff fc26 	bl	8002814 <_malloc_r>
 8002fc8:	4607      	mov	r7, r0
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d0ec      	beq.n	8002fa8 <_realloc_r+0x1c>
 8002fce:	42b5      	cmp	r5, r6
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	bf28      	it	cs
 8002fd6:	4632      	movcs	r2, r6
 8002fd8:	f7ff ffca 	bl	8002f70 <memcpy>
 8002fdc:	4621      	mov	r1, r4
 8002fde:	4640      	mov	r0, r8
 8002fe0:	f7ff fbae 	bl	8002740 <_free_r>
 8002fe4:	463c      	mov	r4, r7
 8002fe6:	e7e0      	b.n	8002faa <_realloc_r+0x1e>

08002fe8 <_malloc_usable_size_r>:
 8002fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fec:	1f18      	subs	r0, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bfbc      	itt	lt
 8002ff2:	580b      	ldrlt	r3, [r1, r0]
 8002ff4:	18c0      	addlt	r0, r0, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
